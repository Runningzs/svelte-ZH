'use strict';

var index = require('./index-0642fb9d.js');
var index$1 = require('./index-2209bb13.js');
var index$2 = require('./index-93f59318.js');

const CONTEXT_KEY = {};

const preload = () => ({});

/* src\components\PreloadingIndicator.svelte generated by Svelte v3.12.0 */

const css = {
	code: ".progress-container.svelte-3253v6{position:absolute;top:0;left:0;width:100%;height:4px;z-index:999}.progress.svelte-3253v6{position:absolute;left:0;top:0;height:100%;background-color:var(--prime);transition:width 0.4s}.fade.svelte-3253v6{position:fixed;width:100%;height:100%;background-color:rgba(255,255,255,0.3);pointer-events:none;z-index:998;animation:svelte-3253v6-fade 0.4s}@keyframes svelte-3253v6-fade{from{opacity:0 }to{opacity:1 }}",
	map: "{\"version\":3,\"file\":\"PreloadingIndicator.svelte\",\"sources\":[\"PreloadingIndicator.svelte\"],\"sourcesContent\":[\"<script>\\r\\n\\timport { onMount } from 'svelte';\\r\\n\\r\\n\\tlet p = 0;\\r\\n\\tlet visible = false;\\r\\n\\r\\n\\tonMount(() => {\\r\\n\\t\\tfunction next() {\\r\\n\\t\\t\\tvisible = true;\\r\\n\\t\\t\\tp += 0.1;\\r\\n\\r\\n\\t\\t\\tconst remaining = 1 - p;\\r\\n\\t\\t\\tif (remaining > 0.15) setTimeout(next, 500 / remaining);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tsetTimeout(next, 250);\\r\\n\\t});\\r\\n</script>\\r\\n\\r\\n<style>\\r\\n\\t.progress-container {\\r\\n\\t\\tposition: absolute;\\r\\n\\t\\ttop: 0;\\r\\n\\t\\tleft: 0;\\r\\n\\t\\twidth: 100%;\\r\\n\\t\\theight: 4px;\\r\\n\\t\\tz-index: 999;\\r\\n\\t}\\r\\n\\r\\n\\t.progress {\\r\\n\\t\\tposition: absolute;\\r\\n\\t\\tleft: 0;\\r\\n\\t\\ttop: 0;\\r\\n\\t\\theight: 100%;\\r\\n\\t\\tbackground-color: var(--prime);\\r\\n\\t\\ttransition: width 0.4s;\\r\\n\\t}\\r\\n\\r\\n\\t.fade {\\r\\n\\t\\tposition: fixed;\\r\\n\\t\\twidth: 100%;\\r\\n\\t\\theight: 100%;\\r\\n\\t\\tbackground-color: rgba(255,255,255,0.3);\\r\\n\\t\\tpointer-events: none;\\r\\n\\t\\tz-index: 998;\\r\\n\\t\\tanimation: fade 0.4s;\\r\\n\\t}\\r\\n\\r\\n\\t@keyframes fade {\\r\\n\\t\\tfrom { opacity: 0 }\\r\\n\\t\\tto { opacity: 1 }\\r\\n\\t}\\r\\n</style>\\r\\n\\r\\n{#if visible}\\r\\n\\t<div class=\\\"progress-container\\\">\\r\\n\\t\\t<div class=\\\"progress\\\" style=\\\"width: {p * 100}%\\\"></div>\\r\\n\\t</div>\\r\\n{/if}\\r\\n\\r\\n{#if p >= 0.4}\\r\\n\\t<div class=\\\"fade\\\"></div>\\r\\n{/if}\"],\"names\":[],\"mappings\":\"AAoBC,mBAAmB,cAAC,CAAC,AACpB,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,GAAG,CACX,OAAO,CAAE,GAAG,AACb,CAAC,AAED,SAAS,cAAC,CAAC,AACV,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,CAAC,CACP,GAAG,CAAE,CAAC,CACN,MAAM,CAAE,IAAI,CACZ,gBAAgB,CAAE,IAAI,OAAO,CAAC,CAC9B,UAAU,CAAE,KAAK,CAAC,IAAI,AACvB,CAAC,AAED,KAAK,cAAC,CAAC,AACN,QAAQ,CAAE,KAAK,CACf,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,gBAAgB,CAAE,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CACvC,cAAc,CAAE,IAAI,CACpB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,kBAAI,CAAC,IAAI,AACrB,CAAC,AAED,WAAW,kBAAK,CAAC,AAChB,IAAI,AAAC,CAAC,AAAC,OAAO,CAAE,CAAC,CAAC,CAAC,AACnB,EAAE,AAAC,CAAC,AAAC,OAAO,CAAE,CAAC,CAAC,CAAC,AAClB,CAAC\"}"
};

const PreloadingIndicator = index.create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let p = 0;
	let visible = false;

	index.onMount(() => {
		function next() {
			visible = true;
			p += 0.1;

			const remaining = 1 - p;
			if (remaining > 0.15) setTimeout(next, 500 / remaining);
		}

		setTimeout(next, 250);
	});

	$$result.css.add(css);

	return `${ visible ? `<div class="progress-container svelte-3253v6">
			<div class="progress svelte-3253v6" style="width: ${index.escape(p * 100)}%"></div>
		</div>` : `` }

	${ p >= 0.4 ? `<div class="fade svelte-3253v6"></div>` : `` }`;
});

/* src\routes\_layout.svelte generated by Svelte v3.12.0 */

const css$1 = {
	code: "main.svelte-hxszvy{position:relative;margin:0 auto;padding:var(--nav-h) 0 0 0;overflow-x:hidden}",
	map: "{\"version\":3,\"file\":\"_layout.svelte\",\"sources\":[\"_layout.svelte\"],\"sourcesContent\":[\"<script>\\r\\n\\timport { setContext } from 'svelte';\\r\\n\\timport { stores } from '@sapper/app';\\r\\n\\timport { Icon, Icons, Nav, NavItem } from '@sveltejs/site-kit';\\r\\n\\timport PreloadingIndicator from '../components/PreloadingIndicator.svelte';\\r\\n\\r\\n\\texport let segment;\\r\\n\\r\\n\\tconst { page, preloading, session } = stores();\\r\\n\\r\\n\\tsetContext('app', {\\r\\n\\t\\tlogin: () => {\\r\\n\\t\\t\\tconst login_window = window.open(`${window.location.origin}/auth/login`, 'login', 'width=600,height=400');\\r\\n\\r\\n\\t\\t\\twindow.addEventListener('message', function handler(event) {\\r\\n\\t\\t\\t\\tlogin_window.close();\\r\\n\\t\\t\\t\\twindow.removeEventListener('message', handler);\\r\\n\\t\\t\\t\\t$session.user = event.data.user;\\r\\n\\t\\t\\t});\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tlogout: async () => {\\r\\n\\t\\t\\tconst r = await fetch(`/auth/logout`, {\\r\\n\\t\\t\\t\\tcredentials: 'include'\\r\\n\\t\\t\\t});\\r\\n\\r\\n\\t\\t\\tif (r.ok) $session.user = null;\\r\\n\\t\\t}\\r\\n\\t});\\r\\n</script>\\r\\n\\r\\n<Icons/>\\r\\n\\r\\n{#if $preloading}\\r\\n\\t<PreloadingIndicator/>\\r\\n{/if}\\r\\n\\r\\n{#if $page.path !== '/repl/embed'}\\r\\n\\t<Nav {segment} {page} logo=\\\"svelte-logo-horizontal.svg\\\">\\r\\n\\t\\t<NavItem segment=\\\"tutorial\\\">教程</NavItem>\\r\\n\\t\\t<NavItem segment=\\\"docs\\\">API</NavItem>\\r\\n\\t\\t<NavItem segment=\\\"examples\\\">实例</NavItem>\\r\\n\\t\\t<NavItem segment=\\\"repl\\\">REPL</NavItem>\\r\\n\\t\\t<NavItem segment=\\\"blog\\\">博客</NavItem>\\r\\n\\t\\t<NavItem segment=\\\"faq\\\">常见问题</NavItem>\\r\\n\\r\\n\\t\\t<NavItem external=\\\"https://sapper.svelte.dev\\\">Sapper</NavItem>\\r\\n\\r\\n\\t\\t<NavItem external=\\\"chat\\\" title=\\\"Discord Chat\\\">\\r\\n\\t\\t\\t<Icon name=\\\"message-square\\\"/>\\r\\n\\t\\t</NavItem>\\r\\n\\r\\n\\t\\t<NavItem external=\\\"https://github.com/sveltejs/svelte\\\" title=\\\"GitHub Repo\\\">\\r\\n\\t\\t\\t<Icon name=\\\"github\\\"/>\\r\\n\\t\\t</NavItem>\\r\\n\\t</Nav>\\r\\n{/if}\\r\\n\\r\\n<main>\\r\\n\\t<slot></slot>\\r\\n</main>\\r\\n\\r\\n<style>\\r\\n\\tmain {\\r\\n\\t\\tposition: relative;\\r\\n\\t\\tmargin: 0 auto;\\r\\n\\t\\t/* padding: var(--nav-h) var(--side-nav) 0 var(--side-nav); */\\r\\n\\t\\tpadding: var(--nav-h) 0 0 0;\\r\\n\\t\\toverflow-x: hidden;\\r\\n\\t}\\r\\n</style>\\r\\n\"],\"names\":[],\"mappings\":\"AA+DC,IAAI,cAAC,CAAC,AACL,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,CAAC,CAAC,IAAI,CAEd,OAAO,CAAE,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAC3B,UAAU,CAAE,MAAM,AACnB,CAAC\"}"
};

const Layout = index.create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let $session, $preloading, $page;

	

	let { segment } = $$props;

	const { page, preloading, session } = stores$1(); index.validate_store(page, 'page'); $page = index.get_store_value(page); index.validate_store(preloading, 'preloading'); $preloading = index.get_store_value(preloading); index.validate_store(session, 'session'); $session = index.get_store_value(session);

	index.setContext('app', {
		login: () => {
			const login_window = window.open(`${window.location.origin}/auth/login`, 'login', 'width=600,height=400');

			window.addEventListener('message', function handler(event) {
				login_window.close();
				window.removeEventListener('message', handler);
				$session.user = event.data.user;
			});
		},

		logout: async () => {
			const r = await fetch(`/auth/logout`, {
				credentials: 'include'
			});

			if (r.ok) $session.user = null;
		}
	});

	if ($$props.segment === void 0 && $$bindings.segment && segment !== void 0) $$bindings.segment(segment);

	$$result.css.add(css$1);

	index.validate_store(session, 'session'); $session = index.get_store_value(session);
	index.validate_store(preloading, 'preloading'); $preloading = index.get_store_value(preloading);
	index.validate_store(page, 'page'); $page = index.get_store_value(page);

	return `${index.validate_component(index$1.Icons, 'Icons').$$render($$result, {}, {}, {})}

	${ $preloading ? `${index.validate_component(PreloadingIndicator, 'PreloadingIndicator').$$render($$result, {}, {}, {})}` : `` }

	${ $page.path !== '/repl/embed' ? `${index.validate_component(index$1.Nav, 'Nav').$$render($$result, {
		segment: segment,
		page: page,
		logo: "svelte-logo-horizontal.svg"
	}, {}, {
		default: () => `
			${index.validate_component(index$1.NavItem, 'NavItem').$$render($$result, { segment: "tutorial" }, {}, { default: () => `教程` })}
			${index.validate_component(index$1.NavItem, 'NavItem').$$render($$result, { segment: "docs" }, {}, { default: () => `API` })}
			${index.validate_component(index$1.NavItem, 'NavItem').$$render($$result, { segment: "examples" }, {}, { default: () => `实例` })}
			${index.validate_component(index$1.NavItem, 'NavItem').$$render($$result, { segment: "repl" }, {}, { default: () => `REPL` })}
			${index.validate_component(index$1.NavItem, 'NavItem').$$render($$result, { segment: "blog" }, {}, { default: () => `博客` })}
			${index.validate_component(index$1.NavItem, 'NavItem').$$render($$result, { segment: "faq" }, {}, { default: () => `常见问题` })}

			${index.validate_component(index$1.NavItem, 'NavItem').$$render($$result, { external: "https://sapper.svelte.dev" }, {}, { default: () => `Sapper` })}

			${index.validate_component(index$1.NavItem, 'NavItem').$$render($$result, { external: "chat", title: "Discord Chat" }, {}, {
		default: () => `
				${index.validate_component(index$1.Icon, 'Icon').$$render($$result, { name: "message-square" }, {}, {})}
			`
	})}

			${index.validate_component(index$1.NavItem, 'NavItem').$$render($$result, {
		external: "https://github.com/sveltejs/svelte",
		title: "GitHub Repo"
	}, {}, {
		default: () => `
				${index.validate_component(index$1.Icon, 'Icon').$$render($$result, { name: "github" }, {}, {})}
			`
	})}
		`
	})}` : `` }

	<main class="svelte-hxszvy">
		${$$slots.default ? $$slots.default({}) : ``}
	</main>`;
});

/* src\routes\_error.svelte generated by Svelte v3.12.0 */

const css$2 = {
	code: ".container.svelte-lk6uuh{padding:var(--top-offset) var(--side-nav) 6rem var(--side-nav)}h1.svelte-lk6uuh,p.svelte-lk6uuh{margin:0 auto }h1.svelte-lk6uuh{font-size:2.8em;font-weight:300;margin:0 0 0.5em 0}p.svelte-lk6uuh{margin:1em auto }.error.svelte-lk6uuh{background-color:#da106e;color:white;padding:12px 16px;font:600 16px/1.7 var(--font);border-radius:2px}",
	map: "{\"version\":3,\"file\":\"_error.svelte\",\"sources\":[\"_error.svelte\"],\"sourcesContent\":[\"<script>\\r\\n\\tconst dev = \\\"development\\\" === 'development';\\r\\n\\r\\n\\texport let status;\\r\\n\\texport let error;\\r\\n\\r\\n\\t// we don't want to use <svelte:window bind:online> here,\\r\\n\\t// because we only care about the online state when\\r\\n\\t// the page first loads\\r\\n\\tconst online = typeof navigator !== 'undefined'\\r\\n\\t\\t? navigator.onLine\\r\\n\\t\\t: true;\\r\\n</script>\\r\\n\\r\\n<style>\\r\\n\\t.container {\\r\\n\\t\\tpadding: var(--top-offset) var(--side-nav) 6rem var(--side-nav);\\r\\n\\t}\\r\\n\\r\\n\\th1, p { margin: 0 auto }\\r\\n\\r\\n\\th1 {\\r\\n\\t\\tfont-size: 2.8em;\\r\\n\\t\\tfont-weight: 300;\\r\\n\\t\\tmargin: 0 0 0.5em 0;\\r\\n\\t}\\r\\n\\r\\n\\tp { margin: 1em auto }\\r\\n\\r\\n\\t.error {\\r\\n\\t\\tbackground-color: #da106e;\\r\\n\\t\\tcolor: white;\\r\\n\\t\\tpadding: 12px 16px;\\r\\n\\t\\tfont: 600 16px/1.7 var(--font);\\r\\n\\t\\tborder-radius: 2px;\\r\\n\\t}\\r\\n\\r\\n\\t/* @media (min-width: 480px) {\\r\\n\\t\\th1 { font-size: 4em }\\r\\n\\t} */\\r\\n</style>\\r\\n\\r\\n<svelte:head>\\r\\n\\t<title>{status}</title>\\r\\n</svelte:head>\\r\\n\\r\\n<div class=\\\"container\\\">\\r\\n\\t{#if online}\\r\\n\\t\\t<h1>Yikes!</h1>\\r\\n\\r\\n\\t\\t{#if error.message}\\r\\n\\t\\t\\t<p class=\\\"error\\\">{status}: {error.message}</p>\\r\\n\\t\\t{:else}\\r\\n\\t\\t\\t<p class=\\\"error\\\">Encountered a {status} error</p>\\r\\n\\t\\t{/if}\\r\\n\\r\\n\\t\\t{#if dev && error.stack}\\r\\n\\t\\t\\t<pre>{error.stack}</pre>\\r\\n\\t\\t{:else}\\r\\n\\t\\t\\t{#if status >= 500}\\r\\n\\t\\t\\t\\t<p>Please try reloading the page.</p>\\r\\n\\t\\t\\t{/if}\\r\\n\\r\\n\\t\\t\\t<p>If the error persists, please drop by <a href=\\\"chat\\\">Discord chatroom</a> and let us know, or raise an issue on <a href=\\\"https://github.com/sveltejs/svelte\\\">GitHub</a>. Thanks!</p>\\r\\n\\t\\t{/if}\\r\\n\\t{:else}\\r\\n\\t\\t<h1>It looks like you're offline</h1>\\r\\n\\r\\n\\t\\t<p>Reload the page once you've found the internet.</p>\\r\\n\\t{/if}\\r\\n</div>\"],\"names\":[],\"mappings\":\"AAeC,UAAU,cAAC,CAAC,AACX,OAAO,CAAE,IAAI,YAAY,CAAC,CAAC,IAAI,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,AAChE,CAAC,AAED,gBAAE,CAAE,CAAC,cAAC,CAAC,AAAC,MAAM,CAAE,CAAC,CAAC,IAAI,CAAC,CAAC,AAExB,EAAE,cAAC,CAAC,AACH,SAAS,CAAE,KAAK,CAChB,WAAW,CAAE,GAAG,CAChB,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,AACpB,CAAC,AAED,CAAC,cAAC,CAAC,AAAC,MAAM,CAAE,GAAG,CAAC,IAAI,CAAC,CAAC,AAEtB,MAAM,cAAC,CAAC,AACP,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,KAAK,CACZ,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,IAAI,CAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,CAC9B,aAAa,CAAE,GAAG,AACnB,CAAC\"}"
};

const Error$1 = index.create_ssr_component(($$result, $$props, $$bindings, $$slots) => {

	let { status, error } = $$props;

	// we don't want to use <svelte:window bind:online> here,
	// because we only care about the online state when
	// the page first loads
	const online = typeof navigator !== 'undefined'
		? navigator.onLine
		: true;

	if ($$props.status === void 0 && $$bindings.status && status !== void 0) $$bindings.status(status);
	if ($$props.error === void 0 && $$bindings.error && error !== void 0) $$bindings.error(error);

	$$result.css.add(css$2);

	return `${($$result.head += `<title>${index.escape(status)}</title>`, "")}

	<div class="container svelte-lk6uuh">
		${ online ? `<h1 class="svelte-lk6uuh">Yikes!</h1>

			${ error.message ? `<p class="error svelte-lk6uuh">${index.escape(status)}: ${index.escape(error.message)}</p>` : `<p class="error svelte-lk6uuh">Encountered a ${index.escape(status)} error</p>` }

			${  error.stack ? `<pre>${index.escape(error.stack)}</pre>` : `${ status >= 500 ? `<p class="svelte-lk6uuh">Please try reloading the page.</p>` : `` }

				<p class="svelte-lk6uuh">If the error persists, please drop by <a href="chat">Discord chatroom</a> and let us know, or raise an issue on <a href="https://github.com/sveltejs/svelte">GitHub</a>. Thanks!</p>` }` : `<h1 class="svelte-lk6uuh">It looks like you're offline</h1>

			<p class="svelte-lk6uuh">Reload the page once you've found the internet.</p>` }
	</div>`;
});

/* src\node_modules\@sapper\internal\App.svelte generated by Svelte v3.12.0 */

const App = index.create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	

	let { stores, error, status, segments, level0, level1 = null, level2 = null } = $$props;

	index.setContext(CONTEXT_KEY, stores);

	if ($$props.stores === void 0 && $$bindings.stores && stores !== void 0) $$bindings.stores(stores);
	if ($$props.error === void 0 && $$bindings.error && error !== void 0) $$bindings.error(error);
	if ($$props.status === void 0 && $$bindings.status && status !== void 0) $$bindings.status(status);
	if ($$props.segments === void 0 && $$bindings.segments && segments !== void 0) $$bindings.segments(segments);
	if ($$props.level0 === void 0 && $$bindings.level0 && level0 !== void 0) $$bindings.level0(level0);
	if ($$props.level1 === void 0 && $$bindings.level1 && level1 !== void 0) $$bindings.level1(level1);
	if ($$props.level2 === void 0 && $$bindings.level2 && level2 !== void 0) $$bindings.level2(level2);

	return `


	${index.validate_component(Layout, 'Layout').$$render($$result, Object.assign({ segment: segments[0] }, level0.props), {}, {
		default: () => `
		${ error ? `${index.validate_component(Error$1, 'Error').$$render($$result, { error: error, status: status }, {}, {})}` : `${index.validate_component(((level1.component) || index.missing_component), 'svelte:component').$$render($$result, Object.assign({ segment: segments[1] }, level1.props), {}, {
		default: () => `
				${ level2 ? `${index.validate_component(((level2.component) || index.missing_component), 'svelte:component').$$render($$result, Object.assign(level2.props), {}, {})}` : `` }
			`
	})}` }
	`
	})}`;
});

// This file is generated by Sapper — do not edit it!

const ignore = [/^\/examples.json$/, /^\/examples\/([^\/]+?).json$/, /^\/tutorial.json$/, /^\/tutorial\/random-number\/?$/, /^\/tutorial\/([^\/]+?).json$/, /^\/apps.json$/, /^\/auth\/callback\/?$/, /^\/auth\/logout\/?$/, /^\/auth\/login\/?$/, /^\/blog.json$/, /^\/blog\/rss.xml$/, /^\/blog\/([^\/]+?).json$/, /^\/chat\/?$/, /^\/docs.json$/, /^\/repl\/create.json$/, /^\/repl\/local\/(.+)$/, /^\/repl\/([^\/]+?).json$/, /^\/faq\/?$/];

const components = [
	{
		js: () => new Promise(function (resolve) { resolve(require('./index-8ee93a28.js')); }),
		css: "__SAPPER_CSS_PLACEHOLDER:index.svelte__"
	},
	{
		js: () => new Promise(function (resolve) { resolve(require('./index-16fb8e41.js')); }),
		css: "__SAPPER_CSS_PLACEHOLDER:examples/index.svelte__"
	},
	{
		js: () => new Promise(function (resolve) { resolve(require('./_layout-4eb4439b.js')); }),
		css: "__SAPPER_CSS_PLACEHOLDER:tutorial/_layout.svelte__"
	},
	{
		js: () => new Promise(function (resolve) { resolve(require('./index-b22b1c38.js')); }),
		css: "__SAPPER_CSS_PLACEHOLDER:tutorial/index.svelte__"
	},
	{
		js: () => new Promise(function (resolve) { resolve(require('./index-a50b0fc8.js')); }),
		css: "__SAPPER_CSS_PLACEHOLDER:tutorial/[slug]/index.svelte__"
	},
	{
		js: () => new Promise(function (resolve) { resolve(require('./index-ff248b74.js')); }),
		css: "__SAPPER_CSS_PLACEHOLDER:apps/index.svelte__"
	},
	{
		js: () => new Promise(function (resolve) { resolve(require('./index-7a08c016.js')); }),
		css: "__SAPPER_CSS_PLACEHOLDER:blog/index.svelte__"
	},
	{
		js: () => new Promise(function (resolve) { resolve(require('./[slug]-59eb8741.js')); }),
		css: "__SAPPER_CSS_PLACEHOLDER:blog/[slug].svelte__"
	},
	{
		js: () => new Promise(function (resolve) { resolve(require('./index-95fec46c.js')); }),
		css: "__SAPPER_CSS_PLACEHOLDER:docs/index.svelte__"
	},
	{
		js: () => new Promise(function (resolve) { resolve(require('./index-3b75c53e.js')); }),
		css: "__SAPPER_CSS_PLACEHOLDER:repl/index.svelte__"
	},
	{
		js: () => new Promise(function (resolve) { resolve(require('./embed-6c55722b.js')); }),
		css: "__SAPPER_CSS_PLACEHOLDER:repl/embed.svelte__"
	},
	{
		js: () => new Promise(function (resolve) { resolve(require('./index-a56f5a28.js')); }),
		css: "__SAPPER_CSS_PLACEHOLDER:repl/[id]/index.svelte__"
	}
];

const routes = (d => [
	{
		// index.svelte
		pattern: /^\/$/,
		parts: [
			{ i: 0 }
		]
	},

	{
		// examples/index.svelte
		pattern: /^\/examples\/?$/,
		parts: [
			{ i: 1 }
		]
	},

	{
		// tutorial/index.svelte
		pattern: /^\/tutorial\/?$/,
		parts: [
			{ i: 2 },
			{ i: 3 }
		]
	},

	{
		// tutorial/[slug]/index.svelte
		pattern: /^\/tutorial\/([^\/]+?)\/?$/,
		parts: [
			{ i: 2 },
			{ i: 4, params: match => ({ slug: d(match[1]) }) }
		]
	},

	{
		// apps/index.svelte
		pattern: /^\/apps\/?$/,
		parts: [
			{ i: 5 }
		]
	},

	{
		// blog/index.svelte
		pattern: /^\/blog\/?$/,
		parts: [
			{ i: 6 }
		]
	},

	{
		// blog/[slug].svelte
		pattern: /^\/blog\/([^\/]+?)\/?$/,
		parts: [
			null,
			{ i: 7, params: match => ({ slug: d(match[1]) }) }
		]
	},

	{
		// docs/index.svelte
		pattern: /^\/docs\/?$/,
		parts: [
			{ i: 8 }
		]
	},

	{
		// repl/index.svelte
		pattern: /^\/repl\/?$/,
		parts: [
			{ i: 9 }
		]
	},

	{
		// repl/embed.svelte
		pattern: /^\/repl\/embed\/?$/,
		parts: [
			null,
			{ i: 10 }
		]
	},

	{
		// repl/[id]/index.svelte
		pattern: /^\/repl\/([^\/]+?)\/?$/,
		parts: [
			null,
			{ i: 11, params: match => ({ id: d(match[1]) }) }
		]
	}
])(decodeURIComponent);

if (typeof window !== 'undefined') {
	new Promise(function (resolve) { resolve(require('./sapper-dev-client-c93b59fc.js')); }).then(client => {
		client.connect(10000);
	});
}

function goto(href, opts = { replaceState: false }) {
	const target = select_target(new URL(href, document.baseURI));

	if (target) {
		_history[opts.replaceState ? 'replaceState' : 'pushState']({ id: cid }, '', href);
		return navigate(target, null).then(() => {});
	}

	location.href = href;
	return new Promise(f => {}); // never resolves
}

const initial_data = typeof __SAPPER__ !== 'undefined' && __SAPPER__;

let ready = false;
let root_component;
let current_token;
let root_preloaded;
let current_branch = [];
let current_query = '{}';

const stores = {
	page: index$2.writable({}),
	preloading: index$2.writable(null),
	session: index$2.writable(initial_data && initial_data.session)
};

let $session;
let session_dirty;

stores.session.subscribe(async value => {
	$session = value;

	if (!ready) return;
	session_dirty = true;

	const target = select_target(new URL(location.href));

	const token = current_token = {};
	const { redirect, props, branch } = await hydrate_target(target);
	if (token !== current_token) return; // a secondary navigation happened while we were loading

	await render(redirect, branch, props, target.page);
});

let prefetching


 = null;

let target;

let uid = 1;

let cid;

const _history = typeof history !== 'undefined' ? history : {
	pushState: (state, title, href) => {},
	replaceState: (state, title, href) => {},
	scrollRestoration: ''
};

const scroll_history = {};

function extract_query(search) {
	const query = Object.create(null);
	if (search.length > 0) {
		search.slice(1).split('&').forEach(searchParam => {
			let [, key, value = ''] = /([^=]*)(?:=(.*))?/.exec(decodeURIComponent(searchParam.replace(/\+/g, ' ')));
			if (typeof query[key] === 'string') query[key] = [query[key]];
			if (typeof query[key] === 'object') (query[key] ).push(value);
			else query[key] = value;
		});
	}
	return query;
}

function select_target(url) {
	if (url.origin !== location.origin) return null;
	if (!url.pathname.startsWith(initial_data.baseUrl)) return null;

	let path = url.pathname.slice(initial_data.baseUrl.length);

	if (path === '') {
		path = '/';
	}

	// avoid accidental clashes between server routes and page routes
	if (ignore.some(pattern => pattern.test(path))) return;

	for (let i = 0; i < routes.length; i += 1) {
		const route = routes[i];

		const match = route.pattern.exec(path);

		if (match) {
			const query = extract_query(url.search);
			const part = route.parts[route.parts.length - 1];
			const params = part.params ? part.params(match) : {};

			const page = { host: location.host, path, query, params };

			return { href: url.href, route, match, page };
		}
	}
}

function scroll_state() {
	return {
		x: pageXOffset,
		y: pageYOffset
	};
}

async function navigate(target, id, noscroll, hash) {
	if (id) {
		// popstate or initial navigation
		cid = id;
	} else {
		const current_scroll = scroll_state();

		// clicked on a link. preserve scroll state
		scroll_history[cid] = current_scroll;

		id = cid = ++uid;
		scroll_history[cid] = noscroll ? current_scroll : { x: 0, y: 0 };
	}

	cid = id;

	if (root_component) stores.preloading.set(true);

	const loaded = prefetching && prefetching.href === target.href ?
		prefetching.promise :
		hydrate_target(target);

	prefetching = null;

	const token = current_token = {};
	const { redirect, props, branch } = await loaded;
	if (token !== current_token) return; // a secondary navigation happened while we were loading

	await render(redirect, branch, props, target.page);
	if (document.activeElement) document.activeElement.blur();

	if (!noscroll) {
		let scroll = scroll_history[id];

		if (hash) {
			// scroll is an element id (from a hash), we need to compute y.
			const deep_linked = document.getElementById(hash.slice(1));

			if (deep_linked) {
				scroll = {
					x: 0,
					y: deep_linked.getBoundingClientRect().top
				};
			}
		}

		scroll_history[cid] = scroll;
		if (scroll) scrollTo(scroll.x, scroll.y);
	}
}

async function render(redirect, branch, props, page) {
	if (redirect) return goto(redirect.location, { replaceState: true });

	stores.page.set(page);
	stores.preloading.set(false);

	if (root_component) {
		root_component.$set(props);
	} else {
		props.stores = {
			page: { subscribe: stores.page.subscribe },
			preloading: { subscribe: stores.preloading.subscribe },
			session: stores.session
		};
		props.level0 = {
			props: await root_preloaded
		};

		// first load — remove SSR'd <head> contents
		const start = document.querySelector('#sapper-head-start');
		const end = document.querySelector('#sapper-head-end');

		if (start && end) {
			while (start.nextSibling !== end) detach(start.nextSibling);
			detach(start);
			detach(end);
		}

		root_component = new App({
			target,
			props,
			hydrate: true
		});
	}

	current_branch = branch;
	current_query = JSON.stringify(page.query);
	ready = true;
	session_dirty = false;
}

function part_changed(i, segment, match, stringified_query) {
	// TODO only check query string changes for preload functions
	// that do in fact depend on it (using static analysis or
	// runtime instrumentation)
	if (stringified_query !== current_query) return true;

	const previous = current_branch[i];

	if (!previous) return false;
	if (segment !== previous.segment) return true;
	if (previous.match) {
		if (JSON.stringify(previous.match.slice(1, i + 2)) !== JSON.stringify(match.slice(1, i + 2))) {
			return true;
		}
	}
}

async function hydrate_target(target)



 {
	const { route, page } = target;
	const segments = page.path.split('/').filter(Boolean);

	let redirect = null;

	const props = { error: null, status: 200, segments: [segments[0]] };

	const preload_context = {
		fetch: (url, opts) => fetch(url, opts),
		redirect: (statusCode, location) => {
			if (redirect && (redirect.statusCode !== statusCode || redirect.location !== location)) {
				throw new Error(`Conflicting redirects`);
			}
			redirect = { statusCode, location };
		},
		error: (status, error) => {
			props.error = typeof error === 'string' ? new Error(error) : error;
			props.status = status;
		}
	};

	if (!root_preloaded) {
		root_preloaded = initial_data.preloaded[0] || preload.call(preload_context, {
			host: page.host,
			path: page.path,
			query: page.query,
			params: {}
		}, $session);
	}

	let branch;
	let l = 1;

	try {
		const stringified_query = JSON.stringify(page.query);
		const match = route.pattern.exec(page.path);

		let segment_dirty = false;

		branch = await Promise.all(route.parts.map(async (part, i) => {
			const segment = segments[i];

			if (part_changed(i, segment, match, stringified_query)) segment_dirty = true;

			props.segments[l] = segments[i + 1]; // TODO make this less confusing
			if (!part) return { segment };

			const j = l++;

			if (!session_dirty && !segment_dirty && current_branch[i] && current_branch[i].part === part.i) {
				return current_branch[i];
			}

			segment_dirty = false;

			const { default: component, preload } = await load_component(components[part.i]);

			let preloaded;
			if (ready || !initial_data.preloaded[i + 1]) {
				preloaded = preload
					? await preload.call(preload_context, {
						host: page.host,
						path: page.path,
						query: page.query,
						params: part.params ? part.params(target.match) : {}
					}, $session)
					: {};
			} else {
				preloaded = initial_data.preloaded[i + 1];
			}

			return (props[`level${j}`] = { component, props: preloaded, segment, match, part: part.i });
		}));
	} catch (error) {
		props.error = error;
		props.status = 500;
		branch = [];
	}

	return { redirect, props, branch };
}

function load_css(chunk) {
	const href = `client/${chunk}`;
	if (document.querySelector(`link[href="${href}"]`)) return;

	return new Promise((fulfil, reject) => {
		const link = document.createElement('link');
		link.rel = 'stylesheet';
		link.href = href;

		link.onload = () => fulfil();
		link.onerror = reject;

		document.head.appendChild(link);
	});
}

function load_component(component)


 {
	// TODO this is temporary — once placeholders are
	// always rewritten, scratch the ternary
	const promises = (typeof component.css === 'string' ? [] : component.css.map(load_css));
	promises.unshift(component.js());
	return Promise.all(promises).then(values => values[0]);
}

function detach(node) {
	node.parentNode.removeChild(node);
}

const stores$1 = () => index.getContext(CONTEXT_KEY);

exports.App = App;
exports.error = Error$1;
exports.goto = goto;
exports.root = Layout;
exports.stores$1 = stores$1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLTY5ZmUxMmNkLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbm9kZV9tb2R1bGVzL0BzYXBwZXIvaW50ZXJuYWwvc2hhcmVkLm1qcyIsIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ByZWxvYWRpbmdJbmRpY2F0b3Iuc3ZlbHRlIiwiLi4vLi4vLi4vc3JjL3JvdXRlcy9fbGF5b3V0LnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9yb3V0ZXMvX2Vycm9yLnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9ub2RlX21vZHVsZXMvQHNhcHBlci9pbnRlcm5hbC9BcHAuc3ZlbHRlIiwiLi4vLi4vLi4vc3JjL25vZGVfbW9kdWxlcy9Ac2FwcGVyL2ludGVybmFsL21hbmlmZXN0LWNsaWVudC5tanMiLCIuLi8uLi8uLi9zcmMvbm9kZV9tb2R1bGVzL0BzYXBwZXIvYXBwLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB3cml0YWJsZSB9IGZyb20gJ3N2ZWx0ZS9zdG9yZSc7XHJcblxyXG5leHBvcnQgY29uc3QgQ09OVEVYVF9LRVkgPSB7fTtcclxuXHJcbmV4cG9ydCBjb25zdCBwcmVsb2FkID0gKCkgPT4gKHt9KTsiLCI8c2NyaXB0PlxyXG5cdGltcG9ydCB7IG9uTW91bnQgfSBmcm9tICdzdmVsdGUnO1xyXG5cclxuXHRsZXQgcCA9IDA7XHJcblx0bGV0IHZpc2libGUgPSBmYWxzZTtcclxuXHJcblx0b25Nb3VudCgoKSA9PiB7XHJcblx0XHRmdW5jdGlvbiBuZXh0KCkge1xyXG5cdFx0XHR2aXNpYmxlID0gdHJ1ZTtcclxuXHRcdFx0cCArPSAwLjE7XHJcblxyXG5cdFx0XHRjb25zdCByZW1haW5pbmcgPSAxIC0gcDtcclxuXHRcdFx0aWYgKHJlbWFpbmluZyA+IDAuMTUpIHNldFRpbWVvdXQobmV4dCwgNTAwIC8gcmVtYWluaW5nKTtcclxuXHRcdH1cclxuXHJcblx0XHRzZXRUaW1lb3V0KG5leHQsIDI1MCk7XHJcblx0fSk7XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlPlxyXG5cdC5wcm9ncmVzcy1jb250YWluZXIge1xyXG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xyXG5cdFx0dG9wOiAwO1xyXG5cdFx0bGVmdDogMDtcclxuXHRcdHdpZHRoOiAxMDAlO1xyXG5cdFx0aGVpZ2h0OiA0cHg7XHJcblx0XHR6LWluZGV4OiA5OTk7XHJcblx0fVxyXG5cclxuXHQucHJvZ3Jlc3Mge1xyXG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xyXG5cdFx0bGVmdDogMDtcclxuXHRcdHRvcDogMDtcclxuXHRcdGhlaWdodDogMTAwJTtcclxuXHRcdGJhY2tncm91bmQtY29sb3I6IHZhcigtLXByaW1lKTtcclxuXHRcdHRyYW5zaXRpb246IHdpZHRoIDAuNHM7XHJcblx0fVxyXG5cclxuXHQuZmFkZSB7XHJcblx0XHRwb3NpdGlvbjogZml4ZWQ7XHJcblx0XHR3aWR0aDogMTAwJTtcclxuXHRcdGhlaWdodDogMTAwJTtcclxuXHRcdGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMC4zKTtcclxuXHRcdHBvaW50ZXItZXZlbnRzOiBub25lO1xyXG5cdFx0ei1pbmRleDogOTk4O1xyXG5cdFx0YW5pbWF0aW9uOiBmYWRlIDAuNHM7XHJcblx0fVxyXG5cclxuXHRAa2V5ZnJhbWVzIGZhZGUge1xyXG5cdFx0ZnJvbSB7IG9wYWNpdHk6IDAgfVxyXG5cdFx0dG8geyBvcGFjaXR5OiAxIH1cclxuXHR9XHJcbjwvc3R5bGU+XHJcblxyXG57I2lmIHZpc2libGV9XHJcblx0PGRpdiBjbGFzcz1cInByb2dyZXNzLWNvbnRhaW5lclwiPlxyXG5cdFx0PGRpdiBjbGFzcz1cInByb2dyZXNzXCIgc3R5bGU9XCJ3aWR0aDoge3AgKiAxMDB9JVwiPjwvZGl2PlxyXG5cdDwvZGl2PlxyXG57L2lmfVxyXG5cclxueyNpZiBwID49IDAuNH1cclxuXHQ8ZGl2IGNsYXNzPVwiZmFkZVwiPjwvZGl2PlxyXG57L2lmfSIsIjxzY3JpcHQ+XHJcblx0aW1wb3J0IHsgc2V0Q29udGV4dCB9IGZyb20gJ3N2ZWx0ZSc7XHJcblx0aW1wb3J0IHsgc3RvcmVzIH0gZnJvbSAnQHNhcHBlci9hcHAnO1xyXG5cdGltcG9ydCB7IEljb24sIEljb25zLCBOYXYsIE5hdkl0ZW0gfSBmcm9tICdAc3ZlbHRlanMvc2l0ZS1raXQnO1xyXG5cdGltcG9ydCBQcmVsb2FkaW5nSW5kaWNhdG9yIGZyb20gJy4uL2NvbXBvbmVudHMvUHJlbG9hZGluZ0luZGljYXRvci5zdmVsdGUnO1xyXG5cclxuXHRleHBvcnQgbGV0IHNlZ21lbnQ7XHJcblxyXG5cdGNvbnN0IHsgcGFnZSwgcHJlbG9hZGluZywgc2Vzc2lvbiB9ID0gc3RvcmVzKCk7XHJcblxyXG5cdHNldENvbnRleHQoJ2FwcCcsIHtcclxuXHRcdGxvZ2luOiAoKSA9PiB7XHJcblx0XHRcdGNvbnN0IGxvZ2luX3dpbmRvdyA9IHdpbmRvdy5vcGVuKGAke3dpbmRvdy5sb2NhdGlvbi5vcmlnaW59L2F1dGgvbG9naW5gLCAnbG9naW4nLCAnd2lkdGg9NjAwLGhlaWdodD00MDAnKTtcclxuXHJcblx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZnVuY3Rpb24gaGFuZGxlcihldmVudCkge1xyXG5cdFx0XHRcdGxvZ2luX3dpbmRvdy5jbG9zZSgpO1xyXG5cdFx0XHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgaGFuZGxlcik7XHJcblx0XHRcdFx0JHNlc3Npb24udXNlciA9IGV2ZW50LmRhdGEudXNlcjtcclxuXHRcdFx0fSk7XHJcblx0XHR9LFxyXG5cclxuXHRcdGxvZ291dDogYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHRjb25zdCByID0gYXdhaXQgZmV0Y2goYC9hdXRoL2xvZ291dGAsIHtcclxuXHRcdFx0XHRjcmVkZW50aWFsczogJ2luY2x1ZGUnXHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0aWYgKHIub2spICRzZXNzaW9uLnVzZXIgPSBudWxsO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG48L3NjcmlwdD5cclxuXHJcbjxJY29ucy8+XHJcblxyXG57I2lmICRwcmVsb2FkaW5nfVxyXG5cdDxQcmVsb2FkaW5nSW5kaWNhdG9yLz5cclxuey9pZn1cclxuXHJcbnsjaWYgJHBhZ2UucGF0aCAhPT0gJy9yZXBsL2VtYmVkJ31cclxuXHQ8TmF2IHtzZWdtZW50fSB7cGFnZX0gbG9nbz1cInN2ZWx0ZS1sb2dvLWhvcml6b250YWwuc3ZnXCI+XHJcblx0XHQ8TmF2SXRlbSBzZWdtZW50PVwidHV0b3JpYWxcIj7mlZnnqIs8L05hdkl0ZW0+XHJcblx0XHQ8TmF2SXRlbSBzZWdtZW50PVwiZG9jc1wiPkFQSTwvTmF2SXRlbT5cclxuXHRcdDxOYXZJdGVtIHNlZ21lbnQ9XCJleGFtcGxlc1wiPuWunuS+izwvTmF2SXRlbT5cclxuXHRcdDxOYXZJdGVtIHNlZ21lbnQ9XCJyZXBsXCI+UkVQTDwvTmF2SXRlbT5cclxuXHRcdDxOYXZJdGVtIHNlZ21lbnQ9XCJibG9nXCI+5Y2a5a6iPC9OYXZJdGVtPlxyXG5cdFx0PE5hdkl0ZW0gc2VnbWVudD1cImZhcVwiPuW4uOingemXrumimDwvTmF2SXRlbT5cclxuXHJcblx0XHQ8TmF2SXRlbSBleHRlcm5hbD1cImh0dHBzOi8vc2FwcGVyLnN2ZWx0ZS5kZXZcIj5TYXBwZXI8L05hdkl0ZW0+XHJcblxyXG5cdFx0PE5hdkl0ZW0gZXh0ZXJuYWw9XCJjaGF0XCIgdGl0bGU9XCJEaXNjb3JkIENoYXRcIj5cclxuXHRcdFx0PEljb24gbmFtZT1cIm1lc3NhZ2Utc3F1YXJlXCIvPlxyXG5cdFx0PC9OYXZJdGVtPlxyXG5cclxuXHRcdDxOYXZJdGVtIGV4dGVybmFsPVwiaHR0cHM6Ly9naXRodWIuY29tL3N2ZWx0ZWpzL3N2ZWx0ZVwiIHRpdGxlPVwiR2l0SHViIFJlcG9cIj5cclxuXHRcdFx0PEljb24gbmFtZT1cImdpdGh1YlwiLz5cclxuXHRcdDwvTmF2SXRlbT5cclxuXHQ8L05hdj5cclxuey9pZn1cclxuXHJcbjxtYWluPlxyXG5cdDxzbG90Pjwvc2xvdD5cclxuPC9tYWluPlxyXG5cclxuPHN0eWxlPlxyXG5cdG1haW4ge1xyXG5cdFx0cG9zaXRpb246IHJlbGF0aXZlO1xyXG5cdFx0bWFyZ2luOiAwIGF1dG87XHJcblx0XHQvKiBwYWRkaW5nOiB2YXIoLS1uYXYtaCkgdmFyKC0tc2lkZS1uYXYpIDAgdmFyKC0tc2lkZS1uYXYpOyAqL1xyXG5cdFx0cGFkZGluZzogdmFyKC0tbmF2LWgpIDAgMCAwO1xyXG5cdFx0b3ZlcmZsb3cteDogaGlkZGVuO1xyXG5cdH1cclxuPC9zdHlsZT5cclxuIiwiPHNjcmlwdD5cclxuXHRjb25zdCBkZXYgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JztcclxuXHJcblx0ZXhwb3J0IGxldCBzdGF0dXM7XHJcblx0ZXhwb3J0IGxldCBlcnJvcjtcclxuXHJcblx0Ly8gd2UgZG9uJ3Qgd2FudCB0byB1c2UgPHN2ZWx0ZTp3aW5kb3cgYmluZDpvbmxpbmU+IGhlcmUsXHJcblx0Ly8gYmVjYXVzZSB3ZSBvbmx5IGNhcmUgYWJvdXQgdGhlIG9ubGluZSBzdGF0ZSB3aGVuXHJcblx0Ly8gdGhlIHBhZ2UgZmlyc3QgbG9hZHNcclxuXHRjb25zdCBvbmxpbmUgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJ1xyXG5cdFx0PyBuYXZpZ2F0b3Iub25MaW5lXHJcblx0XHQ6IHRydWU7XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlPlxyXG5cdC5jb250YWluZXIge1xyXG5cdFx0cGFkZGluZzogdmFyKC0tdG9wLW9mZnNldCkgdmFyKC0tc2lkZS1uYXYpIDZyZW0gdmFyKC0tc2lkZS1uYXYpO1xyXG5cdH1cclxuXHJcblx0aDEsIHAgeyBtYXJnaW46IDAgYXV0byB9XHJcblxyXG5cdGgxIHtcclxuXHRcdGZvbnQtc2l6ZTogMi44ZW07XHJcblx0XHRmb250LXdlaWdodDogMzAwO1xyXG5cdFx0bWFyZ2luOiAwIDAgMC41ZW0gMDtcclxuXHR9XHJcblxyXG5cdHAgeyBtYXJnaW46IDFlbSBhdXRvIH1cclxuXHJcblx0LmVycm9yIHtcclxuXHRcdGJhY2tncm91bmQtY29sb3I6ICNkYTEwNmU7XHJcblx0XHRjb2xvcjogd2hpdGU7XHJcblx0XHRwYWRkaW5nOiAxMnB4IDE2cHg7XHJcblx0XHRmb250OiA2MDAgMTZweC8xLjcgdmFyKC0tZm9udCk7XHJcblx0XHRib3JkZXItcmFkaXVzOiAycHg7XHJcblx0fVxyXG5cclxuXHQvKiBAbWVkaWEgKG1pbi13aWR0aDogNDgwcHgpIHtcclxuXHRcdGgxIHsgZm9udC1zaXplOiA0ZW0gfVxyXG5cdH0gKi9cclxuPC9zdHlsZT5cclxuXHJcbjxzdmVsdGU6aGVhZD5cclxuXHQ8dGl0bGU+e3N0YXR1c308L3RpdGxlPlxyXG48L3N2ZWx0ZTpoZWFkPlxyXG5cclxuPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxyXG5cdHsjaWYgb25saW5lfVxyXG5cdFx0PGgxPllpa2VzITwvaDE+XHJcblxyXG5cdFx0eyNpZiBlcnJvci5tZXNzYWdlfVxyXG5cdFx0XHQ8cCBjbGFzcz1cImVycm9yXCI+e3N0YXR1c306IHtlcnJvci5tZXNzYWdlfTwvcD5cclxuXHRcdHs6ZWxzZX1cclxuXHRcdFx0PHAgY2xhc3M9XCJlcnJvclwiPkVuY291bnRlcmVkIGEge3N0YXR1c30gZXJyb3I8L3A+XHJcblx0XHR7L2lmfVxyXG5cclxuXHRcdHsjaWYgZGV2ICYmIGVycm9yLnN0YWNrfVxyXG5cdFx0XHQ8cHJlPntlcnJvci5zdGFja308L3ByZT5cclxuXHRcdHs6ZWxzZX1cclxuXHRcdFx0eyNpZiBzdGF0dXMgPj0gNTAwfVxyXG5cdFx0XHRcdDxwPlBsZWFzZSB0cnkgcmVsb2FkaW5nIHRoZSBwYWdlLjwvcD5cclxuXHRcdFx0ey9pZn1cclxuXHJcblx0XHRcdDxwPklmIHRoZSBlcnJvciBwZXJzaXN0cywgcGxlYXNlIGRyb3AgYnkgPGEgaHJlZj1cImNoYXRcIj5EaXNjb3JkIGNoYXRyb29tPC9hPiBhbmQgbGV0IHVzIGtub3csIG9yIHJhaXNlIGFuIGlzc3VlIG9uIDxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vc3ZlbHRlanMvc3ZlbHRlXCI+R2l0SHViPC9hPi4gVGhhbmtzITwvcD5cclxuXHRcdHsvaWZ9XHJcblx0ezplbHNlfVxyXG5cdFx0PGgxPkl0IGxvb2tzIGxpa2UgeW91J3JlIG9mZmxpbmU8L2gxPlxyXG5cclxuXHRcdDxwPlJlbG9hZCB0aGUgcGFnZSBvbmNlIHlvdSd2ZSBmb3VuZCB0aGUgaW50ZXJuZXQuPC9wPlxyXG5cdHsvaWZ9XHJcbjwvZGl2PiIsIjwhLS0gVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBieSBTYXBwZXIg4oCUIGRvIG5vdCBlZGl0IGl0ISAtLT5cbjxzY3JpcHQ+XG5cdGltcG9ydCB7IHNldENvbnRleHQgfSBmcm9tICdzdmVsdGUnO1xuXHRpbXBvcnQgeyBDT05URVhUX0tFWSB9IGZyb20gJy4vc2hhcmVkJztcblx0aW1wb3J0IExheW91dCBmcm9tICcuLi8uLi8uLi9yb3V0ZXMvX2xheW91dC5zdmVsdGUnO1xuXHRpbXBvcnQgRXJyb3IgZnJvbSAnLi4vLi4vLi4vcm91dGVzL19lcnJvci5zdmVsdGUnO1xuXG5cdGV4cG9ydCBsZXQgc3RvcmVzO1xuXHRleHBvcnQgbGV0IGVycm9yO1xuXHRleHBvcnQgbGV0IHN0YXR1cztcblx0ZXhwb3J0IGxldCBzZWdtZW50cztcblx0ZXhwb3J0IGxldCBsZXZlbDA7XG5cdGV4cG9ydCBsZXQgbGV2ZWwxID0gbnVsbDtcblx0ZXhwb3J0IGxldCBsZXZlbDIgPSBudWxsO1xuXG5cdHNldENvbnRleHQoQ09OVEVYVF9LRVksIHN0b3Jlcyk7XG48L3NjcmlwdD5cblxuPExheW91dCBzZWdtZW50PVwie3NlZ21lbnRzWzBdfVwiIHsuLi5sZXZlbDAucHJvcHN9PlxuXHR7I2lmIGVycm9yfVxuXHRcdDxFcnJvciB7ZXJyb3J9IHtzdGF0dXN9Lz5cblx0ezplbHNlfVxuXHRcdDxzdmVsdGU6Y29tcG9uZW50IHRoaXM9XCJ7bGV2ZWwxLmNvbXBvbmVudH1cIiBzZWdtZW50PVwie3NlZ21lbnRzWzFdfVwiIHsuLi5sZXZlbDEucHJvcHN9PlxuXHRcdFx0eyNpZiBsZXZlbDJ9XG5cdFx0XHRcdDxzdmVsdGU6Y29tcG9uZW50IHRoaXM9XCJ7bGV2ZWwyLmNvbXBvbmVudH1cIiB7Li4ubGV2ZWwyLnByb3BzfS8+XG5cdFx0XHR7L2lmfVxuXHRcdDwvc3ZlbHRlOmNvbXBvbmVudD5cblx0ey9pZn1cbjwvTGF5b3V0PiIsIi8vIFRoaXMgZmlsZSBpcyBnZW5lcmF0ZWQgYnkgU2FwcGVyIOKAlCBkbyBub3QgZWRpdCBpdCFcbmV4cG9ydCB7IGRlZmF1bHQgYXMgUm9vdCB9IGZyb20gJy4uLy4uLy4uL3JvdXRlcy9fbGF5b3V0LnN2ZWx0ZSc7XG5leHBvcnQgeyBwcmVsb2FkIGFzIHJvb3RfcHJlbG9hZCB9IGZyb20gJy4vc2hhcmVkJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRXJyb3JDb21wb25lbnQgfSBmcm9tICcuLi8uLi8uLi9yb3V0ZXMvX2Vycm9yLnN2ZWx0ZSc7XG5cbmV4cG9ydCBjb25zdCBpZ25vcmUgPSBbL15cXC9leGFtcGxlcy5qc29uJC8sIC9eXFwvZXhhbXBsZXNcXC8oW15cXC9dKz8pLmpzb24kLywgL15cXC90dXRvcmlhbC5qc29uJC8sIC9eXFwvdHV0b3JpYWxcXC9yYW5kb20tbnVtYmVyXFwvPyQvLCAvXlxcL3R1dG9yaWFsXFwvKFteXFwvXSs/KS5qc29uJC8sIC9eXFwvYXBwcy5qc29uJC8sIC9eXFwvYXV0aFxcL2NhbGxiYWNrXFwvPyQvLCAvXlxcL2F1dGhcXC9sb2dvdXRcXC8/JC8sIC9eXFwvYXV0aFxcL2xvZ2luXFwvPyQvLCAvXlxcL2Jsb2cuanNvbiQvLCAvXlxcL2Jsb2dcXC9yc3MueG1sJC8sIC9eXFwvYmxvZ1xcLyhbXlxcL10rPykuanNvbiQvLCAvXlxcL2NoYXRcXC8/JC8sIC9eXFwvZG9jcy5qc29uJC8sIC9eXFwvcmVwbFxcL2NyZWF0ZS5qc29uJC8sIC9eXFwvcmVwbFxcL2xvY2FsXFwvKC4rKSQvLCAvXlxcL3JlcGxcXC8oW15cXC9dKz8pLmpzb24kLywgL15cXC9mYXFcXC8/JC9dO1xuXG5leHBvcnQgY29uc3QgY29tcG9uZW50cyA9IFtcblx0e1xuXHRcdGpzOiAoKSA9PiBpbXBvcnQoXCIuLi8uLi8uLi9yb3V0ZXMvaW5kZXguc3ZlbHRlXCIpLFxuXHRcdGNzczogXCJfX1NBUFBFUl9DU1NfUExBQ0VIT0xERVI6aW5kZXguc3ZlbHRlX19cIlxuXHR9LFxuXHR7XG5cdFx0anM6ICgpID0+IGltcG9ydChcIi4uLy4uLy4uL3JvdXRlcy9leGFtcGxlcy9pbmRleC5zdmVsdGVcIiksXG5cdFx0Y3NzOiBcIl9fU0FQUEVSX0NTU19QTEFDRUhPTERFUjpleGFtcGxlcy9pbmRleC5zdmVsdGVfX1wiXG5cdH0sXG5cdHtcblx0XHRqczogKCkgPT4gaW1wb3J0KFwiLi4vLi4vLi4vcm91dGVzL3R1dG9yaWFsL19sYXlvdXQuc3ZlbHRlXCIpLFxuXHRcdGNzczogXCJfX1NBUFBFUl9DU1NfUExBQ0VIT0xERVI6dHV0b3JpYWwvX2xheW91dC5zdmVsdGVfX1wiXG5cdH0sXG5cdHtcblx0XHRqczogKCkgPT4gaW1wb3J0KFwiLi4vLi4vLi4vcm91dGVzL3R1dG9yaWFsL2luZGV4LnN2ZWx0ZVwiKSxcblx0XHRjc3M6IFwiX19TQVBQRVJfQ1NTX1BMQUNFSE9MREVSOnR1dG9yaWFsL2luZGV4LnN2ZWx0ZV9fXCJcblx0fSxcblx0e1xuXHRcdGpzOiAoKSA9PiBpbXBvcnQoXCIuLi8uLi8uLi9yb3V0ZXMvdHV0b3JpYWwvW3NsdWddL2luZGV4LnN2ZWx0ZVwiKSxcblx0XHRjc3M6IFwiX19TQVBQRVJfQ1NTX1BMQUNFSE9MREVSOnR1dG9yaWFsL1tzbHVnXS9pbmRleC5zdmVsdGVfX1wiXG5cdH0sXG5cdHtcblx0XHRqczogKCkgPT4gaW1wb3J0KFwiLi4vLi4vLi4vcm91dGVzL2FwcHMvaW5kZXguc3ZlbHRlXCIpLFxuXHRcdGNzczogXCJfX1NBUFBFUl9DU1NfUExBQ0VIT0xERVI6YXBwcy9pbmRleC5zdmVsdGVfX1wiXG5cdH0sXG5cdHtcblx0XHRqczogKCkgPT4gaW1wb3J0KFwiLi4vLi4vLi4vcm91dGVzL2Jsb2cvaW5kZXguc3ZlbHRlXCIpLFxuXHRcdGNzczogXCJfX1NBUFBFUl9DU1NfUExBQ0VIT0xERVI6YmxvZy9pbmRleC5zdmVsdGVfX1wiXG5cdH0sXG5cdHtcblx0XHRqczogKCkgPT4gaW1wb3J0KFwiLi4vLi4vLi4vcm91dGVzL2Jsb2cvW3NsdWddLnN2ZWx0ZVwiKSxcblx0XHRjc3M6IFwiX19TQVBQRVJfQ1NTX1BMQUNFSE9MREVSOmJsb2cvW3NsdWddLnN2ZWx0ZV9fXCJcblx0fSxcblx0e1xuXHRcdGpzOiAoKSA9PiBpbXBvcnQoXCIuLi8uLi8uLi9yb3V0ZXMvZG9jcy9pbmRleC5zdmVsdGVcIiksXG5cdFx0Y3NzOiBcIl9fU0FQUEVSX0NTU19QTEFDRUhPTERFUjpkb2NzL2luZGV4LnN2ZWx0ZV9fXCJcblx0fSxcblx0e1xuXHRcdGpzOiAoKSA9PiBpbXBvcnQoXCIuLi8uLi8uLi9yb3V0ZXMvcmVwbC9pbmRleC5zdmVsdGVcIiksXG5cdFx0Y3NzOiBcIl9fU0FQUEVSX0NTU19QTEFDRUhPTERFUjpyZXBsL2luZGV4LnN2ZWx0ZV9fXCJcblx0fSxcblx0e1xuXHRcdGpzOiAoKSA9PiBpbXBvcnQoXCIuLi8uLi8uLi9yb3V0ZXMvcmVwbC9lbWJlZC5zdmVsdGVcIiksXG5cdFx0Y3NzOiBcIl9fU0FQUEVSX0NTU19QTEFDRUhPTERFUjpyZXBsL2VtYmVkLnN2ZWx0ZV9fXCJcblx0fSxcblx0e1xuXHRcdGpzOiAoKSA9PiBpbXBvcnQoXCIuLi8uLi8uLi9yb3V0ZXMvcmVwbC9baWRdL2luZGV4LnN2ZWx0ZVwiKSxcblx0XHRjc3M6IFwiX19TQVBQRVJfQ1NTX1BMQUNFSE9MREVSOnJlcGwvW2lkXS9pbmRleC5zdmVsdGVfX1wiXG5cdH1cbl07XG5cbmV4cG9ydCBjb25zdCByb3V0ZXMgPSAoZCA9PiBbXG5cdHtcblx0XHQvLyBpbmRleC5zdmVsdGVcblx0XHRwYXR0ZXJuOiAvXlxcLyQvLFxuXHRcdHBhcnRzOiBbXG5cdFx0XHR7IGk6IDAgfVxuXHRcdF1cblx0fSxcblxuXHR7XG5cdFx0Ly8gZXhhbXBsZXMvaW5kZXguc3ZlbHRlXG5cdFx0cGF0dGVybjogL15cXC9leGFtcGxlc1xcLz8kLyxcblx0XHRwYXJ0czogW1xuXHRcdFx0eyBpOiAxIH1cblx0XHRdXG5cdH0sXG5cblx0e1xuXHRcdC8vIHR1dG9yaWFsL2luZGV4LnN2ZWx0ZVxuXHRcdHBhdHRlcm46IC9eXFwvdHV0b3JpYWxcXC8/JC8sXG5cdFx0cGFydHM6IFtcblx0XHRcdHsgaTogMiB9LFxuXHRcdFx0eyBpOiAzIH1cblx0XHRdXG5cdH0sXG5cblx0e1xuXHRcdC8vIHR1dG9yaWFsL1tzbHVnXS9pbmRleC5zdmVsdGVcblx0XHRwYXR0ZXJuOiAvXlxcL3R1dG9yaWFsXFwvKFteXFwvXSs/KVxcLz8kLyxcblx0XHRwYXJ0czogW1xuXHRcdFx0eyBpOiAyIH0sXG5cdFx0XHR7IGk6IDQsIHBhcmFtczogbWF0Y2ggPT4gKHsgc2x1ZzogZChtYXRjaFsxXSkgfSkgfVxuXHRcdF1cblx0fSxcblxuXHR7XG5cdFx0Ly8gYXBwcy9pbmRleC5zdmVsdGVcblx0XHRwYXR0ZXJuOiAvXlxcL2FwcHNcXC8/JC8sXG5cdFx0cGFydHM6IFtcblx0XHRcdHsgaTogNSB9XG5cdFx0XVxuXHR9LFxuXG5cdHtcblx0XHQvLyBibG9nL2luZGV4LnN2ZWx0ZVxuXHRcdHBhdHRlcm46IC9eXFwvYmxvZ1xcLz8kLyxcblx0XHRwYXJ0czogW1xuXHRcdFx0eyBpOiA2IH1cblx0XHRdXG5cdH0sXG5cblx0e1xuXHRcdC8vIGJsb2cvW3NsdWddLnN2ZWx0ZVxuXHRcdHBhdHRlcm46IC9eXFwvYmxvZ1xcLyhbXlxcL10rPylcXC8/JC8sXG5cdFx0cGFydHM6IFtcblx0XHRcdG51bGwsXG5cdFx0XHR7IGk6IDcsIHBhcmFtczogbWF0Y2ggPT4gKHsgc2x1ZzogZChtYXRjaFsxXSkgfSkgfVxuXHRcdF1cblx0fSxcblxuXHR7XG5cdFx0Ly8gZG9jcy9pbmRleC5zdmVsdGVcblx0XHRwYXR0ZXJuOiAvXlxcL2RvY3NcXC8/JC8sXG5cdFx0cGFydHM6IFtcblx0XHRcdHsgaTogOCB9XG5cdFx0XVxuXHR9LFxuXG5cdHtcblx0XHQvLyByZXBsL2luZGV4LnN2ZWx0ZVxuXHRcdHBhdHRlcm46IC9eXFwvcmVwbFxcLz8kLyxcblx0XHRwYXJ0czogW1xuXHRcdFx0eyBpOiA5IH1cblx0XHRdXG5cdH0sXG5cblx0e1xuXHRcdC8vIHJlcGwvZW1iZWQuc3ZlbHRlXG5cdFx0cGF0dGVybjogL15cXC9yZXBsXFwvZW1iZWRcXC8/JC8sXG5cdFx0cGFydHM6IFtcblx0XHRcdG51bGwsXG5cdFx0XHR7IGk6IDEwIH1cblx0XHRdXG5cdH0sXG5cblx0e1xuXHRcdC8vIHJlcGwvW2lkXS9pbmRleC5zdmVsdGVcblx0XHRwYXR0ZXJuOiAvXlxcL3JlcGxcXC8oW15cXC9dKz8pXFwvPyQvLFxuXHRcdHBhcnRzOiBbXG5cdFx0XHRudWxsLFxuXHRcdFx0eyBpOiAxMSwgcGFyYW1zOiBtYXRjaCA9PiAoeyBpZDogZChtYXRjaFsxXSkgfSkgfVxuXHRcdF1cblx0fVxuXSkoZGVjb2RlVVJJQ29tcG9uZW50KTtcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG5cdGltcG9ydChcIkM6L1VzZXJzL1J1bm5pbmd6cy9EZXNrdG9wL2xlYXJuL3N2ZWx0ZS1tYXN0ZXIvc2l0ZS9ub2RlX21vZHVsZXMvc2FwcGVyL3NhcHBlci1kZXYtY2xpZW50LmpzXCIpLnRoZW4oY2xpZW50ID0+IHtcblx0XHRjbGllbnQuY29ubmVjdCgxMDAwMCk7XG5cdH0pO1xufSIsImltcG9ydCB7IGdldENvbnRleHQgfSBmcm9tICdzdmVsdGUnO1xyXG5pbXBvcnQgeyBDT05URVhUX0tFWSB9IGZyb20gJy4vaW50ZXJuYWwvc2hhcmVkJztcclxuaW1wb3J0IHsgd3JpdGFibGUgfSBmcm9tICdzdmVsdGUvc3RvcmUnO1xyXG5pbXBvcnQgQXBwIGZyb20gJy4vaW50ZXJuYWwvQXBwLnN2ZWx0ZSc7XHJcbmltcG9ydCB7IGlnbm9yZSwgcm91dGVzLCByb290X3ByZWxvYWQsIGNvbXBvbmVudHMsIEVycm9yQ29tcG9uZW50IH0gZnJvbSAnLi9pbnRlcm5hbC9tYW5pZmVzdC1jbGllbnQnO1xyXG5cclxuZnVuY3Rpb24gZ290byhocmVmLCBvcHRzID0geyByZXBsYWNlU3RhdGU6IGZhbHNlIH0pIHtcclxuXHRjb25zdCB0YXJnZXQgPSBzZWxlY3RfdGFyZ2V0KG5ldyBVUkwoaHJlZiwgZG9jdW1lbnQuYmFzZVVSSSkpO1xyXG5cclxuXHRpZiAodGFyZ2V0KSB7XHJcblx0XHRfaGlzdG9yeVtvcHRzLnJlcGxhY2VTdGF0ZSA/ICdyZXBsYWNlU3RhdGUnIDogJ3B1c2hTdGF0ZSddKHsgaWQ6IGNpZCB9LCAnJywgaHJlZik7XHJcblx0XHRyZXR1cm4gbmF2aWdhdGUodGFyZ2V0LCBudWxsKS50aGVuKCgpID0+IHt9KTtcclxuXHR9XHJcblxyXG5cdGxvY2F0aW9uLmhyZWYgPSBocmVmO1xyXG5cdHJldHVybiBuZXcgUHJvbWlzZShmID0+IHt9KTsgLy8gbmV2ZXIgcmVzb2x2ZXNcclxufVxyXG5cclxuY29uc3QgaW5pdGlhbF9kYXRhID0gdHlwZW9mIF9fU0FQUEVSX18gIT09ICd1bmRlZmluZWQnICYmIF9fU0FQUEVSX187XHJcblxyXG5sZXQgcmVhZHkgPSBmYWxzZTtcclxubGV0IHJvb3RfY29tcG9uZW50O1xyXG5sZXQgY3VycmVudF90b2tlbjtcclxubGV0IHJvb3RfcHJlbG9hZGVkO1xyXG5sZXQgY3VycmVudF9icmFuY2ggPSBbXTtcclxubGV0IGN1cnJlbnRfcXVlcnkgPSAne30nO1xyXG5cclxuY29uc3Qgc3RvcmVzID0ge1xyXG5cdHBhZ2U6IHdyaXRhYmxlKHt9KSxcclxuXHRwcmVsb2FkaW5nOiB3cml0YWJsZShudWxsKSxcclxuXHRzZXNzaW9uOiB3cml0YWJsZShpbml0aWFsX2RhdGEgJiYgaW5pdGlhbF9kYXRhLnNlc3Npb24pXHJcbn07XHJcblxyXG5sZXQgJHNlc3Npb247XHJcbmxldCBzZXNzaW9uX2RpcnR5O1xyXG5cclxuc3RvcmVzLnNlc3Npb24uc3Vic2NyaWJlKGFzeW5jIHZhbHVlID0+IHtcclxuXHQkc2Vzc2lvbiA9IHZhbHVlO1xyXG5cclxuXHRpZiAoIXJlYWR5KSByZXR1cm47XHJcblx0c2Vzc2lvbl9kaXJ0eSA9IHRydWU7XHJcblxyXG5cdGNvbnN0IHRhcmdldCA9IHNlbGVjdF90YXJnZXQobmV3IFVSTChsb2NhdGlvbi5ocmVmKSk7XHJcblxyXG5cdGNvbnN0IHRva2VuID0gY3VycmVudF90b2tlbiA9IHt9O1xyXG5cdGNvbnN0IHsgcmVkaXJlY3QsIHByb3BzLCBicmFuY2ggfSA9IGF3YWl0IGh5ZHJhdGVfdGFyZ2V0KHRhcmdldCk7XHJcblx0aWYgKHRva2VuICE9PSBjdXJyZW50X3Rva2VuKSByZXR1cm47IC8vIGEgc2Vjb25kYXJ5IG5hdmlnYXRpb24gaGFwcGVuZWQgd2hpbGUgd2Ugd2VyZSBsb2FkaW5nXHJcblxyXG5cdGF3YWl0IHJlbmRlcihyZWRpcmVjdCwgYnJhbmNoLCBwcm9wcywgdGFyZ2V0LnBhZ2UpO1xyXG59KTtcclxuXHJcbmxldCBwcmVmZXRjaGluZ1xyXG5cclxuXHJcbiA9IG51bGw7XHJcbmZ1bmN0aW9uIHNldF9wcmVmZXRjaGluZyhocmVmLCBwcm9taXNlKSB7XHJcblx0cHJlZmV0Y2hpbmcgPSB7IGhyZWYsIHByb21pc2UgfTtcclxufVxyXG5cclxubGV0IHRhcmdldDtcclxuZnVuY3Rpb24gc2V0X3RhcmdldChlbGVtZW50KSB7XHJcblx0dGFyZ2V0ID0gZWxlbWVudDtcclxufVxyXG5cclxubGV0IHVpZCA9IDE7XHJcbmZ1bmN0aW9uIHNldF91aWQobikge1xyXG5cdHVpZCA9IG47XHJcbn1cclxuXHJcbmxldCBjaWQ7XHJcbmZ1bmN0aW9uIHNldF9jaWQobikge1xyXG5cdGNpZCA9IG47XHJcbn1cclxuXHJcbmNvbnN0IF9oaXN0b3J5ID0gdHlwZW9mIGhpc3RvcnkgIT09ICd1bmRlZmluZWQnID8gaGlzdG9yeSA6IHtcclxuXHRwdXNoU3RhdGU6IChzdGF0ZSwgdGl0bGUsIGhyZWYpID0+IHt9LFxyXG5cdHJlcGxhY2VTdGF0ZTogKHN0YXRlLCB0aXRsZSwgaHJlZikgPT4ge30sXHJcblx0c2Nyb2xsUmVzdG9yYXRpb246ICcnXHJcbn07XHJcblxyXG5jb25zdCBzY3JvbGxfaGlzdG9yeSA9IHt9O1xyXG5cclxuZnVuY3Rpb24gZXh0cmFjdF9xdWVyeShzZWFyY2gpIHtcclxuXHRjb25zdCBxdWVyeSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcblx0aWYgKHNlYXJjaC5sZW5ndGggPiAwKSB7XHJcblx0XHRzZWFyY2guc2xpY2UoMSkuc3BsaXQoJyYnKS5mb3JFYWNoKHNlYXJjaFBhcmFtID0+IHtcclxuXHRcdFx0bGV0IFssIGtleSwgdmFsdWUgPSAnJ10gPSAvKFtePV0qKSg/Oj0oLiopKT8vLmV4ZWMoZGVjb2RlVVJJQ29tcG9uZW50KHNlYXJjaFBhcmFtLnJlcGxhY2UoL1xcKy9nLCAnICcpKSk7XHJcblx0XHRcdGlmICh0eXBlb2YgcXVlcnlba2V5XSA9PT0gJ3N0cmluZycpIHF1ZXJ5W2tleV0gPSBbcXVlcnlba2V5XV07XHJcblx0XHRcdGlmICh0eXBlb2YgcXVlcnlba2V5XSA9PT0gJ29iamVjdCcpIChxdWVyeVtrZXldICkucHVzaCh2YWx1ZSk7XHJcblx0XHRcdGVsc2UgcXVlcnlba2V5XSA9IHZhbHVlO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cdHJldHVybiBxdWVyeTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2VsZWN0X3RhcmdldCh1cmwpIHtcclxuXHRpZiAodXJsLm9yaWdpbiAhPT0gbG9jYXRpb24ub3JpZ2luKSByZXR1cm4gbnVsbDtcclxuXHRpZiAoIXVybC5wYXRobmFtZS5zdGFydHNXaXRoKGluaXRpYWxfZGF0YS5iYXNlVXJsKSkgcmV0dXJuIG51bGw7XHJcblxyXG5cdGxldCBwYXRoID0gdXJsLnBhdGhuYW1lLnNsaWNlKGluaXRpYWxfZGF0YS5iYXNlVXJsLmxlbmd0aCk7XHJcblxyXG5cdGlmIChwYXRoID09PSAnJykge1xyXG5cdFx0cGF0aCA9ICcvJztcclxuXHR9XHJcblxyXG5cdC8vIGF2b2lkIGFjY2lkZW50YWwgY2xhc2hlcyBiZXR3ZWVuIHNlcnZlciByb3V0ZXMgYW5kIHBhZ2Ugcm91dGVzXHJcblx0aWYgKGlnbm9yZS5zb21lKHBhdHRlcm4gPT4gcGF0dGVybi50ZXN0KHBhdGgpKSkgcmV0dXJuO1xyXG5cclxuXHRmb3IgKGxldCBpID0gMDsgaSA8IHJvdXRlcy5sZW5ndGg7IGkgKz0gMSkge1xyXG5cdFx0Y29uc3Qgcm91dGUgPSByb3V0ZXNbaV07XHJcblxyXG5cdFx0Y29uc3QgbWF0Y2ggPSByb3V0ZS5wYXR0ZXJuLmV4ZWMocGF0aCk7XHJcblxyXG5cdFx0aWYgKG1hdGNoKSB7XHJcblx0XHRcdGNvbnN0IHF1ZXJ5ID0gZXh0cmFjdF9xdWVyeSh1cmwuc2VhcmNoKTtcclxuXHRcdFx0Y29uc3QgcGFydCA9IHJvdXRlLnBhcnRzW3JvdXRlLnBhcnRzLmxlbmd0aCAtIDFdO1xyXG5cdFx0XHRjb25zdCBwYXJhbXMgPSBwYXJ0LnBhcmFtcyA/IHBhcnQucGFyYW1zKG1hdGNoKSA6IHt9O1xyXG5cclxuXHRcdFx0Y29uc3QgcGFnZSA9IHsgaG9zdDogbG9jYXRpb24uaG9zdCwgcGF0aCwgcXVlcnksIHBhcmFtcyB9O1xyXG5cclxuXHRcdFx0cmV0dXJuIHsgaHJlZjogdXJsLmhyZWYsIHJvdXRlLCBtYXRjaCwgcGFnZSB9O1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlX2Vycm9yKHVybCkge1xyXG5cdGNvbnN0IHsgaG9zdCwgcGF0aG5hbWUsIHNlYXJjaCB9ID0gbG9jYXRpb247XHJcblx0Y29uc3QgeyBzZXNzaW9uLCBwcmVsb2FkZWQsIHN0YXR1cywgZXJyb3IgfSA9IGluaXRpYWxfZGF0YTtcclxuXHJcblx0aWYgKCFyb290X3ByZWxvYWRlZCkge1xyXG5cdFx0cm9vdF9wcmVsb2FkZWQgPSBwcmVsb2FkZWQgJiYgcHJlbG9hZGVkWzBdO1xyXG5cdH1cclxuXHJcblx0Y29uc3QgcHJvcHMgPSB7XHJcblx0XHRlcnJvcixcclxuXHRcdHN0YXR1cyxcclxuXHRcdHNlc3Npb24sXHJcblx0XHRsZXZlbDA6IHtcclxuXHRcdFx0cHJvcHM6IHJvb3RfcHJlbG9hZGVkXHJcblx0XHR9LFxyXG5cdFx0bGV2ZWwxOiB7XHJcblx0XHRcdHByb3BzOiB7XHJcblx0XHRcdFx0c3RhdHVzLFxyXG5cdFx0XHRcdGVycm9yXHJcblx0XHRcdH0sXHJcblx0XHRcdGNvbXBvbmVudDogRXJyb3JDb21wb25lbnRcclxuXHRcdH0sXHJcblx0XHRzZWdtZW50czogcHJlbG9hZGVkXHJcblxyXG5cdH07XHJcblx0Y29uc3QgcXVlcnkgPSBleHRyYWN0X3F1ZXJ5KHNlYXJjaCk7XHJcblx0cmVuZGVyKG51bGwsIFtdLCBwcm9wcywgeyBob3N0LCBwYXRoOiBwYXRobmFtZSwgcXVlcnksIHBhcmFtczoge30gfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNjcm9sbF9zdGF0ZSgpIHtcclxuXHRyZXR1cm4ge1xyXG5cdFx0eDogcGFnZVhPZmZzZXQsXHJcblx0XHR5OiBwYWdlWU9mZnNldFxyXG5cdH07XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIG5hdmlnYXRlKHRhcmdldCwgaWQsIG5vc2Nyb2xsLCBoYXNoKSB7XHJcblx0aWYgKGlkKSB7XHJcblx0XHQvLyBwb3BzdGF0ZSBvciBpbml0aWFsIG5hdmlnYXRpb25cclxuXHRcdGNpZCA9IGlkO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRjb25zdCBjdXJyZW50X3Njcm9sbCA9IHNjcm9sbF9zdGF0ZSgpO1xyXG5cclxuXHRcdC8vIGNsaWNrZWQgb24gYSBsaW5rLiBwcmVzZXJ2ZSBzY3JvbGwgc3RhdGVcclxuXHRcdHNjcm9sbF9oaXN0b3J5W2NpZF0gPSBjdXJyZW50X3Njcm9sbDtcclxuXHJcblx0XHRpZCA9IGNpZCA9ICsrdWlkO1xyXG5cdFx0c2Nyb2xsX2hpc3RvcnlbY2lkXSA9IG5vc2Nyb2xsID8gY3VycmVudF9zY3JvbGwgOiB7IHg6IDAsIHk6IDAgfTtcclxuXHR9XHJcblxyXG5cdGNpZCA9IGlkO1xyXG5cclxuXHRpZiAocm9vdF9jb21wb25lbnQpIHN0b3Jlcy5wcmVsb2FkaW5nLnNldCh0cnVlKTtcclxuXHJcblx0Y29uc3QgbG9hZGVkID0gcHJlZmV0Y2hpbmcgJiYgcHJlZmV0Y2hpbmcuaHJlZiA9PT0gdGFyZ2V0LmhyZWYgP1xyXG5cdFx0cHJlZmV0Y2hpbmcucHJvbWlzZSA6XHJcblx0XHRoeWRyYXRlX3RhcmdldCh0YXJnZXQpO1xyXG5cclxuXHRwcmVmZXRjaGluZyA9IG51bGw7XHJcblxyXG5cdGNvbnN0IHRva2VuID0gY3VycmVudF90b2tlbiA9IHt9O1xyXG5cdGNvbnN0IHsgcmVkaXJlY3QsIHByb3BzLCBicmFuY2ggfSA9IGF3YWl0IGxvYWRlZDtcclxuXHRpZiAodG9rZW4gIT09IGN1cnJlbnRfdG9rZW4pIHJldHVybjsgLy8gYSBzZWNvbmRhcnkgbmF2aWdhdGlvbiBoYXBwZW5lZCB3aGlsZSB3ZSB3ZXJlIGxvYWRpbmdcclxuXHJcblx0YXdhaXQgcmVuZGVyKHJlZGlyZWN0LCBicmFuY2gsIHByb3BzLCB0YXJnZXQucGFnZSk7XHJcblx0aWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpO1xyXG5cclxuXHRpZiAoIW5vc2Nyb2xsKSB7XHJcblx0XHRsZXQgc2Nyb2xsID0gc2Nyb2xsX2hpc3RvcnlbaWRdO1xyXG5cclxuXHRcdGlmIChoYXNoKSB7XHJcblx0XHRcdC8vIHNjcm9sbCBpcyBhbiBlbGVtZW50IGlkIChmcm9tIGEgaGFzaCksIHdlIG5lZWQgdG8gY29tcHV0ZSB5LlxyXG5cdFx0XHRjb25zdCBkZWVwX2xpbmtlZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGhhc2guc2xpY2UoMSkpO1xyXG5cclxuXHRcdFx0aWYgKGRlZXBfbGlua2VkKSB7XHJcblx0XHRcdFx0c2Nyb2xsID0ge1xyXG5cdFx0XHRcdFx0eDogMCxcclxuXHRcdFx0XHRcdHk6IGRlZXBfbGlua2VkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcFxyXG5cdFx0XHRcdH07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRzY3JvbGxfaGlzdG9yeVtjaWRdID0gc2Nyb2xsO1xyXG5cdFx0aWYgKHNjcm9sbCkgc2Nyb2xsVG8oc2Nyb2xsLngsIHNjcm9sbC55KTtcclxuXHR9XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHJlbmRlcihyZWRpcmVjdCwgYnJhbmNoLCBwcm9wcywgcGFnZSkge1xyXG5cdGlmIChyZWRpcmVjdCkgcmV0dXJuIGdvdG8ocmVkaXJlY3QubG9jYXRpb24sIHsgcmVwbGFjZVN0YXRlOiB0cnVlIH0pO1xyXG5cclxuXHRzdG9yZXMucGFnZS5zZXQocGFnZSk7XHJcblx0c3RvcmVzLnByZWxvYWRpbmcuc2V0KGZhbHNlKTtcclxuXHJcblx0aWYgKHJvb3RfY29tcG9uZW50KSB7XHJcblx0XHRyb290X2NvbXBvbmVudC4kc2V0KHByb3BzKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0cHJvcHMuc3RvcmVzID0ge1xyXG5cdFx0XHRwYWdlOiB7IHN1YnNjcmliZTogc3RvcmVzLnBhZ2Uuc3Vic2NyaWJlIH0sXHJcblx0XHRcdHByZWxvYWRpbmc6IHsgc3Vic2NyaWJlOiBzdG9yZXMucHJlbG9hZGluZy5zdWJzY3JpYmUgfSxcclxuXHRcdFx0c2Vzc2lvbjogc3RvcmVzLnNlc3Npb25cclxuXHRcdH07XHJcblx0XHRwcm9wcy5sZXZlbDAgPSB7XHJcblx0XHRcdHByb3BzOiBhd2FpdCByb290X3ByZWxvYWRlZFxyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBmaXJzdCBsb2FkIOKAlCByZW1vdmUgU1NSJ2QgPGhlYWQ+IGNvbnRlbnRzXHJcblx0XHRjb25zdCBzdGFydCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzYXBwZXItaGVhZC1zdGFydCcpO1xyXG5cdFx0Y29uc3QgZW5kID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NhcHBlci1oZWFkLWVuZCcpO1xyXG5cclxuXHRcdGlmIChzdGFydCAmJiBlbmQpIHtcclxuXHRcdFx0d2hpbGUgKHN0YXJ0Lm5leHRTaWJsaW5nICE9PSBlbmQpIGRldGFjaChzdGFydC5uZXh0U2libGluZyk7XHJcblx0XHRcdGRldGFjaChzdGFydCk7XHJcblx0XHRcdGRldGFjaChlbmQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJvb3RfY29tcG9uZW50ID0gbmV3IEFwcCh7XHJcblx0XHRcdHRhcmdldCxcclxuXHRcdFx0cHJvcHMsXHJcblx0XHRcdGh5ZHJhdGU6IHRydWVcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0Y3VycmVudF9icmFuY2ggPSBicmFuY2g7XHJcblx0Y3VycmVudF9xdWVyeSA9IEpTT04uc3RyaW5naWZ5KHBhZ2UucXVlcnkpO1xyXG5cdHJlYWR5ID0gdHJ1ZTtcclxuXHRzZXNzaW9uX2RpcnR5ID0gZmFsc2U7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhcnRfY2hhbmdlZChpLCBzZWdtZW50LCBtYXRjaCwgc3RyaW5naWZpZWRfcXVlcnkpIHtcclxuXHQvLyBUT0RPIG9ubHkgY2hlY2sgcXVlcnkgc3RyaW5nIGNoYW5nZXMgZm9yIHByZWxvYWQgZnVuY3Rpb25zXHJcblx0Ly8gdGhhdCBkbyBpbiBmYWN0IGRlcGVuZCBvbiBpdCAodXNpbmcgc3RhdGljIGFuYWx5c2lzIG9yXHJcblx0Ly8gcnVudGltZSBpbnN0cnVtZW50YXRpb24pXHJcblx0aWYgKHN0cmluZ2lmaWVkX3F1ZXJ5ICE9PSBjdXJyZW50X3F1ZXJ5KSByZXR1cm4gdHJ1ZTtcclxuXHJcblx0Y29uc3QgcHJldmlvdXMgPSBjdXJyZW50X2JyYW5jaFtpXTtcclxuXHJcblx0aWYgKCFwcmV2aW91cykgcmV0dXJuIGZhbHNlO1xyXG5cdGlmIChzZWdtZW50ICE9PSBwcmV2aW91cy5zZWdtZW50KSByZXR1cm4gdHJ1ZTtcclxuXHRpZiAocHJldmlvdXMubWF0Y2gpIHtcclxuXHRcdGlmIChKU09OLnN0cmluZ2lmeShwcmV2aW91cy5tYXRjaC5zbGljZSgxLCBpICsgMikpICE9PSBKU09OLnN0cmluZ2lmeShtYXRjaC5zbGljZSgxLCBpICsgMikpKSB7XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gaHlkcmF0ZV90YXJnZXQodGFyZ2V0KVxyXG5cclxuXHJcblxyXG4ge1xyXG5cdGNvbnN0IHsgcm91dGUsIHBhZ2UgfSA9IHRhcmdldDtcclxuXHRjb25zdCBzZWdtZW50cyA9IHBhZ2UucGF0aC5zcGxpdCgnLycpLmZpbHRlcihCb29sZWFuKTtcclxuXHJcblx0bGV0IHJlZGlyZWN0ID0gbnVsbDtcclxuXHJcblx0Y29uc3QgcHJvcHMgPSB7IGVycm9yOiBudWxsLCBzdGF0dXM6IDIwMCwgc2VnbWVudHM6IFtzZWdtZW50c1swXV0gfTtcclxuXHJcblx0Y29uc3QgcHJlbG9hZF9jb250ZXh0ID0ge1xyXG5cdFx0ZmV0Y2g6ICh1cmwsIG9wdHMpID0+IGZldGNoKHVybCwgb3B0cyksXHJcblx0XHRyZWRpcmVjdDogKHN0YXR1c0NvZGUsIGxvY2F0aW9uKSA9PiB7XHJcblx0XHRcdGlmIChyZWRpcmVjdCAmJiAocmVkaXJlY3Quc3RhdHVzQ29kZSAhPT0gc3RhdHVzQ29kZSB8fCByZWRpcmVjdC5sb2NhdGlvbiAhPT0gbG9jYXRpb24pKSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBDb25mbGljdGluZyByZWRpcmVjdHNgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZWRpcmVjdCA9IHsgc3RhdHVzQ29kZSwgbG9jYXRpb24gfTtcclxuXHRcdH0sXHJcblx0XHRlcnJvcjogKHN0YXR1cywgZXJyb3IpID0+IHtcclxuXHRcdFx0cHJvcHMuZXJyb3IgPSB0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnID8gbmV3IEVycm9yKGVycm9yKSA6IGVycm9yO1xyXG5cdFx0XHRwcm9wcy5zdGF0dXMgPSBzdGF0dXM7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0aWYgKCFyb290X3ByZWxvYWRlZCkge1xyXG5cdFx0cm9vdF9wcmVsb2FkZWQgPSBpbml0aWFsX2RhdGEucHJlbG9hZGVkWzBdIHx8IHJvb3RfcHJlbG9hZC5jYWxsKHByZWxvYWRfY29udGV4dCwge1xyXG5cdFx0XHRob3N0OiBwYWdlLmhvc3QsXHJcblx0XHRcdHBhdGg6IHBhZ2UucGF0aCxcclxuXHRcdFx0cXVlcnk6IHBhZ2UucXVlcnksXHJcblx0XHRcdHBhcmFtczoge31cclxuXHRcdH0sICRzZXNzaW9uKTtcclxuXHR9XHJcblxyXG5cdGxldCBicmFuY2g7XHJcblx0bGV0IGwgPSAxO1xyXG5cclxuXHR0cnkge1xyXG5cdFx0Y29uc3Qgc3RyaW5naWZpZWRfcXVlcnkgPSBKU09OLnN0cmluZ2lmeShwYWdlLnF1ZXJ5KTtcclxuXHRcdGNvbnN0IG1hdGNoID0gcm91dGUucGF0dGVybi5leGVjKHBhZ2UucGF0aCk7XHJcblxyXG5cdFx0bGV0IHNlZ21lbnRfZGlydHkgPSBmYWxzZTtcclxuXHJcblx0XHRicmFuY2ggPSBhd2FpdCBQcm9taXNlLmFsbChyb3V0ZS5wYXJ0cy5tYXAoYXN5bmMgKHBhcnQsIGkpID0+IHtcclxuXHRcdFx0Y29uc3Qgc2VnbWVudCA9IHNlZ21lbnRzW2ldO1xyXG5cclxuXHRcdFx0aWYgKHBhcnRfY2hhbmdlZChpLCBzZWdtZW50LCBtYXRjaCwgc3RyaW5naWZpZWRfcXVlcnkpKSBzZWdtZW50X2RpcnR5ID0gdHJ1ZTtcclxuXHJcblx0XHRcdHByb3BzLnNlZ21lbnRzW2xdID0gc2VnbWVudHNbaSArIDFdOyAvLyBUT0RPIG1ha2UgdGhpcyBsZXNzIGNvbmZ1c2luZ1xyXG5cdFx0XHRpZiAoIXBhcnQpIHJldHVybiB7IHNlZ21lbnQgfTtcclxuXHJcblx0XHRcdGNvbnN0IGogPSBsKys7XHJcblxyXG5cdFx0XHRpZiAoIXNlc3Npb25fZGlydHkgJiYgIXNlZ21lbnRfZGlydHkgJiYgY3VycmVudF9icmFuY2hbaV0gJiYgY3VycmVudF9icmFuY2hbaV0ucGFydCA9PT0gcGFydC5pKSB7XHJcblx0XHRcdFx0cmV0dXJuIGN1cnJlbnRfYnJhbmNoW2ldO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRzZWdtZW50X2RpcnR5ID0gZmFsc2U7XHJcblxyXG5cdFx0XHRjb25zdCB7IGRlZmF1bHQ6IGNvbXBvbmVudCwgcHJlbG9hZCB9ID0gYXdhaXQgbG9hZF9jb21wb25lbnQoY29tcG9uZW50c1twYXJ0LmldKTtcclxuXHJcblx0XHRcdGxldCBwcmVsb2FkZWQ7XHJcblx0XHRcdGlmIChyZWFkeSB8fCAhaW5pdGlhbF9kYXRhLnByZWxvYWRlZFtpICsgMV0pIHtcclxuXHRcdFx0XHRwcmVsb2FkZWQgPSBwcmVsb2FkXHJcblx0XHRcdFx0XHQ/IGF3YWl0IHByZWxvYWQuY2FsbChwcmVsb2FkX2NvbnRleHQsIHtcclxuXHRcdFx0XHRcdFx0aG9zdDogcGFnZS5ob3N0LFxyXG5cdFx0XHRcdFx0XHRwYXRoOiBwYWdlLnBhdGgsXHJcblx0XHRcdFx0XHRcdHF1ZXJ5OiBwYWdlLnF1ZXJ5LFxyXG5cdFx0XHRcdFx0XHRwYXJhbXM6IHBhcnQucGFyYW1zID8gcGFydC5wYXJhbXModGFyZ2V0Lm1hdGNoKSA6IHt9XHJcblx0XHRcdFx0XHR9LCAkc2Vzc2lvbilcclxuXHRcdFx0XHRcdDoge307XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cHJlbG9hZGVkID0gaW5pdGlhbF9kYXRhLnByZWxvYWRlZFtpICsgMV07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiAocHJvcHNbYGxldmVsJHtqfWBdID0geyBjb21wb25lbnQsIHByb3BzOiBwcmVsb2FkZWQsIHNlZ21lbnQsIG1hdGNoLCBwYXJ0OiBwYXJ0LmkgfSk7XHJcblx0XHR9KSk7XHJcblx0fSBjYXRjaCAoZXJyb3IpIHtcclxuXHRcdHByb3BzLmVycm9yID0gZXJyb3I7XHJcblx0XHRwcm9wcy5zdGF0dXMgPSA1MDA7XHJcblx0XHRicmFuY2ggPSBbXTtcclxuXHR9XHJcblxyXG5cdHJldHVybiB7IHJlZGlyZWN0LCBwcm9wcywgYnJhbmNoIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxvYWRfY3NzKGNodW5rKSB7XHJcblx0Y29uc3QgaHJlZiA9IGBjbGllbnQvJHtjaHVua31gO1xyXG5cdGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBsaW5rW2hyZWY9XCIke2hyZWZ9XCJdYCkpIHJldHVybjtcclxuXHJcblx0cmV0dXJuIG5ldyBQcm9taXNlKChmdWxmaWwsIHJlamVjdCkgPT4ge1xyXG5cdFx0Y29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcclxuXHRcdGxpbmsucmVsID0gJ3N0eWxlc2hlZXQnO1xyXG5cdFx0bGluay5ocmVmID0gaHJlZjtcclxuXHJcblx0XHRsaW5rLm9ubG9hZCA9ICgpID0+IGZ1bGZpbCgpO1xyXG5cdFx0bGluay5vbmVycm9yID0gcmVqZWN0O1xyXG5cclxuXHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobGluayk7XHJcblx0fSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxvYWRfY29tcG9uZW50KGNvbXBvbmVudClcclxuXHJcblxyXG4ge1xyXG5cdC8vIFRPRE8gdGhpcyBpcyB0ZW1wb3Jhcnkg4oCUIG9uY2UgcGxhY2Vob2xkZXJzIGFyZVxyXG5cdC8vIGFsd2F5cyByZXdyaXR0ZW4sIHNjcmF0Y2ggdGhlIHRlcm5hcnlcclxuXHRjb25zdCBwcm9taXNlcyA9ICh0eXBlb2YgY29tcG9uZW50LmNzcyA9PT0gJ3N0cmluZycgPyBbXSA6IGNvbXBvbmVudC5jc3MubWFwKGxvYWRfY3NzKSk7XHJcblx0cHJvbWlzZXMudW5zaGlmdChjb21wb25lbnQuanMoKSk7XHJcblx0cmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKHZhbHVlcyA9PiB2YWx1ZXNbMF0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkZXRhY2gobm9kZSkge1xyXG5cdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcHJlZmV0Y2goaHJlZikge1xyXG5cdGNvbnN0IHRhcmdldCA9IHNlbGVjdF90YXJnZXQobmV3IFVSTChocmVmLCBkb2N1bWVudC5iYXNlVVJJKSk7XHJcblxyXG5cdGlmICh0YXJnZXQpIHtcclxuXHRcdGlmICghcHJlZmV0Y2hpbmcgfHwgaHJlZiAhPT0gcHJlZmV0Y2hpbmcuaHJlZikge1xyXG5cdFx0XHRzZXRfcHJlZmV0Y2hpbmcoaHJlZiwgaHlkcmF0ZV90YXJnZXQodGFyZ2V0KSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHByZWZldGNoaW5nLnByb21pc2U7XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBzdGFydChvcHRzXHJcblxyXG4pIHtcclxuXHRpZiAoJ3Njcm9sbFJlc3RvcmF0aW9uJyBpbiBfaGlzdG9yeSkge1xyXG5cdFx0X2hpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSAnbWFudWFsJztcclxuXHR9XHJcblxyXG5cdHNldF90YXJnZXQob3B0cy50YXJnZXQpO1xyXG5cclxuXHRhZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZV9jbGljayk7XHJcblx0YWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBoYW5kbGVfcG9wc3RhdGUpO1xyXG5cclxuXHQvLyBwcmVmZXRjaFxyXG5cdGFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0cmlnZ2VyX3ByZWZldGNoKTtcclxuXHRhZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBoYW5kbGVfbW91c2Vtb3ZlKTtcclxuXHJcblx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xyXG5cdFx0Y29uc3QgeyBoYXNoLCBocmVmIH0gPSBsb2NhdGlvbjtcclxuXHJcblx0XHRfaGlzdG9yeS5yZXBsYWNlU3RhdGUoeyBpZDogdWlkIH0sICcnLCBocmVmKTtcclxuXHJcblx0XHRjb25zdCB1cmwgPSBuZXcgVVJMKGxvY2F0aW9uLmhyZWYpO1xyXG5cclxuXHRcdGlmIChpbml0aWFsX2RhdGEuZXJyb3IpIHJldHVybiBoYW5kbGVfZXJyb3IoKTtcclxuXHJcblx0XHRjb25zdCB0YXJnZXQgPSBzZWxlY3RfdGFyZ2V0KHVybCk7XHJcblx0XHRpZiAodGFyZ2V0KSByZXR1cm4gbmF2aWdhdGUodGFyZ2V0LCB1aWQsIHRydWUsIGhhc2gpO1xyXG5cdH0pO1xyXG59XHJcblxyXG5sZXQgbW91c2Vtb3ZlX3RpbWVvdXQ7XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVfbW91c2Vtb3ZlKGV2ZW50KSB7XHJcblx0Y2xlYXJUaW1lb3V0KG1vdXNlbW92ZV90aW1lb3V0KTtcclxuXHRtb3VzZW1vdmVfdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0dHJpZ2dlcl9wcmVmZXRjaChldmVudCk7XHJcblx0fSwgMjApO1xyXG59XHJcblxyXG5mdW5jdGlvbiB0cmlnZ2VyX3ByZWZldGNoKGV2ZW50KSB7XHJcblx0Y29uc3QgYSA9IGZpbmRfYW5jaG9yKGV2ZW50LnRhcmdldCk7XHJcblx0aWYgKCFhIHx8IGEucmVsICE9PSAncHJlZmV0Y2gnKSByZXR1cm47XHJcblxyXG5cdHByZWZldGNoKGEuaHJlZik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZV9jbGljayhldmVudCkge1xyXG5cdC8vIEFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vdmlzaW9ubWVkaWEvcGFnZS5qc1xyXG5cdC8vIE1JVCBsaWNlbnNlIGh0dHBzOi8vZ2l0aHViLmNvbS92aXNpb25tZWRpYS9wYWdlLmpzI2xpY2Vuc2VcclxuXHRpZiAod2hpY2goZXZlbnQpICE9PSAxKSByZXR1cm47XHJcblx0aWYgKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSkgcmV0dXJuO1xyXG5cdGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSByZXR1cm47XHJcblxyXG5cdGNvbnN0IGEgPSBmaW5kX2FuY2hvcihldmVudC50YXJnZXQpO1xyXG5cdGlmICghYSkgcmV0dXJuO1xyXG5cclxuXHRpZiAoIWEuaHJlZikgcmV0dXJuO1xyXG5cclxuXHQvLyBjaGVjayBpZiBsaW5rIGlzIGluc2lkZSBhbiBzdmdcclxuXHQvLyBpbiB0aGlzIGNhc2UsIGJvdGggaHJlZiBhbmQgdGFyZ2V0IGFyZSBhbHdheXMgaW5zaWRlIGFuIG9iamVjdFxyXG5cdGNvbnN0IHN2ZyA9IHR5cGVvZiBhLmhyZWYgPT09ICdvYmplY3QnICYmIGEuaHJlZi5jb25zdHJ1Y3Rvci5uYW1lID09PSAnU1ZHQW5pbWF0ZWRTdHJpbmcnO1xyXG5cdGNvbnN0IGhyZWYgPSBTdHJpbmcoc3ZnID8gKGEpLmhyZWYuYmFzZVZhbCA6IGEuaHJlZik7XHJcblxyXG5cdGlmIChocmVmID09PSBsb2NhdGlvbi5ocmVmKSB7XHJcblx0XHRpZiAoIWxvY2F0aW9uLmhhc2gpIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cclxuXHQvLyBJZ25vcmUgaWYgdGFnIGhhc1xyXG5cdC8vIDEuICdkb3dubG9hZCcgYXR0cmlidXRlXHJcblx0Ly8gMi4gcmVsPSdleHRlcm5hbCcgYXR0cmlidXRlXHJcblx0aWYgKGEuaGFzQXR0cmlidXRlKCdkb3dubG9hZCcpIHx8IGEuZ2V0QXR0cmlidXRlKCdyZWwnKSA9PT0gJ2V4dGVybmFsJykgcmV0dXJuO1xyXG5cclxuXHQvLyBJZ25vcmUgaWYgPGE+IGhhcyBhIHRhcmdldFxyXG5cdGlmIChzdmcgPyAoYSkudGFyZ2V0LmJhc2VWYWwgOiBhLnRhcmdldCkgcmV0dXJuO1xyXG5cclxuXHRjb25zdCB1cmwgPSBuZXcgVVJMKGhyZWYpO1xyXG5cclxuXHQvLyBEb24ndCBoYW5kbGUgaGFzaCBjaGFuZ2VzXHJcblx0aWYgKHVybC5wYXRobmFtZSA9PT0gbG9jYXRpb24ucGF0aG5hbWUgJiYgdXJsLnNlYXJjaCA9PT0gbG9jYXRpb24uc2VhcmNoKSByZXR1cm47XHJcblxyXG5cdGNvbnN0IHRhcmdldCA9IHNlbGVjdF90YXJnZXQodXJsKTtcclxuXHRpZiAodGFyZ2V0KSB7XHJcblx0XHRjb25zdCBub3Njcm9sbCA9IGEuaGFzQXR0cmlidXRlKCdzYXBwZXItbm9zY3JvbGwnKTtcclxuXHRcdG5hdmlnYXRlKHRhcmdldCwgbnVsbCwgbm9zY3JvbGwsIHVybC5oYXNoKTtcclxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRfaGlzdG9yeS5wdXNoU3RhdGUoeyBpZDogY2lkIH0sICcnLCB1cmwuaHJlZik7XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiB3aGljaChldmVudCkge1xyXG5cdHJldHVybiBldmVudC53aGljaCA9PT0gbnVsbCA/IGV2ZW50LmJ1dHRvbiA6IGV2ZW50LndoaWNoO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaW5kX2FuY2hvcihub2RlKSB7XHJcblx0d2hpbGUgKG5vZGUgJiYgbm9kZS5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpICE9PSAnQScpIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7IC8vIFNWRyA8YT4gZWxlbWVudHMgaGF2ZSBhIGxvd2VyY2FzZSBuYW1lXHJcblx0cmV0dXJuIG5vZGU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZV9wb3BzdGF0ZShldmVudCkge1xyXG5cdHNjcm9sbF9oaXN0b3J5W2NpZF0gPSBzY3JvbGxfc3RhdGUoKTtcclxuXHJcblx0aWYgKGV2ZW50LnN0YXRlKSB7XHJcblx0XHRjb25zdCB1cmwgPSBuZXcgVVJMKGxvY2F0aW9uLmhyZWYpO1xyXG5cdFx0Y29uc3QgdGFyZ2V0ID0gc2VsZWN0X3RhcmdldCh1cmwpO1xyXG5cdFx0aWYgKHRhcmdldCkge1xyXG5cdFx0XHRuYXZpZ2F0ZSh0YXJnZXQsIGV2ZW50LnN0YXRlLmlkKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGxvY2F0aW9uLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xyXG5cdFx0fVxyXG5cdH0gZWxzZSB7XHJcblx0XHQvLyBoYXNoY2hhbmdlXHJcblx0XHRzZXRfdWlkKHVpZCArIDEpO1xyXG5cdFx0c2V0X2NpZCh1aWQpO1xyXG5cdFx0X2hpc3RvcnkucmVwbGFjZVN0YXRlKHsgaWQ6IGNpZCB9LCAnJywgbG9jYXRpb24uaHJlZik7XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBwcmVmZXRjaFJvdXRlcyhwYXRobmFtZXMpIHtcclxuXHRyZXR1cm4gcm91dGVzXHJcblx0XHQuZmlsdGVyKHBhdGhuYW1lc1xyXG5cdFx0XHQ/IHJvdXRlID0+IHBhdGhuYW1lcy5zb21lKHBhdGhuYW1lID0+IHJvdXRlLnBhdHRlcm4udGVzdChwYXRobmFtZSkpXHJcblx0XHRcdDogKCkgPT4gdHJ1ZVxyXG5cdFx0KVxyXG5cdFx0LnJlZHVjZSgocHJvbWlzZSwgcm91dGUpID0+IHByb21pc2UudGhlbigoKSA9PiB7XHJcblx0XHRcdHJldHVybiBQcm9taXNlLmFsbChyb3V0ZS5wYXJ0cy5tYXAocGFydCA9PiBwYXJ0ICYmIGxvYWRfY29tcG9uZW50KGNvbXBvbmVudHNbcGFydC5pXSkpKTtcclxuXHRcdH0pLCBQcm9taXNlLnJlc29sdmUoKSk7XHJcbn1cclxuXHJcbmNvbnN0IHN0b3JlcyQxID0gKCkgPT4gZ2V0Q29udGV4dChDT05URVhUX0tFWSk7XHJcblxyXG5leHBvcnQgeyBnb3RvLCBwcmVmZXRjaCwgcHJlZmV0Y2hSb3V0ZXMsIHN0YXJ0LCBzdG9yZXMkMSBhcyBzdG9yZXMgfTtcclxuIl0sIm5hbWVzIjpbIm9uTW91bnQiLCJzdG9yZXMiLCJzZXRDb250ZXh0Iiwid3JpdGFibGUiLCJyb290X3ByZWxvYWQiLCJnZXRDb250ZXh0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFTyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUM7O0FBRTlCLEFBQU8sTUFBTSxPQUFPLEdBQUcsT0FBTyxFQUFFLENBQUM7Ozs7Ozs7Ozs7Q0NEaEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ1YsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDOztDQUVwQkEsYUFBTyxDQUFDLE1BQU07RUFDYixTQUFTLElBQUksR0FBRztHQUNmLE9BQU8sR0FBRyxJQUFJLENBQUM7R0FDZixDQUFDLElBQUksR0FBRyxDQUFDOztHQUVULE1BQU0sU0FBUyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDeEIsSUFBSSxTQUFTLEdBQUcsSUFBSSxFQUFFLFVBQVUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0dBQ3hEOztFQUVELFVBQVUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDdEIsQ0FBQyxDQUFDOzs7O1lBc0NDLE9BQU87b0VBRTJCLE9BQU87OztJQUl6QyxRQUFROzs7Ozs7Ozs7Ozs7Ozs7Q0N0RFosTUFBVyxtQkFBTyxDQUFDOztDQUVuQixNQUFNLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsR0FBR0MsUUFBTSxpUUFBRSxDQUFDOztDQUUvQ0MsZ0JBQVUsQ0FBQyxLQUFLLEVBQUU7RUFDakIsS0FBSyxFQUFFLE1BQU07R0FDWixNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxPQUFPLEVBQUUsc0JBQXNCLENBQUMsQ0FBQzs7R0FFMUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxTQUFTLE9BQU8sQ0FBQyxLQUFLLEVBQUU7SUFDMUQsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3JCLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDL0MsUUFBUSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztJQUNoQyxDQUFDLENBQUM7R0FDSDs7RUFFRCxNQUFNLEVBQUUsWUFBWTtHQUNuQixNQUFNLENBQUMsR0FBRyxNQUFNLEtBQUssQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFFO0lBQ3JDLFdBQVcsRUFBRSxTQUFTO0lBQ3RCLENBQUMsQ0FBQzs7R0FFSCxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7R0FDL0I7RUFDRCxDQUFDLENBQUM7Ozs7Ozs7Ozs7OztJQUtDLFdBQVc7O0lBSVgsNEJBQTRCO1dBQzFCLE9BQU87UUFBRyxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQ25DYixNQUFJLE1BQU0sRUFDTixpQkFBSyxDQUFDOzs7OztDQUtqQixNQUFNLE1BQU0sR0FBRyxPQUFPLFNBQVMsS0FBSyxXQUFXO0lBQzVDLFNBQVMsQ0FBQyxNQUFNO0lBQ2hCLElBQUksQ0FBQzs7Ozs7OztvREFnQ0EsTUFBTTs7O0tBSVQsTUFBTTs7TUFHTCxhQUFhLGtEQUNDLE1BQU0sbUJBQUksYUFBYSx1RUFFVCxNQUFNOztNQUdsQyxZQUFrQix3QkFDaEIsV0FBVyxnQkFFWixhQUFhOzs7Ozs7Ozs7Ozs7O0NDcERiLE1BQUksTUFBTSxFQUNOLEtBQUssRUFDTCxNQUFNLEVBQ04sUUFBUSxFQUNSLE1BQU0sRUFDTixNQUFNLEdBQUcsSUFBSSxFQUNiLE1BQU0sR0FBRyxnQkFBSSxDQUFDOztDQUV6QkEsZ0JBQVUsQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7Ozs7Ozs7Ozs7Ozs7MEZBR2YsV0FBVyxJQUFPLFlBQVk7O0tBQzFDLEtBQUssNkVBQ0QsS0FBSyxVQUFHLE1BQU0sOENBRUcsZ0JBQWdCLCtGQUFhLFdBQVcsSUFBTyxZQUFZOztPQUM5RSxNQUFNLGlDQUNlLGdCQUFnQixvRkFBTyxZQUFZOzs7Ozs7O0FDeEJoRTtBQUNBLEFBR0E7QUFDQSxBQUFPLE1BQU0sTUFBTSxHQUFHLENBQUMsbUJBQW1CLEVBQUUsOEJBQThCLEVBQUUsbUJBQW1CLEVBQUUsZ0NBQWdDLEVBQUUsOEJBQThCLEVBQUUsZUFBZSxFQUFFLHVCQUF1QixFQUFFLHFCQUFxQixFQUFFLG9CQUFvQixFQUFFLGVBQWUsRUFBRSxtQkFBbUIsRUFBRSwwQkFBMEIsRUFBRSxhQUFhLEVBQUUsZUFBZSxFQUFFLHVCQUF1QixFQUFFLHVCQUF1QixFQUFFLDBCQUEwQixFQUFFLFlBQVksQ0FBQyxDQUFDOztBQUV4YixBQUFPLE1BQU0sVUFBVSxHQUFHO0NBQ3pCO0VBQ0MsRUFBRSxFQUFFLE1BQU0saURBQU8scUJBQThCLE1BQUM7RUFDaEQsR0FBRyxFQUFFLHlDQUF5QztFQUM5QztDQUNEO0VBQ0MsRUFBRSxFQUFFLE1BQU0saURBQU8scUJBQXVDLE1BQUM7RUFDekQsR0FBRyxFQUFFLGtEQUFrRDtFQUN2RDtDQUNEO0VBQ0MsRUFBRSxFQUFFLE1BQU0saURBQU8sdUJBQXlDLE1BQUM7RUFDM0QsR0FBRyxFQUFFLG9EQUFvRDtFQUN6RDtDQUNEO0VBQ0MsRUFBRSxFQUFFLE1BQU0saURBQU8scUJBQXVDLE1BQUM7RUFDekQsR0FBRyxFQUFFLGtEQUFrRDtFQUN2RDtDQUNEO0VBQ0MsRUFBRSxFQUFFLE1BQU0saURBQU8scUJBQThDLE1BQUM7RUFDaEUsR0FBRyxFQUFFLHlEQUF5RDtFQUM5RDtDQUNEO0VBQ0MsRUFBRSxFQUFFLE1BQU0saURBQU8scUJBQW1DLE1BQUM7RUFDckQsR0FBRyxFQUFFLDhDQUE4QztFQUNuRDtDQUNEO0VBQ0MsRUFBRSxFQUFFLE1BQU0saURBQU8scUJBQW1DLE1BQUM7RUFDckQsR0FBRyxFQUFFLDhDQUE4QztFQUNuRDtDQUNEO0VBQ0MsRUFBRSxFQUFFLE1BQU0saURBQU8sc0JBQW9DLE1BQUM7RUFDdEQsR0FBRyxFQUFFLCtDQUErQztFQUNwRDtDQUNEO0VBQ0MsRUFBRSxFQUFFLE1BQU0saURBQU8scUJBQW1DLE1BQUM7RUFDckQsR0FBRyxFQUFFLDhDQUE4QztFQUNuRDtDQUNEO0VBQ0MsRUFBRSxFQUFFLE1BQU0saURBQU8scUJBQW1DLE1BQUM7RUFDckQsR0FBRyxFQUFFLDhDQUE4QztFQUNuRDtDQUNEO0VBQ0MsRUFBRSxFQUFFLE1BQU0saURBQU8scUJBQW1DLE1BQUM7RUFDckQsR0FBRyxFQUFFLDhDQUE4QztFQUNuRDtDQUNEO0VBQ0MsRUFBRSxFQUFFLE1BQU0saURBQU8scUJBQXdDLE1BQUM7RUFDMUQsR0FBRyxFQUFFLG1EQUFtRDtFQUN4RDtDQUNELENBQUM7O0FBRUYsQUFBTyxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsSUFBSTtDQUMzQjs7RUFFQyxPQUFPLEVBQUUsTUFBTTtFQUNmLEtBQUssRUFBRTtHQUNOLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUNSO0VBQ0Q7O0NBRUQ7O0VBRUMsT0FBTyxFQUFFLGlCQUFpQjtFQUMxQixLQUFLLEVBQUU7R0FDTixFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDUjtFQUNEOztDQUVEOztFQUVDLE9BQU8sRUFBRSxpQkFBaUI7RUFDMUIsS0FBSyxFQUFFO0dBQ04sRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQ1IsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQ1I7RUFDRDs7Q0FFRDs7RUFFQyxPQUFPLEVBQUUsNEJBQTRCO0VBQ3JDLEtBQUssRUFBRTtHQUNOLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUNSLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDbEQ7RUFDRDs7Q0FFRDs7RUFFQyxPQUFPLEVBQUUsYUFBYTtFQUN0QixLQUFLLEVBQUU7R0FDTixFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDUjtFQUNEOztDQUVEOztFQUVDLE9BQU8sRUFBRSxhQUFhO0VBQ3RCLEtBQUssRUFBRTtHQUNOLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUNSO0VBQ0Q7O0NBRUQ7O0VBRUMsT0FBTyxFQUFFLHdCQUF3QjtFQUNqQyxLQUFLLEVBQUU7R0FDTixJQUFJO0dBQ0osRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUNsRDtFQUNEOztDQUVEOztFQUVDLE9BQU8sRUFBRSxhQUFhO0VBQ3RCLEtBQUssRUFBRTtHQUNOLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtHQUNSO0VBQ0Q7O0NBRUQ7O0VBRUMsT0FBTyxFQUFFLGFBQWE7RUFDdEIsS0FBSyxFQUFFO0dBQ04sRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0dBQ1I7RUFDRDs7Q0FFRDs7RUFFQyxPQUFPLEVBQUUsb0JBQW9CO0VBQzdCLEtBQUssRUFBRTtHQUNOLElBQUk7R0FDSixFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUU7R0FDVDtFQUNEOztDQUVEOztFQUVDLE9BQU8sRUFBRSx3QkFBd0I7RUFDakMsS0FBSyxFQUFFO0dBQ04sSUFBSTtHQUNKLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUU7R0FDakQ7RUFDRDtDQUNELEVBQUUsa0JBQWtCLENBQUMsQ0FBQzs7QUFFdkIsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLEVBQUU7Q0FDbEMsaURBQU8saUNBQThGLE1BQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJO0VBQ3JILE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7RUFDdEIsQ0FBQyxDQUFDOzs7Q0FDSCxEQ3ZKRCxTQUFTLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxHQUFHLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxFQUFFO0NBQ25ELE1BQU0sTUFBTSxHQUFHLGFBQWEsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7O0NBRTlELElBQUksTUFBTSxFQUFFO0VBQ1gsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLEdBQUcsY0FBYyxHQUFHLFdBQVcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztFQUNsRixPQUFPLFFBQVEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7RUFDN0M7O0NBRUQsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7Q0FDckIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7Q0FDNUI7O0FBRUQsTUFBTSxZQUFZLEdBQUcsT0FBTyxVQUFVLEtBQUssV0FBVyxJQUFJLFVBQVUsQ0FBQzs7QUFFckUsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ2xCLElBQUksY0FBYyxDQUFDO0FBQ25CLElBQUksYUFBYSxDQUFDO0FBQ2xCLElBQUksY0FBYyxDQUFDO0FBQ25CLElBQUksY0FBYyxHQUFHLEVBQUUsQ0FBQztBQUN4QixJQUFJLGFBQWEsR0FBRyxJQUFJLENBQUM7O0FBRXpCLE1BQU0sTUFBTSxHQUFHO0NBQ2QsSUFBSSxFQUFFQyxnQkFBUSxDQUFDLEVBQUUsQ0FBQztDQUNsQixVQUFVLEVBQUVBLGdCQUFRLENBQUMsSUFBSSxDQUFDO0NBQzFCLE9BQU8sRUFBRUEsZ0JBQVEsQ0FBQyxZQUFZLElBQUksWUFBWSxDQUFDLE9BQU8sQ0FBQztDQUN2RCxDQUFDOztBQUVGLElBQUksUUFBUSxDQUFDO0FBQ2IsSUFBSSxhQUFhLENBQUM7O0FBRWxCLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sS0FBSyxJQUFJO0NBQ3ZDLFFBQVEsR0FBRyxLQUFLLENBQUM7O0NBRWpCLElBQUksQ0FBQyxLQUFLLEVBQUUsT0FBTztDQUNuQixhQUFhLEdBQUcsSUFBSSxDQUFDOztDQUVyQixNQUFNLE1BQU0sR0FBRyxhQUFhLENBQUMsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7O0NBRXJELE1BQU0sS0FBSyxHQUFHLGFBQWEsR0FBRyxFQUFFLENBQUM7Q0FDakMsTUFBTSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsTUFBTSxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDakUsSUFBSSxLQUFLLEtBQUssYUFBYSxFQUFFLE9BQU87O0NBRXBDLE1BQU0sTUFBTSxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUNuRCxDQUFDLENBQUM7O0FBRUgsSUFBSSxXQUFXOzs7R0FHWixJQUFJLENBQUM7QUFDUixBQUdBO0FBQ0EsSUFBSSxNQUFNLENBQUM7QUFDWCxBQUdBO0FBQ0EsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQ1osQUFHQTtBQUNBLElBQUksR0FBRyxDQUFDO0FBQ1IsQUFHQTtBQUNBLE1BQU0sUUFBUSxHQUFHLE9BQU8sT0FBTyxLQUFLLFdBQVcsR0FBRyxPQUFPLEdBQUc7Q0FDM0QsU0FBUyxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEtBQUssRUFBRTtDQUNyQyxZQUFZLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksS0FBSyxFQUFFO0NBQ3hDLGlCQUFpQixFQUFFLEVBQUU7Q0FDckIsQ0FBQzs7QUFFRixNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUM7O0FBRTFCLFNBQVMsYUFBYSxDQUFDLE1BQU0sRUFBRTtDQUM5QixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQ2xDLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7RUFDdEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsSUFBSTtHQUNqRCxJQUFJLEdBQUcsR0FBRyxFQUFFLEtBQUssR0FBRyxFQUFFLENBQUMsR0FBRyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQ3hHLElBQUksT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssUUFBUSxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0dBQzlELElBQUksT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6RCxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO0dBQ3hCLENBQUMsQ0FBQztFQUNIO0NBQ0QsT0FBTyxLQUFLLENBQUM7Q0FDYjs7QUFFRCxTQUFTLGFBQWEsQ0FBQyxHQUFHLEVBQUU7Q0FDM0IsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLFFBQVEsQ0FBQyxNQUFNLEVBQUUsT0FBTyxJQUFJLENBQUM7Q0FDaEQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxPQUFPLElBQUksQ0FBQzs7Q0FFaEUsSUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQzs7Q0FFM0QsSUFBSSxJQUFJLEtBQUssRUFBRSxFQUFFO0VBQ2hCLElBQUksR0FBRyxHQUFHLENBQUM7RUFDWDs7O0NBR0QsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsT0FBTzs7Q0FFdkQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtFQUMxQyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7O0VBRXhCLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDOztFQUV2QyxJQUFJLEtBQUssRUFBRTtHQUNWLE1BQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7R0FDeEMsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztHQUNqRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDOztHQUVyRCxNQUFNLElBQUksR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUM7O0dBRTFELE9BQU8sRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDO0dBQzlDO0VBQ0Q7Q0FDRDtBQUNELEFBNkJBO0FBQ0EsU0FBUyxZQUFZLEdBQUc7Q0FDdkIsT0FBTztFQUNOLENBQUMsRUFBRSxXQUFXO0VBQ2QsQ0FBQyxFQUFFLFdBQVc7RUFDZCxDQUFDO0NBQ0Y7O0FBRUQsZUFBZSxRQUFRLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO0NBQ25ELElBQUksRUFBRSxFQUFFOztFQUVQLEdBQUcsR0FBRyxFQUFFLENBQUM7RUFDVCxNQUFNO0VBQ04sTUFBTSxjQUFjLEdBQUcsWUFBWSxFQUFFLENBQUM7OztFQUd0QyxjQUFjLENBQUMsR0FBRyxDQUFDLEdBQUcsY0FBYyxDQUFDOztFQUVyQyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxDQUFDO0VBQ2pCLGNBQWMsQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLEdBQUcsY0FBYyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7RUFDakU7O0NBRUQsR0FBRyxHQUFHLEVBQUUsQ0FBQzs7Q0FFVCxJQUFJLGNBQWMsRUFBRSxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7Q0FFaEQsTUFBTSxNQUFNLEdBQUcsV0FBVyxJQUFJLFdBQVcsQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLElBQUk7RUFDN0QsV0FBVyxDQUFDLE9BQU87RUFDbkIsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztDQUV4QixXQUFXLEdBQUcsSUFBSSxDQUFDOztDQUVuQixNQUFNLEtBQUssR0FBRyxhQUFhLEdBQUcsRUFBRSxDQUFDO0NBQ2pDLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUFHLE1BQU0sTUFBTSxDQUFDO0NBQ2pELElBQUksS0FBSyxLQUFLLGFBQWEsRUFBRSxPQUFPOztDQUVwQyxNQUFNLE1BQU0sQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDbkQsSUFBSSxRQUFRLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUM7O0NBRTFELElBQUksQ0FBQyxRQUFRLEVBQUU7RUFDZCxJQUFJLE1BQU0sR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7O0VBRWhDLElBQUksSUFBSSxFQUFFOztHQUVULE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOztHQUUzRCxJQUFJLFdBQVcsRUFBRTtJQUNoQixNQUFNLEdBQUc7S0FDUixDQUFDLEVBQUUsQ0FBQztLQUNKLENBQUMsRUFBRSxXQUFXLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxHQUFHO0tBQzFDLENBQUM7SUFDRjtHQUNEOztFQUVELGNBQWMsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUM7RUFDN0IsSUFBSSxNQUFNLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3pDO0NBQ0Q7O0FBRUQsZUFBZSxNQUFNLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO0NBQ3BELElBQUksUUFBUSxFQUFFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQzs7Q0FFckUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDdEIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7O0NBRTdCLElBQUksY0FBYyxFQUFFO0VBQ25CLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7RUFDM0IsTUFBTTtFQUNOLEtBQUssQ0FBQyxNQUFNLEdBQUc7R0FDZCxJQUFJLEVBQUUsRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7R0FDMUMsVUFBVSxFQUFFLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFO0dBQ3RELE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTztHQUN2QixDQUFDO0VBQ0YsS0FBSyxDQUFDLE1BQU0sR0FBRztHQUNkLEtBQUssRUFBRSxNQUFNLGNBQWM7R0FDM0IsQ0FBQzs7O0VBR0YsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0VBQzNELE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsQ0FBQzs7RUFFdkQsSUFBSSxLQUFLLElBQUksR0FBRyxFQUFFO0dBQ2pCLE9BQU8sS0FBSyxDQUFDLFdBQVcsS0FBSyxHQUFHLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztHQUM1RCxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDZCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDWjs7RUFFRCxjQUFjLEdBQUcsSUFBSSxHQUFHLENBQUM7R0FDeEIsTUFBTTtHQUNOLEtBQUs7R0FDTCxPQUFPLEVBQUUsSUFBSTtHQUNiLENBQUMsQ0FBQztFQUNIOztDQUVELGNBQWMsR0FBRyxNQUFNLENBQUM7Q0FDeEIsYUFBYSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQzNDLEtBQUssR0FBRyxJQUFJLENBQUM7Q0FDYixhQUFhLEdBQUcsS0FBSyxDQUFDO0NBQ3RCOztBQUVELFNBQVMsWUFBWSxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFFOzs7O0NBSTNELElBQUksaUJBQWlCLEtBQUssYUFBYSxFQUFFLE9BQU8sSUFBSSxDQUFDOztDQUVyRCxNQUFNLFFBQVEsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7O0NBRW5DLElBQUksQ0FBQyxRQUFRLEVBQUUsT0FBTyxLQUFLLENBQUM7Q0FDNUIsSUFBSSxPQUFPLEtBQUssUUFBUSxDQUFDLE9BQU8sRUFBRSxPQUFPLElBQUksQ0FBQztDQUM5QyxJQUFJLFFBQVEsQ0FBQyxLQUFLLEVBQUU7RUFDbkIsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO0dBQzdGLE9BQU8sSUFBSSxDQUFDO0dBQ1o7RUFDRDtDQUNEOztBQUVELGVBQWUsY0FBYyxDQUFDLE1BQU07Ozs7Q0FJbkM7Q0FDQSxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQztDQUMvQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7O0NBRXRELElBQUksUUFBUSxHQUFHLElBQUksQ0FBQzs7Q0FFcEIsTUFBTSxLQUFLLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQzs7Q0FFcEUsTUFBTSxlQUFlLEdBQUc7RUFDdkIsS0FBSyxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksS0FBSyxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQztFQUN0QyxRQUFRLEVBQUUsQ0FBQyxVQUFVLEVBQUUsUUFBUSxLQUFLO0dBQ25DLElBQUksUUFBUSxLQUFLLFFBQVEsQ0FBQyxVQUFVLEtBQUssVUFBVSxJQUFJLFFBQVEsQ0FBQyxRQUFRLEtBQUssUUFBUSxDQUFDLEVBQUU7SUFDdkYsTUFBTSxJQUFJLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQztJQUN6QztHQUNELFFBQVEsR0FBRyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsQ0FBQztHQUNwQztFQUNELEtBQUssRUFBRSxDQUFDLE1BQU0sRUFBRSxLQUFLLEtBQUs7R0FDekIsS0FBSyxDQUFDLEtBQUssR0FBRyxPQUFPLEtBQUssS0FBSyxRQUFRLEdBQUcsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDO0dBQ25FLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0dBQ3RCO0VBQ0QsQ0FBQzs7Q0FFRixJQUFJLENBQUMsY0FBYyxFQUFFO0VBQ3BCLGNBQWMsR0FBRyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJQyxPQUFZLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtHQUNoRixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7R0FDZixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7R0FDZixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7R0FDakIsTUFBTSxFQUFFLEVBQUU7R0FDVixFQUFFLFFBQVEsQ0FBQyxDQUFDO0VBQ2I7O0NBRUQsSUFBSSxNQUFNLENBQUM7Q0FDWCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7O0NBRVYsSUFBSTtFQUNILE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7RUFDckQsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDOztFQUU1QyxJQUFJLGFBQWEsR0FBRyxLQUFLLENBQUM7O0VBRTFCLE1BQU0sR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxLQUFLO0dBQzdELE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7R0FFNUIsSUFBSSxZQUFZLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsaUJBQWlCLENBQUMsRUFBRSxhQUFhLEdBQUcsSUFBSSxDQUFDOztHQUU3RSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7R0FDcEMsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUM7O0dBRTlCLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDOztHQUVkLElBQUksQ0FBQyxhQUFhLElBQUksQ0FBQyxhQUFhLElBQUksY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUMsRUFBRTtJQUMvRixPQUFPLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6Qjs7R0FFRCxhQUFhLEdBQUcsS0FBSyxDQUFDOztHQUV0QixNQUFNLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsR0FBRyxNQUFNLGNBQWMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7O0dBRWpGLElBQUksU0FBUyxDQUFDO0dBQ2QsSUFBSSxLQUFLLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtJQUM1QyxTQUFTLEdBQUcsT0FBTztPQUNoQixNQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFO01BQ3JDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtNQUNmLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtNQUNmLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztNQUNqQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFO01BQ3BELEVBQUUsUUFBUSxDQUFDO09BQ1YsRUFBRSxDQUFDO0lBQ04sTUFBTTtJQUNOLFNBQVMsR0FBRyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMxQzs7R0FFRCxRQUFRLEtBQUssQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUU7R0FDNUYsQ0FBQyxDQUFDLENBQUM7RUFDSixDQUFDLE9BQU8sS0FBSyxFQUFFO0VBQ2YsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7RUFDcEIsS0FBSyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7RUFDbkIsTUFBTSxHQUFHLEVBQUUsQ0FBQztFQUNaOztDQUVELE9BQU8sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxDQUFDO0NBQ25DOztBQUVELFNBQVMsUUFBUSxDQUFDLEtBQUssRUFBRTtDQUN4QixNQUFNLElBQUksR0FBRyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0NBQy9CLElBQUksUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxPQUFPOztDQUUzRCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLE1BQU0sS0FBSztFQUN0QyxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0VBQzVDLElBQUksQ0FBQyxHQUFHLEdBQUcsWUFBWSxDQUFDO0VBQ3hCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDOztFQUVqQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sTUFBTSxFQUFFLENBQUM7RUFDN0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7O0VBRXRCLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0VBQ2hDLENBQUMsQ0FBQztDQUNIOztBQUVELFNBQVMsY0FBYyxDQUFDLFNBQVM7OztDQUdoQzs7O0NBR0EsTUFBTSxRQUFRLElBQUksT0FBTyxTQUFTLENBQUMsR0FBRyxLQUFLLFFBQVEsR0FBRyxFQUFFLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztDQUN4RixRQUFRLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0NBQ2pDLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3ZEOztBQUVELFNBQVMsTUFBTSxDQUFDLElBQUksRUFBRTtDQUNyQixJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUNsQztBQUNELEFBNklBO0FBQ0EsQUFBSyxNQUFDLFFBQVEsR0FBRyxNQUFNQyxnQkFBVSxDQUFDLFdBQVcsQ0FBQzs7Ozs7Ozs7In0=
