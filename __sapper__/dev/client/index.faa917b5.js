import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, e as element, E as text, l as space, c as claim_element, a as children, F as claim_text, b as detach_dev, p as claim_space, f as attr_dev, h as add_location, j as insert_dev, k as append_dev, H as set_data_dev, R as destroy_each, n as noop, Q as toggle_class, o as onMount, V as binding_callbacks, a4 as bind, w as mount_component, x as transition_in, y as transition_out, z as destroy_component, W as add_render_callback, X as add_resize_listener, B as check_outros, A as group_outros, a5 as add_flush_callback } from './index.4e52d202.js';
import './index.ad9ca859.js';
import { g as goto } from './app.623f0ee4.js';
import { g as getFragment } from './index.abf9c6bd.js';
import { R as Repl } from './Repl.f1ddc62a.js';
import { p as process_example } from './examples.cd1fcc82.js';
import { s as svelteUrl, r as rollupUrl, m as mapbox_setup, S as ScreenToggle } from './config.582076a5.js';

/* src\routes\examples\_TableOfContents.svelte generated by Svelte v3.12.0 */

const file = "src\\routes\\examples\\_TableOfContents.svelte";

function get_each_context_1(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.example = list[i];
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.section = list[i];
	return child_ctx;
}

// (109:5) {#if example.slug === active_section}
function create_if_block(ctx) {
	var a, t, a_href_value;

	const block = {
		c: function create() {
			a = element("a");
			t = text("REPL");
			this.h();
		},

		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t = claim_text(a_nodes, "REPL");
			a_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(a, "href", a_href_value = "repl/" + ctx.example.slug);
			attr_dev(a, "class", "repl-link svelte-3jmrq9");
			add_location(a, file, 109, 6, 2269);
		},

		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t);
		},

		p: function update(changed, ctx) {
			if ((changed.sections) && a_href_value !== (a_href_value = "repl/" + ctx.example.slug)) {
				attr_dev(a, "href", a_href_value);
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(a);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block.name, type: "if", source: "(109:5) {#if example.slug === active_section}", ctx });
	return block;
}

// (92:3) {#each section.examples as example}
function create_each_block_1(ctx) {
	var div, a, img, img_alt_value, img_src_value, t0, span, t1_value = ctx.example.title + "", t1, a_href_value, t2;

	var if_block = (ctx.example.slug === ctx.active_section) && create_if_block(ctx);

	const block = {
		c: function create() {
			div = element("div");
			a = element("a");
			img = element("img");
			t0 = space();
			span = element("span");
			t1 = text(t1_value);
			t2 = space();
			if (if_block) if_block.c();
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			a = claim_element(div_nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			img = claim_element(a_nodes, "IMG", { class: true, alt: true, src: true }, false);
			var img_nodes = children(img);

			img_nodes.forEach(detach_dev);
			t0 = claim_space(a_nodes);

			span = claim_element(a_nodes, "SPAN", {}, false);
			var span_nodes = children(span);

			t1 = claim_text(span_nodes, t1_value);
			span_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			t2 = claim_space(div_nodes);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(img, "class", "thumbnail svelte-3jmrq9");
			attr_dev(img, "alt", img_alt_value = "" + ctx.example.title + " thumbnail");
			attr_dev(img, "src", img_src_value = "examples/thumbnails/" + ctx.example.slug + ".jpg");
			add_location(img, file, 101, 6, 2042);
			add_location(span, file, 106, 6, 2178);
			attr_dev(a, "href", a_href_value = "examples#" + ctx.example.slug);
			attr_dev(a, "class", "row svelte-3jmrq9");
			toggle_class(a, "active", ctx.example.slug === ctx.active_section);
			toggle_class(a, "loading", ctx.isLoading);
			add_location(a, file, 96, 5, 1887);
			attr_dev(div, "class", "row svelte-3jmrq9");
			toggle_class(div, "active", ctx.example.slug === ctx.active_section);
			toggle_class(div, "loading", ctx.isLoading);
			add_location(div, file, 92, 4, 1772);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, a);
			append_dev(a, img);
			append_dev(a, t0);
			append_dev(a, span);
			append_dev(span, t1);
			append_dev(div, t2);
			if (if_block) if_block.m(div, null);
		},

		p: function update(changed, ctx) {
			if ((changed.sections) && img_alt_value !== (img_alt_value = "" + ctx.example.title + " thumbnail")) {
				attr_dev(img, "alt", img_alt_value);
			}

			if ((changed.sections) && img_src_value !== (img_src_value = "examples/thumbnails/" + ctx.example.slug + ".jpg")) {
				attr_dev(img, "src", img_src_value);
			}

			if ((changed.sections) && t1_value !== (t1_value = ctx.example.title + "")) {
				set_data_dev(t1, t1_value);
			}

			if ((changed.sections) && a_href_value !== (a_href_value = "examples#" + ctx.example.slug)) {
				attr_dev(a, "href", a_href_value);
			}

			if ((changed.sections || changed.active_section)) {
				toggle_class(a, "active", ctx.example.slug === ctx.active_section);
			}

			if (changed.isLoading) {
				toggle_class(a, "loading", ctx.isLoading);
			}

			if (ctx.example.slug === ctx.active_section) {
				if (if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if ((changed.sections || changed.active_section)) {
				toggle_class(div, "active", ctx.example.slug === ctx.active_section);
			}

			if (changed.isLoading) {
				toggle_class(div, "loading", ctx.isLoading);
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			if (if_block) if_block.d();
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block_1.name, type: "each", source: "(92:3) {#each section.examples as example}", ctx });
	return block;
}

// (88:1) {#each sections as section}
function create_each_block(ctx) {
	var li, span, t0_value = ctx.section.title + "", t0, t1, t2;

	let each_value_1 = ctx.section.examples;

	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			li = element("li");
			span = element("span");
			t0 = text(t0_value);
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			this.h();
		},

		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true }, false);
			var li_nodes = children(li);

			span = claim_element(li_nodes, "SPAN", { class: true }, false);
			var span_nodes = children(span);

			t0 = claim_text(span_nodes, t0_value);
			span_nodes.forEach(detach_dev);
			t1 = claim_space(li_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(li_nodes);
			}

			t2 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(span, "class", "section-title svelte-3jmrq9");
			add_location(span, file, 89, 3, 1674);
			attr_dev(li, "class", "svelte-3jmrq9");
			add_location(li, file, 88, 2, 1665);
		},

		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, span);
			append_dev(span, t0);
			append_dev(li, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(li, null);
			}

			append_dev(li, t2);
		},

		p: function update(changed, ctx) {
			if ((changed.sections) && t0_value !== (t0_value = ctx.section.title + "")) {
				set_data_dev(t0, t0_value);
			}

			if (changed.sections || changed.active_section || changed.isLoading) {
				each_value_1 = ctx.section.examples;

				let i;
				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(li, t2);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value_1.length;
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(li);
			}

			destroy_each(each_blocks, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block.name, type: "each", source: "(88:1) {#each sections as section}", ctx });
	return block;
}

function create_fragment(ctx) {
	var ul;

	let each_value = ctx.sections;

	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
			this.h();
		},

		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(ul, "class", "examples-toc svelte-3jmrq9");
			add_location(ul, file, 86, 0, 1606);
		},

		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},

		p: function update(changed, ctx) {
			if (changed.sections || changed.active_section || changed.isLoading) {
				each_value = ctx.sections;

				let i;
				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value.length;
			}
		},

		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(ul);
			}

			destroy_each(each_blocks, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment.name, type: "component", source: "", ctx });
	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { sections = [], active_section = null, isLoading = false } = $$props;

	const writable_props = ['sections', 'active_section', 'isLoading'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<TableOfContents> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('sections' in $$props) $$invalidate('sections', sections = $$props.sections);
		if ('active_section' in $$props) $$invalidate('active_section', active_section = $$props.active_section);
		if ('isLoading' in $$props) $$invalidate('isLoading', isLoading = $$props.isLoading);
	};

	$$self.$capture_state = () => {
		return { sections, active_section, isLoading };
	};

	$$self.$inject_state = $$props => {
		if ('sections' in $$props) $$invalidate('sections', sections = $$props.sections);
		if ('active_section' in $$props) $$invalidate('active_section', active_section = $$props.active_section);
		if ('isLoading' in $$props) $$invalidate('isLoading', isLoading = $$props.isLoading);
	};

	return { sections, active_section, isLoading };
}

class TableOfContents extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["sections", "active_section", "isLoading"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "TableOfContents", options, id: create_fragment.name });
	}

	get sections() {
		throw new Error("<TableOfContents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set sections(value) {
		throw new Error("<TableOfContents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get active_section() {
		throw new Error("<TableOfContents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set active_section(value) {
		throw new Error("<TableOfContents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isLoading() {
		throw new Error("<TableOfContents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isLoading(value) {
		throw new Error("<TableOfContents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\routes\examples\index.svelte generated by Svelte v3.12.0 */

const file$1 = "src\\routes\\examples\\index.svelte";

// (119:1) {#if mobile}
function create_if_block$1(ctx) {
	var updating_offset, current;

	function screentoggle_offset_binding(value) {
		ctx.screentoggle_offset_binding.call(null, value);
		updating_offset = true;
		add_flush_callback(() => updating_offset = false);
	}

	let screentoggle_props = { labels: ['index', 'input', 'output'] };
	if (ctx.offset !== void 0) {
		screentoggle_props.offset = ctx.offset;
	}
	var screentoggle = new ScreenToggle({
		props: screentoggle_props,
		$$inline: true
	});

	binding_callbacks.push(() => bind(screentoggle, 'offset', screentoggle_offset_binding));

	const block = {
		c: function create() {
			screentoggle.$$.fragment.c();
		},

		l: function claim(nodes) {
			screentoggle.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(screentoggle, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var screentoggle_changes = {};
			if (!updating_offset && changed.offset) {
				screentoggle_changes.offset = ctx.offset;
			}
			screentoggle.$set(screentoggle_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(screentoggle.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(screentoggle.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(screentoggle, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$1.name, type: "if", source: "(119:1) {#if mobile}", ctx });
	return block;
}

function create_fragment$1(ctx) {
	var title_value, meta0, meta1, meta2, t0, div2, div1, t1, div0, div1_class_value, t2, div2_resize_listener, current;

	document.title = title_value = "" + ctx.title + " " + (ctx.title ? '•' : '') + " Svelte Examples";

	var tableofcontents = new TableOfContents({
		props: {
		sections: ctx.sections,
		active_section: ctx.active_slug,
		isLoading: ctx.isLoading
	},
		$$inline: true
	});

	let repl_1_props = {
		workersUrl: "workers",
		svelteUrl: svelteUrl,
		rollupUrl: rollupUrl,
		orientation: ctx.replOrientation,
		fixed: ctx.mobile,
		relaxed: true,
		injectedJS: mapbox_setup
	};
	var repl_1 = new Repl({ props: repl_1_props, $$inline: true });

	ctx.repl_1_binding(repl_1);

	var if_block = (ctx.mobile) && create_if_block$1(ctx);

	const block = {
		c: function create() {
			meta0 = element("meta");
			meta1 = element("meta");
			meta2 = element("meta");
			t0 = space();
			div2 = element("div");
			div1 = element("div");
			tableofcontents.$$.fragment.c();
			t1 = space();
			div0 = element("div");
			repl_1.$$.fragment.c();
			t2 = space();
			if (if_block) if_block.c();
			this.h();
		},

		l: function claim(nodes) {
			meta0 = claim_element(nodes, "META", { name: true, content: true }, false);
			var meta0_nodes = children(meta0);

			meta0_nodes.forEach(detach_dev);

			meta1 = claim_element(nodes, "META", { name: true, content: true }, false);
			var meta1_nodes = children(meta1);

			meta1_nodes.forEach(detach_dev);

			meta2 = claim_element(nodes, "META", { name: true, content: true }, false);
			var meta2_nodes = children(meta2);

			meta2_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);

			div2 = claim_element(nodes, "DIV", { class: true }, false);
			var div2_nodes = children(div2);

			div1 = claim_element(div2_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			tableofcontents.$$.fragment.l(div1_nodes);
			t1 = claim_space(div1_nodes);

			div0 = claim_element(div1_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			repl_1.$$.fragment.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t2 = claim_space(div2_nodes);
			if (if_block) if_block.l(div2_nodes);
			div2_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(meta0, "name", "twitter:title");
			attr_dev(meta0, "content", "Svelte examples");
			add_location(meta0, file$1, 97, 1, 2511);
			attr_dev(meta1, "name", "twitter:description");
			attr_dev(meta1, "content", "Cybernetically enhanced web apps");
			add_location(meta1, file$1, 98, 1, 2567);
			attr_dev(meta2, "name", "Description");
			attr_dev(meta2, "content", "Interactive example Svelte apps");
			add_location(meta2, file$1, 99, 1, 2646);
			attr_dev(div0, "class", "repl-container svelte-1q3cg6d");
			toggle_class(div0, "loading", ctx.isLoading);
			add_location(div0, file$1, 105, 2, 2910);
			attr_dev(div1, "class", div1_class_value = "viewport offset-" + ctx.offset + " svelte-1q3cg6d");
			add_location(div1, file$1, 103, 1, 2793);
			add_render_callback(() => ctx.div2_resize_handler.call(div2));
			attr_dev(div2, "class", "examples-container svelte-1q3cg6d");
			add_location(div2, file$1, 102, 0, 2733);
		},

		m: function mount(target, anchor) {
			append_dev(document.head, meta0);
			append_dev(document.head, meta1);
			append_dev(document.head, meta2);
			insert_dev(target, t0, anchor);
			insert_dev(target, div2, anchor);
			append_dev(div2, div1);
			mount_component(tableofcontents, div1, null);
			append_dev(div1, t1);
			append_dev(div1, div0);
			mount_component(repl_1, div0, null);
			append_dev(div2, t2);
			if (if_block) if_block.m(div2, null);
			div2_resize_listener = add_resize_listener(div2, ctx.div2_resize_handler.bind(div2));
			current = true;
		},

		p: function update(changed, ctx) {
			if ((!current || changed.title) && title_value !== (title_value = "" + ctx.title + " " + (ctx.title ? '•' : '') + " Svelte Examples")) {
				document.title = title_value;
			}

			var tableofcontents_changes = {};
			if (changed.sections) tableofcontents_changes.sections = ctx.sections;
			if (changed.active_slug) tableofcontents_changes.active_section = ctx.active_slug;
			if (changed.isLoading) tableofcontents_changes.isLoading = ctx.isLoading;
			tableofcontents.$set(tableofcontents_changes);

			var repl_1_changes = {};
			if (changed.replOrientation) repl_1_changes.orientation = ctx.replOrientation;
			if (changed.mobile) repl_1_changes.fixed = ctx.mobile;
			repl_1.$set(repl_1_changes);

			if (changed.isLoading) {
				toggle_class(div0, "loading", ctx.isLoading);
			}

			if ((!current || changed.offset) && div1_class_value !== (div1_class_value = "viewport offset-" + ctx.offset + " svelte-1q3cg6d")) {
				attr_dev(div1, "class", div1_class_value);
			}

			if (ctx.mobile) {
				if (if_block) {
					if_block.p(changed, ctx);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div2, null);
				}
			} else if (if_block) {
				group_outros();
				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});
				check_outros();
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(tableofcontents.$$.fragment, local);

			transition_in(repl_1.$$.fragment, local);

			transition_in(if_block);
			current = true;
		},

		o: function outro(local) {
			transition_out(tableofcontents.$$.fragment, local);
			transition_out(repl_1.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},

		d: function destroy(detaching) {
			detach_dev(meta0);
			detach_dev(meta1);
			detach_dev(meta2);

			if (detaching) {
				detach_dev(t0);
				detach_dev(div2);
			}

			destroy_component(tableofcontents);

			ctx.repl_1_binding(null);

			destroy_component(repl_1);

			if (if_block) if_block.d();
			div2_resize_listener.cancel();
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$1.name, type: "component", source: "", ctx });
	return block;
}

async function preload() {
	const sections = await this.fetch(`examples.json`).then(r => r.json());
	const title_by_slug = sections.reduce((acc, {examples}) => {
		examples.forEach(({slug, title}) => {
			acc[slug] = title;
		});

		return acc;
	}, {});

	return {sections, title_by_slug};
}

function instance$1($$self, $$props, $$invalidate) {
	

	let { sections, title_by_slug } = $$props;

	let active_slug;
	let width;
	let offset = 1;
	let repl;
	let isLoading = false;
	const cache = {};

	function showExampleCodeOnChange() {
		$$invalidate('offset', offset = 1);
	}

	onMount(() => {
		const onhashchange = () => {
			$$invalidate('active_slug', active_slug = getFragment());
		};
		window.addEventListener('hashchange', onhashchange, false);

		const fragment = getFragment();
		if (fragment) {
			$$invalidate('active_slug', active_slug = fragment);
		} else {
			$$invalidate('active_slug', active_slug = first_slug);
			goto(`examples#${active_slug}`);
		}

		return () => {
			window.removeEventListener('hashchange', onhashchange, false);
		};
	});

	const writable_props = ['sections', 'title_by_slug'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<Index> was created with unknown prop '${key}'`);
	});

	function repl_1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('repl', repl = $$value);
		});
	}

	function screentoggle_offset_binding(value) {
		offset = value;
		$$invalidate('offset', offset);
	}

	function div2_resize_handler() {
		width = this.clientWidth;
		$$invalidate('width', width);
	}

	$$self.$set = $$props => {
		if ('sections' in $$props) $$invalidate('sections', sections = $$props.sections);
		if ('title_by_slug' in $$props) $$invalidate('title_by_slug', title_by_slug = $$props.title_by_slug);
	};

	$$self.$capture_state = () => {
		return { sections, title_by_slug, active_slug, width, offset, repl, isLoading, title, first_slug, mobile, replOrientation };
	};

	$$self.$inject_state = $$props => {
		if ('sections' in $$props) $$invalidate('sections', sections = $$props.sections);
		if ('title_by_slug' in $$props) $$invalidate('title_by_slug', title_by_slug = $$props.title_by_slug);
		if ('active_slug' in $$props) $$invalidate('active_slug', active_slug = $$props.active_slug);
		if ('width' in $$props) $$invalidate('width', width = $$props.width);
		if ('offset' in $$props) $$invalidate('offset', offset = $$props.offset);
		if ('repl' in $$props) $$invalidate('repl', repl = $$props.repl);
		if ('isLoading' in $$props) $$invalidate('isLoading', isLoading = $$props.isLoading);
		if ('title' in $$props) $$invalidate('title', title = $$props.title);
		if ('first_slug' in $$props) first_slug = $$props.first_slug;
		if ('mobile' in $$props) $$invalidate('mobile', mobile = $$props.mobile);
		if ('replOrientation' in $$props) $$invalidate('replOrientation', replOrientation = $$props.replOrientation);
	};

	let title, first_slug, mobile, replOrientation;

	$$self.$$.update = ($$dirty = { title_by_slug: 1, active_slug: 1, sections: 1, width: 1, mobile: 1, repl: 1, cache: 1 }) => {
		if ($$dirty.title_by_slug || $$dirty.active_slug) { $$invalidate('title', title = title_by_slug[active_slug] || ''); }
		if ($$dirty.sections) { first_slug = sections[0].examples[0].slug; }
		if ($$dirty.width) { $$invalidate('mobile', mobile = width < 768); }
		if ($$dirty.mobile || $$dirty.width) { $$invalidate('replOrientation', replOrientation = (mobile || width > 1080) ? 'columns' : 'rows'); }
		if ($$dirty.repl || $$dirty.active_slug || $$dirty.cache) { if (repl && active_slug) {
				if (active_slug in cache) {
					repl.set({ components: cache[active_slug] });
					showExampleCodeOnChange();
				} else {
					$$invalidate('isLoading', isLoading = true);
					fetch(`examples/${active_slug}.json`)
						.then(async response => {
							if (response.ok) {
								const {files} = await response.json();
								return process_example(files);
							}
						})
						.then(components => {
							$$invalidate('cache', cache[active_slug] = components, cache);
							repl.set({components});
							showExampleCodeOnChange();
							$$invalidate('isLoading', isLoading = false);
						})
						.catch(() => {
							$$invalidate('isLoading', isLoading = false);
						});
				}
			} }
	};

	return {
		sections,
		title_by_slug,
		active_slug,
		width,
		offset,
		repl,
		isLoading,
		title,
		mobile,
		replOrientation,
		repl_1_binding,
		screentoggle_offset_binding,
		div2_resize_handler
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, ["sections", "title_by_slug"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Index", options, id: create_fragment$1.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.sections === undefined && !('sections' in props)) {
			console.warn("<Index> was created without expected prop 'sections'");
		}
		if (ctx.title_by_slug === undefined && !('title_by_slug' in props)) {
			console.warn("<Index> was created without expected prop 'title_by_slug'");
		}
	}

	get sections() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set sections(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title_by_slug() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title_by_slug(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Index;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZmFhOTE3YjUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvZXhhbXBsZXMvX1RhYmxlT2ZDb250ZW50cy5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvcm91dGVzL2V4YW1wbGVzL2luZGV4LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxyXG5cdGV4cG9ydCBsZXQgc2VjdGlvbnMgPSBbXTtcclxuXHRleHBvcnQgbGV0IGFjdGl2ZV9zZWN0aW9uID0gbnVsbDtcclxuXHRleHBvcnQgbGV0IGlzTG9hZGluZyA9IGZhbHNlO1xyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZT5cclxuXHQuZXhhbXBsZXMtdG9jIHtcclxuXHRcdG92ZXJmbG93LXk6IGF1dG87XHJcblx0XHRoZWlnaHQ6IDEwMCU7XHJcblx0XHRib3JkZXItcmlnaHQ6IDFweCBzb2xpZCB2YXIoLS1zZWNvbmQpO1xyXG5cdFx0YmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2Vjb25kKTtcclxuXHRcdGNvbG9yOiB3aGl0ZTtcclxuXHRcdHBhZGRpbmc6IDNyZW0gM3JlbSAwIDNyZW07XHJcblx0fVxyXG5cclxuXHQuZXhhbXBsZXMtdG9jIGxpIHtcclxuXHRcdGRpc3BsYXk6IGJsb2NrO1xyXG5cdFx0bGluZS1oZWlnaHQ6IDEuMjtcclxuXHRcdG1hcmdpbjogMCAwIDQuOHJlbSAwO1xyXG5cdH1cclxuXHJcblx0LnNlY3Rpb24tdGl0bGUge1xyXG5cdFx0ZGlzcGxheTogYmxvY2s7XHJcblx0XHRwYWRkaW5nOiAwIDAgMC44cmVtIDA7XHJcblx0XHRmb250OiA0MDAgdmFyKC0taDYpIHZhcigtLWZvbnQpO1xyXG5cdFx0dGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuXHRcdGxldHRlci1zcGFjaW5nOiAwLjEyZW07XHJcblx0XHRmb250LXdlaWdodDogNzAwO1xyXG5cdH1cclxuXHJcblx0ZGl2IHtcclxuXHRcdGRpc3BsYXk6IGZsZXg7XHJcblx0XHRmbGV4LWRpcmVjdGlvbjogcm93O1xyXG5cdFx0cGFkZGluZzogMC4ycmVtIDNyZW07XHJcblx0XHRtYXJnaW46IDAgLTNyZW07XHJcblx0fVxyXG5cclxuXHRkaXYuYWN0aXZlIHtcclxuXHRcdGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4xNSkgY2FsYygxMDAlIC0gM3JlbSkgNDclIG5vLXJlcGVhdFxyXG5cdFx0XHR1cmwoL2ljb25zL2Fycm93LXJpZ2h0LnN2Zyk7XHJcblx0XHRiYWNrZ3JvdW5kLXNpemU6IDFlbSAxZW07XHJcblx0XHRjb2xvcjogd2hpdGU7XHJcblx0fVxyXG5cclxuXHRkaXYuYWN0aXZlLmxvYWRpbmcge1xyXG5cdFx0YmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjEpIGNhbGMoMTAwJSAtIDNyZW0pIDQ3JSBuby1yZXBlYXRcclxuXHRcdFx0dXJsKC9pY29ucy9sb2FkaW5nLnN2Zyk7XHJcblx0XHRiYWNrZ3JvdW5kLXNpemU6IDFlbSAxZW07XHJcblx0XHRjb2xvcjogd2hpdGU7XHJcblx0fVxyXG5cclxuXHRhIHtcclxuXHRcdGRpc3BsYXk6IGZsZXg7XHJcblx0XHRmbGV4OiAxIDEgYXV0bztcclxuXHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuXHRcdGNvbG9yOiB2YXIoLS1zaWRlYmFyLXRleHQpO1xyXG5cdFx0Ym9yZGVyLWJvdHRvbTogbm9uZTtcclxuXHRcdGZvbnQtc2l6ZTogMS42cmVtO1xyXG5cdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcclxuXHRcdGp1c3RpZnktY29udGVudDogc3RhcnQ7XHJcblx0XHRwYWRkaW5nOiAwO1xyXG5cdH1cclxuXHJcblx0YTpob3ZlciB7XHJcblx0XHRjb2xvcjogd2hpdGU7XHJcblx0fVxyXG5cclxuXHQucmVwbC1saW5rIHtcclxuXHRcdGZsZXg6IDAgMSBhdXRvO1xyXG5cdFx0Zm9udC1zaXplOiAxLjJyZW07XHJcblx0XHRmb250LXdlaWdodDogNzAwO1xyXG5cdFx0bWFyZ2luLXJpZ2h0OiAyLjVyZW07XHJcblx0fVxyXG5cclxuXHQudGh1bWJuYWlsIHtcclxuXHRcdGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xyXG5cdFx0b2JqZWN0LWZpdDogY29udGFpbjtcclxuXHRcdHdpZHRoOiA1cmVtO1xyXG5cdFx0aGVpZ2h0OiA1cmVtO1xyXG5cdFx0Ym9yZGVyLXJhZGl1czogMnB4O1xyXG5cdFx0Ym94LXNoYWRvdzogMXB4IDFweCAzcHggcmdiYSgwLCAwLCAwLCAwLjEzKTtcclxuXHRcdG1hcmdpbjogMC4yZW0gMC41ZW0gMC4yZW0gMDtcclxuXHR9XHJcbjwvc3R5bGU+XHJcblxyXG48dWwgY2xhc3M9XCJleGFtcGxlcy10b2NcIj5cclxuXHR7I2VhY2ggc2VjdGlvbnMgYXMgc2VjdGlvbn1cclxuXHRcdDxsaT5cclxuXHRcdFx0PHNwYW4gY2xhc3M9XCJzZWN0aW9uLXRpdGxlXCI+e3NlY3Rpb24udGl0bGV9PC9zcGFuPlxyXG5cclxuXHRcdFx0eyNlYWNoIHNlY3Rpb24uZXhhbXBsZXMgYXMgZXhhbXBsZX1cclxuXHRcdFx0XHQ8ZGl2XHJcblx0XHRcdFx0XHRjbGFzcz1cInJvd1wiXHJcblx0XHRcdFx0XHRjbGFzczphY3RpdmU9e2V4YW1wbGUuc2x1ZyA9PT0gYWN0aXZlX3NlY3Rpb259XHJcblx0XHRcdFx0XHRjbGFzczpsb2FkaW5nPXtpc0xvYWRpbmd9PlxyXG5cdFx0XHRcdFx0PGFcclxuXHRcdFx0XHRcdFx0aHJlZj1cImV4YW1wbGVzI3tleGFtcGxlLnNsdWd9XCJcclxuXHRcdFx0XHRcdFx0Y2xhc3M9XCJyb3dcIlxyXG5cdFx0XHRcdFx0XHRjbGFzczphY3RpdmU9e2V4YW1wbGUuc2x1ZyA9PT0gYWN0aXZlX3NlY3Rpb259XHJcblx0XHRcdFx0XHRcdGNsYXNzOmxvYWRpbmc9e2lzTG9hZGluZ30+XHJcblx0XHRcdFx0XHRcdDxpbWdcclxuXHRcdFx0XHRcdFx0XHRjbGFzcz1cInRodW1ibmFpbFwiXHJcblx0XHRcdFx0XHRcdFx0YWx0PVwie2V4YW1wbGUudGl0bGV9IHRodW1ibmFpbFwiXHJcblx0XHRcdFx0XHRcdFx0c3JjPVwiZXhhbXBsZXMvdGh1bWJuYWlscy97ZXhhbXBsZS5zbHVnfS5qcGdcIiAvPlxyXG5cclxuXHRcdFx0XHRcdFx0PHNwYW4+e2V4YW1wbGUudGl0bGV9PC9zcGFuPlxyXG5cdFx0XHRcdFx0PC9hPlxyXG5cdFx0XHRcdFx0eyNpZiBleGFtcGxlLnNsdWcgPT09IGFjdGl2ZV9zZWN0aW9ufVxyXG5cdFx0XHRcdFx0XHQ8YSBocmVmPVwicmVwbC97ZXhhbXBsZS5zbHVnfVwiIGNsYXNzPVwicmVwbC1saW5rXCI+UkVQTDwvYT5cclxuXHRcdFx0XHRcdHsvaWZ9XHJcblx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdHsvZWFjaH1cclxuXHRcdDwvbGk+XHJcblx0ey9lYWNofVxyXG48L3VsPlxyXG4iLCI8IS0tIEZJWE1FIHNvbWV0aW1lcyBpdCBhZGRzIGEgdHJhaWxpbmcgc2xhc2ggd2hlbiBsYW5kaW5nIC0tPlxyXG48c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cclxuXHRleHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJlbG9hZCgpIHtcclxuXHRcdGNvbnN0IHNlY3Rpb25zID0gYXdhaXQgdGhpcy5mZXRjaChgZXhhbXBsZXMuanNvbmApLnRoZW4ociA9PiByLmpzb24oKSk7XHJcblx0XHRjb25zdCB0aXRsZV9ieV9zbHVnID0gc2VjdGlvbnMucmVkdWNlKChhY2MsIHtleGFtcGxlc30pID0+IHtcclxuXHRcdFx0ZXhhbXBsZXMuZm9yRWFjaCgoe3NsdWcsIHRpdGxlfSkgPT4ge1xyXG5cdFx0XHRcdGFjY1tzbHVnXSA9IHRpdGxlO1xyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdHJldHVybiBhY2M7XHJcblx0XHR9LCB7fSk7XHJcblxyXG5cdFx0cmV0dXJuIHtzZWN0aW9ucywgdGl0bGVfYnlfc2x1Z307XHJcblx0fVxyXG48L3NjcmlwdD5cclxuXHJcbjxzY3JpcHQ+XHJcblx0aW1wb3J0IHsgb25Nb3VudCB9IGZyb20gJ3N2ZWx0ZSc7XHJcblx0aW1wb3J0IHsgZ290byB9IGZyb20gJ0BzYXBwZXIvYXBwJztcclxuXHRpbXBvcnQgUmVwbCBmcm9tICdAc3ZlbHRlanMvc3ZlbHRlLXJlcGwnO1xyXG5cclxuXHRpbXBvcnQgU2NyZWVuVG9nZ2xlIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvU2NyZWVuVG9nZ2xlLnN2ZWx0ZSc7XHJcblx0aW1wb3J0IHtcclxuXHRcdG1hcGJveF9zZXR1cCwgLy8gc2VlIHNpdGUvY29udGVudC9leGFtcGxlcy8xNS1jb250ZXh0LzAwLWNvbnRleHQtYXBpXHJcblx0XHRyb2xsdXBVcmwsXHJcblx0XHRzdmVsdGVVcmxcclxuXHR9IGZyb20gJy4uLy4uL2NvbmZpZyc7XHJcblx0aW1wb3J0IHsgcHJvY2Vzc19leGFtcGxlIH0gZnJvbSAnLi4vLi4vdXRpbHMvZXhhbXBsZXMnO1xyXG5cdGltcG9ydCB7IGdldEZyYWdtZW50IH0gZnJvbSAnQHN2ZWx0ZWpzL3NpdGUta2l0L3V0aWxzL25hdmlnYXRpb24nO1xyXG5cdGltcG9ydCBUYWJsZU9mQ29udGVudHMgZnJvbSAnLi9fVGFibGVPZkNvbnRlbnRzLnN2ZWx0ZSc7XHJcblxyXG5cdGV4cG9ydCBsZXQgc2VjdGlvbnM7XHJcblx0ZXhwb3J0IGxldCB0aXRsZV9ieV9zbHVnO1xyXG5cclxuXHRsZXQgYWN0aXZlX3NsdWc7XHJcblx0bGV0IHdpZHRoO1xyXG5cdGxldCBvZmZzZXQgPSAxO1xyXG5cdGxldCByZXBsO1xyXG5cdGxldCBpc0xvYWRpbmcgPSBmYWxzZTtcclxuXHRjb25zdCBjYWNoZSA9IHt9O1xyXG5cclxuXHRmdW5jdGlvbiBzaG93RXhhbXBsZUNvZGVPbkNoYW5nZSgpIHtcclxuXHRcdG9mZnNldCA9IDE7XHJcblx0fVxyXG5cclxuXHQkOiB0aXRsZSA9IHRpdGxlX2J5X3NsdWdbYWN0aXZlX3NsdWddIHx8ICcnO1xyXG5cdCQ6IGZpcnN0X3NsdWcgPSBzZWN0aW9uc1swXS5leGFtcGxlc1swXS5zbHVnO1xyXG5cdCQ6IG1vYmlsZSA9IHdpZHRoIDwgNzY4OyAvLyBub3RlOiBzYW1lIGFzIHBlciBtZWRpYSBxdWVyeSBiZWxvd1xyXG5cdCQ6IHJlcGxPcmllbnRhdGlvbiA9IChtb2JpbGUgfHwgd2lkdGggPiAxMDgwKSA/ICdjb2x1bW5zJyA6ICdyb3dzJztcclxuXHQkOiBpZiAocmVwbCAmJiBhY3RpdmVfc2x1Zykge1xyXG5cdFx0aWYgKGFjdGl2ZV9zbHVnIGluIGNhY2hlKSB7XHJcblx0XHRcdHJlcGwuc2V0KHsgY29tcG9uZW50czogY2FjaGVbYWN0aXZlX3NsdWddIH0pO1xyXG5cdFx0XHRzaG93RXhhbXBsZUNvZGVPbkNoYW5nZSgpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0aXNMb2FkaW5nID0gdHJ1ZTtcclxuXHRcdFx0ZmV0Y2goYGV4YW1wbGVzLyR7YWN0aXZlX3NsdWd9Lmpzb25gKVxyXG5cdFx0XHRcdC50aGVuKGFzeW5jIHJlc3BvbnNlID0+IHtcclxuXHRcdFx0XHRcdGlmIChyZXNwb25zZS5vaykge1xyXG5cdFx0XHRcdFx0XHRjb25zdCB7ZmlsZXN9ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gcHJvY2Vzc19leGFtcGxlKGZpbGVzKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KVxyXG5cdFx0XHRcdC50aGVuKGNvbXBvbmVudHMgPT4ge1xyXG5cdFx0XHRcdFx0Y2FjaGVbYWN0aXZlX3NsdWddID0gY29tcG9uZW50cztcclxuXHRcdFx0XHRcdHJlcGwuc2V0KHtjb21wb25lbnRzfSk7XHJcblx0XHRcdFx0XHRzaG93RXhhbXBsZUNvZGVPbkNoYW5nZSgpO1xyXG5cdFx0XHRcdFx0aXNMb2FkaW5nID0gZmFsc2U7XHJcblx0XHRcdFx0fSlcclxuXHRcdFx0XHQuY2F0Y2goKCkgPT4ge1xyXG5cdFx0XHRcdFx0aXNMb2FkaW5nID0gZmFsc2U7XHJcblx0XHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRvbk1vdW50KCgpID0+IHtcclxuXHRcdGNvbnN0IG9uaGFzaGNoYW5nZSA9ICgpID0+IHtcclxuXHRcdFx0YWN0aXZlX3NsdWcgPSBnZXRGcmFnbWVudCgpO1xyXG5cdFx0fTtcclxuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgb25oYXNoY2hhbmdlLCBmYWxzZSk7XHJcblxyXG5cdFx0Y29uc3QgZnJhZ21lbnQgPSBnZXRGcmFnbWVudCgpO1xyXG5cdFx0aWYgKGZyYWdtZW50KSB7XHJcblx0XHRcdGFjdGl2ZV9zbHVnID0gZnJhZ21lbnQ7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRhY3RpdmVfc2x1ZyA9IGZpcnN0X3NsdWc7XHJcblx0XHRcdGdvdG8oYGV4YW1wbGVzIyR7YWN0aXZlX3NsdWd9YCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuICgpID0+IHtcclxuXHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCBvbmhhc2hjaGFuZ2UsIGZhbHNlKTtcclxuXHRcdH07XHJcblx0fSk7XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN2ZWx0ZTpoZWFkPlxyXG5cdDx0aXRsZT57dGl0bGV9IHt0aXRsZSA/ICfigKInIDogJyd9IFN2ZWx0ZSBFeGFtcGxlczwvdGl0bGU+XHJcblxyXG5cdDxtZXRhIG5hbWU9XCJ0d2l0dGVyOnRpdGxlXCIgY29udGVudD1cIlN2ZWx0ZSBleGFtcGxlc1wiPlxyXG5cdDxtZXRhIG5hbWU9XCJ0d2l0dGVyOmRlc2NyaXB0aW9uXCIgY29udGVudD1cIkN5YmVybmV0aWNhbGx5IGVuaGFuY2VkIHdlYiBhcHBzXCI+XHJcblx0PG1ldGEgbmFtZT1cIkRlc2NyaXB0aW9uXCIgY29udGVudD1cIkludGVyYWN0aXZlIGV4YW1wbGUgU3ZlbHRlIGFwcHNcIj5cclxuPC9zdmVsdGU6aGVhZD5cclxuXHJcbjxkaXYgY2xhc3M9J2V4YW1wbGVzLWNvbnRhaW5lcicgYmluZDpjbGllbnRXaWR0aD17d2lkdGh9PlxyXG5cdDxkaXYgY2xhc3M9XCJ2aWV3cG9ydCBvZmZzZXQte29mZnNldH1cIj5cclxuXHRcdDxUYWJsZU9mQ29udGVudHMge3NlY3Rpb25zfSBhY3RpdmVfc2VjdGlvbj17YWN0aXZlX3NsdWd9IHtpc0xvYWRpbmd9IC8+XHJcblx0XHQ8ZGl2IGNsYXNzPVwicmVwbC1jb250YWluZXJcIiBjbGFzczpsb2FkaW5nPXtpc0xvYWRpbmd9PlxyXG5cdFx0XHQ8UmVwbFxyXG5cdFx0XHRcdGJpbmQ6dGhpcz17cmVwbH1cclxuXHRcdFx0XHR3b3JrZXJzVXJsPVwid29ya2Vyc1wiXHJcblx0XHRcdFx0e3N2ZWx0ZVVybH1cclxuXHRcdFx0XHR7cm9sbHVwVXJsfVxyXG5cdFx0XHRcdG9yaWVudGF0aW9uPXtyZXBsT3JpZW50YXRpb259XHJcblx0XHRcdFx0Zml4ZWQ9e21vYmlsZX1cclxuXHRcdFx0XHRyZWxheGVkXHJcblx0XHRcdFx0aW5qZWN0ZWRKUz17bWFwYm94X3NldHVwfVxyXG5cdFx0XHQvPlxyXG5cdFx0PC9kaXY+XHJcblx0PC9kaXY+XHJcblx0eyNpZiBtb2JpbGV9XHJcblx0PFNjcmVlblRvZ2dsZSBiaW5kOm9mZnNldCBsYWJlbHM9e1snaW5kZXgnLCAnaW5wdXQnLCAnb3V0cHV0J119Lz5cclxuXHR7L2lmfVxyXG48L2Rpdj5cclxuXHJcbjxzdHlsZT5cclxuXHQuZXhhbXBsZXMtY29udGFpbmVyIHtcclxuXHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuXHRcdGhlaWdodDogY2FsYygxMDB2aCAtIHZhcigtLW5hdi1oKSk7XHJcblx0XHRvdmVyZmxvdzogaGlkZGVuO1xyXG5cdFx0cGFkZGluZzogMCAwIDQycHggMDtcclxuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcblx0fVxyXG5cclxuXHQudmlld3BvcnQge1xyXG5cdFx0ZGlzcGxheTogZ3JpZDtcclxuXHRcdHdpZHRoOiAzMDAlO1xyXG5cdFx0aGVpZ2h0OiAxMDAlO1xyXG5cdFx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAzMy4zMzMlIDY2LjY2NiU7XHJcblx0XHR0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gLjNzO1xyXG5cdFx0Z3JpZC1hdXRvLXJvd3M6IDEwMCU7XHJcblx0fVxyXG5cclxuXHQucmVwbC1jb250YWluZXIubG9hZGluZyB7XHJcblx0XHRvcGFjaXR5OiAwLjY7XHJcblx0fVxyXG5cclxuXHQvKiB0ZW1wIGZpeCBmb3IgIzI0OTkgYW5kICMyNTUwIHdoaWxlIHdhaXRpbmcgZm9yIGEgZml4IGZvciBodHRwczovL2dpdGh1Yi5jb20vc3ZlbHRlanMvc3ZlbHRlLXJlcGwvaXNzdWVzLzggKi9cclxuXHJcblx0LnJlcGwtY29udGFpbmVyIDpnbG9iYWwoLnRhYi1jb250ZW50KSxcclxuXHQucmVwbC1jb250YWluZXIgOmdsb2JhbCgudGFiLWNvbnRlbnQudmlzaWJsZSkge1xyXG5cdFx0cG9pbnRlci1ldmVudHM6IGFsbDtcclxuXHRcdG9wYWNpdHk6IDE7XHJcblx0fVxyXG5cdC5yZXBsLWNvbnRhaW5lciA6Z2xvYmFsKC50YWItY29udGVudCkge1xyXG5cdFx0dmlzaWJpbGl0eTogaGlkZGVuO1xyXG5cdH1cclxuXHQucmVwbC1jb250YWluZXIgOmdsb2JhbCgudGFiLWNvbnRlbnQudmlzaWJsZSkge1xyXG5cdFx0dmlzaWJpbGl0eTogdmlzaWJsZTtcclxuXHR9XHJcblxyXG5cdC5vZmZzZXQtMSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlKC0zMy4zMzMlLCAwKTsgfVxyXG5cdC5vZmZzZXQtMiB7IHRyYW5zZm9ybTogdHJhbnNsYXRlKC02Ni42NjYlLCAwKTsgfVxyXG5cclxuXHRAbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcclxuXHRcdC5leGFtcGxlcy1jb250YWluZXIgeyBwYWRkaW5nOiAwIH1cclxuXHJcblx0XHQudmlld3BvcnQge1xyXG5cdFx0XHR3aWR0aDogMTAwJTtcclxuXHRcdFx0aGVpZ2h0OiAxMDAlO1xyXG5cdFx0XHRkaXNwbGF5OiBncmlkO1xyXG5cdFx0XHRncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHZhcigtLXNpZGViYXItbWlkLXcpIGF1dG87XHJcblx0XHRcdGdyaWQtYXV0by1yb3dzOiAxMDAlO1xyXG5cdFx0XHR0cmFuc2l0aW9uOiBub25lO1xyXG5cdFx0fVxyXG5cclxuXHRcdC5vZmZzZXQtMSwgLm9mZnNldC0yIHsgdHJhbnNmb3JtOiBub25lOyB9XHJcblx0fVxyXG48L3N0eWxlPlxyXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29EQTZHcUIsT0FBTyxDQUFDLElBQUk7Ozs7Ozs7Ozs7OzRFQUFaLE9BQU8sQ0FBQyxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozt5RUFIcEIsT0FBTyxDQUFDLEtBQUs7O3FCQUVoQixPQUFPLENBQUMsSUFBSSxTQUFLLGNBQWM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztpREFMNUIsT0FBTyxDQUFDLEtBQUs7cUVBQ08sT0FBTyxDQUFDLElBQUk7Ozt3REFQdkIsT0FBTyxDQUFDLElBQUk7O2lDQUVkLE9BQU8sQ0FBQyxJQUFJLFNBQUssY0FBYztrQ0FDOUIsU0FBUzs7O21DQU5YLE9BQU8sQ0FBQyxJQUFJLFNBQUssY0FBYztvQ0FDOUIsU0FBUzs7Ozs7Ozs7Ozs7Ozs7Ozt5RUFRaEIsT0FBTyxDQUFDLEtBQUs7Ozs7NkZBQ08sT0FBTyxDQUFDLElBQUk7Ozs7MERBRWhDLE9BQU8sQ0FBQyxLQUFLOzs7O2dGQVRKLE9BQU8sQ0FBQyxJQUFJOzs7OztrQ0FFZCxPQUFPLENBQUMsSUFBSSxTQUFLLGNBQWM7Ozs7bUNBQzlCLFNBQVM7OztXQVFwQixPQUFPLENBQUMsSUFBSSxTQUFLLGNBQWM7Ozs7Ozs7Ozs7Ozs7O29DQWR0QixPQUFPLENBQUMsSUFBSSxTQUFLLGNBQWM7Ozs7cUNBQzlCLFNBQVM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs4QkFORyxPQUFPLENBQUMsS0FBSzs7d0JBRW5DLE9BQU8sQ0FBQyxRQUFROzs7O2tDQUFyQjs7Ozs7Ozs7Ozs7bUNBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7bUNBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7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
