import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, e as element, l as space, E as text, c as claim_element, a as children, b as detach_dev, p as claim_space, F as claim_text, f as attr_dev, h as add_location, P as HtmlTag, k as append_dev, j as insert_dev, H as set_data_dev, n as noop } from './index.b2dd6920.js';

/* src\routes\blog\[slug].svelte generated by Svelte v3.12.0 */

const file = "src\\routes\\blog\\[slug].svelte";

function create_fragment(ctx) {
	var title_value, meta0, meta0_content_value, meta1, meta1_content_value, meta2, meta2_content_value, t0, article, h1, t1_value = ctx.post.metadata.title + "", t1, t2, p0, t3_value = ctx.post.metadata.description + "", t3, t4, p1, a, t5_value = ctx.post.metadata.author + "", t5, a_href_value, t6, time, t7_value = ctx.post.metadata.dateString + "", t7, time_datetime_value, t8, html_tag, raw_value = ctx.post.html + "";

	document.title = title_value = ctx.post.metadata.title;

	const block = {
		c: function create() {
			meta0 = element("meta");
			meta1 = element("meta");
			meta2 = element("meta");
			t0 = space();
			article = element("article");
			h1 = element("h1");
			t1 = text(t1_value);
			t2 = space();
			p0 = element("p");
			t3 = text(t3_value);
			t4 = space();
			p1 = element("p");
			a = element("a");
			t5 = text(t5_value);
			t6 = space();
			time = element("time");
			t7 = text(t7_value);
			t8 = space();
			this.h();
		},

		l: function claim(nodes) {
			meta0 = claim_element(nodes, "META", { name: true, content: true }, false);
			var meta0_nodes = children(meta0);

			meta0_nodes.forEach(detach_dev);

			meta1 = claim_element(nodes, "META", { name: true, content: true }, false);
			var meta1_nodes = children(meta1);

			meta1_nodes.forEach(detach_dev);

			meta2 = claim_element(nodes, "META", { name: true, content: true }, false);
			var meta2_nodes = children(meta2);

			meta2_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);

			article = claim_element(nodes, "ARTICLE", { class: true }, false);
			var article_nodes = children(article);

			h1 = claim_element(article_nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t1 = claim_text(h1_nodes, t1_value);
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(article_nodes);

			p0 = claim_element(article_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t3 = claim_text(p0_nodes, t3_value);
			p0_nodes.forEach(detach_dev);
			t4 = claim_space(article_nodes);

			p1 = claim_element(article_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			a = claim_element(p1_nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t5 = claim_text(a_nodes, t5_value);
			a_nodes.forEach(detach_dev);
			t6 = claim_space(p1_nodes);

			time = claim_element(p1_nodes, "TIME", { datetime: true }, false);
			var time_nodes = children(time);

			t7 = claim_text(time_nodes, t7_value);
			time_nodes.forEach(detach_dev);
			p1_nodes.forEach(detach_dev);
			t8 = claim_space(article_nodes);
			article_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(meta0, "name", "twitter:title");
			attr_dev(meta0, "content", meta0_content_value = ctx.post.metadata.title);
			add_location(meta0, file, 14, 1, 314);
			attr_dev(meta1, "name", "twitter:description");
			attr_dev(meta1, "content", meta1_content_value = ctx.post.metadata.description);
			add_location(meta1, file, 15, 1, 373);
			attr_dev(meta2, "name", "Description");
			attr_dev(meta2, "content", meta2_content_value = ctx.post.metadata.description);
			add_location(meta2, file, 16, 1, 444);
			attr_dev(h1, "class", "svelte-s4jvel");
			add_location(h1, file, 20, 1, 554);
			attr_dev(p0, "class", "standfirst svelte-s4jvel");
			add_location(p0, file, 21, 1, 586);
			attr_dev(a, "href", a_href_value = ctx.post.metadata.authorURL);
			attr_dev(a, "class", "svelte-s4jvel");
			add_location(a, file, 23, 19, 660);
			attr_dev(time, "datetime", time_datetime_value = ctx.post.metadata.pubdate);
			add_location(time, file, 23, 82, 723);
			attr_dev(p1, "class", "byline svelte-s4jvel");
			add_location(p1, file, 23, 1, 642);
			html_tag = new HtmlTag(raw_value, null);
			attr_dev(article, "class", "post listify svelte-s4jvel");
			add_location(article, file, 19, 0, 522);
		},

		m: function mount(target, anchor) {
			append_dev(document.head, meta0);
			append_dev(document.head, meta1);
			append_dev(document.head, meta2);
			insert_dev(target, t0, anchor);
			insert_dev(target, article, anchor);
			append_dev(article, h1);
			append_dev(h1, t1);
			append_dev(article, t2);
			append_dev(article, p0);
			append_dev(p0, t3);
			append_dev(article, t4);
			append_dev(article, p1);
			append_dev(p1, a);
			append_dev(a, t5);
			append_dev(p1, t6);
			append_dev(p1, time);
			append_dev(time, t7);
			append_dev(article, t8);
			html_tag.m(article);
		},

		p: function update(changed, ctx) {
			if ((changed.post) && title_value !== (title_value = ctx.post.metadata.title)) {
				document.title = title_value;
			}

			if ((changed.post) && meta0_content_value !== (meta0_content_value = ctx.post.metadata.title)) {
				attr_dev(meta0, "content", meta0_content_value);
			}

			if ((changed.post) && meta1_content_value !== (meta1_content_value = ctx.post.metadata.description)) {
				attr_dev(meta1, "content", meta1_content_value);
			}

			if ((changed.post) && meta2_content_value !== (meta2_content_value = ctx.post.metadata.description)) {
				attr_dev(meta2, "content", meta2_content_value);
			}

			if ((changed.post) && t1_value !== (t1_value = ctx.post.metadata.title + "")) {
				set_data_dev(t1, t1_value);
			}

			if ((changed.post) && t3_value !== (t3_value = ctx.post.metadata.description + "")) {
				set_data_dev(t3, t3_value);
			}

			if ((changed.post) && t5_value !== (t5_value = ctx.post.metadata.author + "")) {
				set_data_dev(t5, t5_value);
			}

			if ((changed.post) && a_href_value !== (a_href_value = ctx.post.metadata.authorURL)) {
				attr_dev(a, "href", a_href_value);
			}

			if ((changed.post) && t7_value !== (t7_value = ctx.post.metadata.dateString + "")) {
				set_data_dev(t7, t7_value);
			}

			if ((changed.post) && time_datetime_value !== (time_datetime_value = ctx.post.metadata.pubdate)) {
				attr_dev(time, "datetime", time_datetime_value);
			}

			if ((changed.post) && raw_value !== (raw_value = ctx.post.html + "")) {
				html_tag.p(raw_value);
			}
		},

		i: noop,
		o: noop,

		d: function destroy(detaching) {
			detach_dev(meta0);
			detach_dev(meta1);
			detach_dev(meta2);

			if (detaching) {
				detach_dev(t0);
				detach_dev(article);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment.name, type: "component", source: "", ctx });
	return block;
}

async function preload({ params }) {
	const res = await this.fetch(`blog/${params.slug}.json`);
	return res.ok ? { post: await res.json() } : this.error(404, 'Not found');
}

function instance($$self, $$props, $$invalidate) {
	let { post } = $$props;

	const writable_props = ['post'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<Slug> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('post' in $$props) $$invalidate('post', post = $$props.post);
	};

	$$self.$capture_state = () => {
		return { post };
	};

	$$self.$inject_state = $$props => {
		if ('post' in $$props) $$invalidate('post', post = $$props.post);
	};

	return { post };
}

class Slug extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["post"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Slug", options, id: create_fragment.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.post === undefined && !('post' in props)) {
			console.warn("<Slug> was created without expected prop 'post'");
		}
	}

	get post() {
		throw new Error("<Slug>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set post(value) {
		throw new Error("<Slug>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Slug;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiW3NsdWddLjU3MTllOGNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL2Jsb2cvW3NsdWddLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cblx0ZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZWxvYWQoeyBwYXJhbXMgfSkge1xuXHRcdGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuZmV0Y2goYGJsb2cvJHtwYXJhbXMuc2x1Z30uanNvbmApO1xuXHRcdHJldHVybiByZXMub2sgPyB7IHBvc3Q6IGF3YWl0IHJlcy5qc29uKCkgfSA6IHRoaXMuZXJyb3IoNDA0LCAnTm90IGZvdW5kJyk7XG5cdH1cbjwvc2NyaXB0PlxuXG48c2NyaXB0PlxuXHRleHBvcnQgbGV0IHBvc3Q7XG48L3NjcmlwdD5cblxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+e3Bvc3QubWV0YWRhdGEudGl0bGV9PC90aXRsZT5cblxuXHQ8bWV0YSBuYW1lPVwidHdpdHRlcjp0aXRsZVwiIGNvbnRlbnQ9e3Bvc3QubWV0YWRhdGEudGl0bGV9PlxuXHQ8bWV0YSBuYW1lPVwidHdpdHRlcjpkZXNjcmlwdGlvblwiIGNvbnRlbnQ9e3Bvc3QubWV0YWRhdGEuZGVzY3JpcHRpb259PlxuXHQ8bWV0YSBuYW1lPVwiRGVzY3JpcHRpb25cIiBjb250ZW50PXtwb3N0Lm1ldGFkYXRhLmRlc2NyaXB0aW9ufT5cbjwvc3ZlbHRlOmhlYWQ+XG5cbjxhcnRpY2xlIGNsYXNzPSdwb3N0IGxpc3RpZnknPlxuXHQ8aDE+e3Bvc3QubWV0YWRhdGEudGl0bGV9PC9oMT5cblx0PHAgY2xhc3M9J3N0YW5kZmlyc3QnPntwb3N0Lm1ldGFkYXRhLmRlc2NyaXB0aW9ufTwvcD5cblxuXHQ8cCBjbGFzcz0nYnlsaW5lJz48YSBocmVmPSd7cG9zdC5tZXRhZGF0YS5hdXRob3JVUkx9Jz57cG9zdC5tZXRhZGF0YS5hdXRob3J9PC9hPiA8dGltZSBkYXRldGltZT0ne3Bvc3QubWV0YWRhdGEucHViZGF0ZX0nPntwb3N0Lm1ldGFkYXRhLmRhdGVTdHJpbmd9PC90aW1lPjwvcD5cblxuXHR7QGh0bWwgcG9zdC5odG1sfVxuPC9hcnRpY2xlPlxuXG48c3R5bGU+XG5cdC5wb3N0IHtcblx0XHRwYWRkaW5nOiB2YXIoLS10b3Atb2Zmc2V0KSB2YXIoLS1zaWRlLW5hdikgNnJlbSB2YXIoLS1zaWRlLW5hdik7XG5cdFx0bWF4LXdpZHRoOiB2YXIoLS1tYWluLXdpZHRoKTtcblx0XHRtYXJnaW46IDAgYXV0bztcblx0fVxuXG5cdGgxIHtcblx0XHRmb250LXNpemU6IDRyZW07XG5cdFx0Zm9udC13ZWlnaHQ6IDQwMDtcblx0fVxuXG5cdC5zdGFuZGZpcnN0IHtcblx0XHRmb250LXNpemU6IHZhcigtLWg0KTtcblx0XHRjb2xvcjogdmFyKC0tc2Vjb25kKTtcblx0XHRtYXJnaW46IDAgMCAxZW0gMDtcblx0fVxuXG5cdC5ieWxpbmUge1xuXHRcdG1hcmdpbjogMCAwIDZyZW0gMDtcblx0XHRwYWRkaW5nOiAxLjZyZW0gMCAwIDA7XG5cdFx0Ym9yZGVyLXRvcDogdmFyKC0tYm9yZGVyLXcpIHNvbGlkICM2NzY3Nzg1Yjtcblx0XHRmb250LXNpemU6IHZhcigtLWg2KTtcblx0XHR0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuXHR9XG5cblx0LmJ5bGluZSBhIHtcblx0XHQvKiBib3JkZXItYm90dG9tOiBub25lOyAqL1xuXHRcdC8qIGZvbnQtd2VpZ2h0OiA2MDA7ICovXG5cdH1cblxuXHQuYnlsaW5lIGE6aG92ZXIge1xuXHRcdC8qIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCB2YXIoLS1wcmltZSk7ICovXG5cdH1cblxuXHQucG9zdCBoMSB7XG5cdFx0Y29sb3I6IHZhcigtLXNlY29uZCk7XG5cdFx0bWF4LXdpZHRoOiAyMGVtO1xuXHRcdG1hcmdpbjogMCAwIC44cmVtIDA7XG5cdH1cblxuXHQucG9zdCA6Z2xvYmFsKGgyKSB7XG5cdFx0bWFyZ2luOiAyZW0gMCAwLjVlbSAwO1xuXHRcdC8qIGNvbG9yOiB2YXIoLS1zZWNvbmQpOyAqL1xuXHRcdGNvbG9yOiB2YXIoLS10ZXh0KTtcblx0XHRmb250LXNpemU6IHZhcigtLWgzKTtcblx0XHRmb250LXdlaWdodDogMzAwO1xuXHR9XG5cblx0LnBvc3QgOmdsb2JhbChmaWd1cmUpIHtcblx0XHRtYXJnaW46IDEuNnJlbSAwIDMuMnJlbSAwO1xuXHR9XG5cblx0LnBvc3QgOmdsb2JhbChmaWd1cmUpIDpnbG9iYWwoaW1nKSB7XG5cdFx0bWF4LXdpZHRoOiAxMDAlO1xuXHR9XG5cblx0LnBvc3QgOmdsb2JhbChmaWdjYXB0aW9uKSB7XG5cdFx0Y29sb3I6IHZhcigtLXNlY29uZCk7XG5cdFx0dGV4dC1hbGlnbjogbGVmdDtcblx0fVxuXG5cdC5wb3N0IDpnbG9iYWwodmlkZW8pIHtcblx0XHR3aWR0aDogMTAwJTtcblx0fVxuXG5cdC5wb3N0IDpnbG9iYWwoYmxvY2txdW90ZSkge1xuXHRcdG1heC13aWR0aDogbm9uZTtcblx0XHRib3JkZXItbGVmdDogNHB4IHNvbGlkICNlZWU7XG5cdFx0YmFja2dyb3VuZDogI2Y5ZjlmOTtcblx0XHRib3JkZXItcmFkaXVzOiAwIHZhcigtLWJvcmRlci1yKSB2YXIoLS1ib3JkZXItcikgMDtcblx0fVxuXG5cdC5wb3N0IDpnbG9iYWwoY29kZSkge1xuXHRcdHBhZGRpbmc6IC4zcmVtIC44cmVtIC4zcmVtO1xuXHRcdG1hcmdpbjogMCAwLjJyZW07XG5cdFx0dG9wOiAtLjFyZW07XG5cdFx0YmFja2dyb3VuZDogdmFyKC0tYmFjay1hcGkpO1xuXHR9XG5cblx0LnBvc3QgOmdsb2JhbChwcmUpIDpnbG9iYWwoY29kZSkge1xuXHRcdHBhZGRpbmc6IDA7XG5cdFx0bWFyZ2luOiAwO1xuXHRcdHRvcDogMDtcblx0XHRiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcblx0fVxuXG5cdC5wb3N0IDpnbG9iYWwoYXNpZGUpIHtcblx0XHRmbG9hdDogcmlnaHQ7XG5cdFx0bWFyZ2luOiAwIDAgMWVtIDFlbTtcblx0XHR3aWR0aDogMTZyZW07XG5cdFx0Y29sb3I6IHZhcigtLXNlY29uZCk7XG5cdFx0ei1pbmRleDogMjtcblx0fVxuXG5cdC5wb3N0IDpnbG9iYWwoLm1heCkge1xuXHRcdHdpZHRoOiAxMDAlO1xuXHR9XG5cblx0LnBvc3QgOmdsb2JhbChpZnJhbWUpIHtcblx0XHR3aWR0aDogMTAwJTtcblx0XHRoZWlnaHQ6IDQyMHB4O1xuXHRcdG1hcmdpbjogMmVtIDA7XG5cdFx0Ym9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXIpO1xuXHRcdGJvcmRlcjogMC44cmVtIHNvbGlkIHZhcigtLXNlY29uZCk7XG5cdH1cblxuXHQvKiBoZWFkZXJzIGFuY2hvcnMgKi9cblxuXHQucG9zdCA6Z2xvYmFsKC5vZmZzZXQtYW5jaG9yKSB7XG5cdFx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdHRvcDogY2FsYygtMSAqICh2YXIoLS1uYXYtaCkgKyB2YXIoLS10b3Atb2Zmc2V0KSAtIDFyZW0pKTtcblx0XHR3aWR0aDogMDtcblx0XHRoZWlnaHQ6IDA7XG5cdH1cblxuXHQucG9zdCA6Z2xvYmFsKC5hbmNob3IpIHtcblx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0YmFja2dyb3VuZDogdXJsKC9pY29ucy9saW5rLnN2ZykgMCA1MCUgbm8tcmVwZWF0O1xuXHRcdGJhY2tncm91bmQtc2l6ZTogMWVtIDFlbTtcblx0XHR3aWR0aDogMS40ZW07XG5cdFx0aGVpZ2h0OiAxZW07XG5cdFx0dG9wOiBjYWxjKCh2YXIoLS1oMykgLSAyNHB4KSAvIDIpO1xuXHRcdGxlZnQ6IC0xLjRlbTtcblx0XHRvcGFjaXR5OiAwO1xuXHRcdHRyYW5zaXRpb246IG9wYWNpdHkgMC4ycztcblx0XHRib3JkZXI6IG5vbmUgIWltcG9ydGFudDsgLyogVE9ETyBnZXQgcmlkIG9mIGxpbmtpZnkgKi9cblx0fVxuXG5cdC5wb3N0IDpnbG9iYWwoaDIpOmhvdmVyIDpnbG9iYWwoLmFuY2hvciksXG5cdC5wb3N0IDpnbG9iYWwoaDMpOmhvdmVyIDpnbG9iYWwoLmFuY2hvciksXG5cdC5wb3N0IDpnbG9iYWwoaDQpOmhvdmVyIDpnbG9iYWwoLmFuY2hvciksXG5cdC5wb3N0IDpnbG9iYWwoaDUpOmhvdmVyIDpnbG9iYWwoLmFuY2hvciksXG5cdC5wb3N0IDpnbG9iYWwoaDYpOmhvdmVyIDpnbG9iYWwoLmFuY2hvcikge1xuXHRcdG9wYWNpdHk6IDE7XG5cdH1cblxuXG5cdEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuXHRcdC5wb3N0IDpnbG9iYWwoLmFuY2hvcikge1xuXHRcdFx0dHJhbnNmb3JtOiBzY2FsZSgwLjYpO1xuXHRcdFx0b3BhY2l0eTogMTtcblx0XHRcdHRvcDogY2FsYygoMWVtIC0gMC42ICogMjRweCkgLyAyKTtcblx0XHRcdGxlZnQ6IC0xLjBlbTtcblx0XHR9XG5cdH1cblxuXHRAbWVkaWEgKG1pbi13aWR0aDogOTEwcHgpIHtcblx0XHQucG9zdCA6Z2xvYmFsKC5tYXgpIHtcblx0XHRcdHdpZHRoOiBjYWxjKDEwMHZ3IC0gMiAqIHZhcigtLXNpZGUtbmF2KSk7XG5cdFx0XHRtYXJnaW46IDAgY2FsYyh2YXIoLS1tYWluLXdpZHRoKSAvIDIgLSA1MHZ3KTtcblx0XHRcdHRleHQtYWxpZ246IGNlbnRlcjtcblx0XHR9XG5cblx0XHQucG9zdCA6Z2xvYmFsKC5tYXgpID4gOmdsb2JhbCgqKSB7XG5cdFx0XHR3aWR0aDogMTAwJTtcblx0XHRcdG1heC13aWR0aDogMTIwMHB4O1xuXHRcdH1cblxuXHRcdC5wb3N0IDpnbG9iYWwoaWZyYW1lKSB7XG5cdFx0XHR3aWR0aDogMTAwJTtcblx0XHRcdG1heC13aWR0aDogMTEwMHB4O1xuXHRcdFx0bWFyZ2luOiAyZW0gYXV0bztcblx0XHR9XG5cdH1cblxuXHQvKiBAbWVkaWEgKG1pbi13aWR0aDogMTQ2MHB4KSB7XG5cdFx0LnBvc3QgOmdsb2JhbChpZnJhbWUpIHtcblx0XHRcdHdpZHRoOiAxMzYwcHg7XG5cdFx0XHRtYXJnaW46IDJlbSAtMjgwcHg7XG5cdFx0fVxuXHR9XG5cblx0QG1lZGlhIChtaW4taGVpZ2h0OiA4MDBweCkge1xuXHRcdC5wb3N0IDpnbG9iYWwoaWZyYW1lKSB7XG5cdFx0XHRoZWlnaHQ6IDY0MHB4O1xuXHRcdH1cblx0fSAqL1xuPC9zdHlsZT5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O3NJQW9CTSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssa0NBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLHFDQUVPLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxrREFBZ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLDhEQUU1SSxJQUFJLENBQUMsSUFBSTs7b0NBYlIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3dEQUVTLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSzs7O3dEQUNiLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVzs7O3dEQUNqQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVc7Ozs7OzswQ0FPL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTOzs7d0RBQStDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NERBWC9HLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSzs7Ozs0RUFFUyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUs7Ozs7NEVBQ2IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXOzs7OzRFQUNqQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVc7Ozs7c0RBSXRELElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSzs7OztzREFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVc7Ozs7c0RBRU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNOzs7OzhEQUEvQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVM7Ozs7c0RBQXdFLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVTs7Ozs0RUFBakQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPOzs7O3dEQUVoSCxJQUFJLENBQUMsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF4QlQsZUFBZSxPQUFPLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRTtDQUN6QyxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0NBQ3pELE9BQU8sR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0NBQzFFOzs7Q0FJTSxNQUFJLGdCQUFJLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
