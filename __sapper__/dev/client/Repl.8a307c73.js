import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, q as create_slot, e as element, c as claim_element, a as children, b as detach_dev, f as attr_dev, h as add_location, j as insert_dev, l as space, m as empty, p as claim_space, W as add_render_callback, k as append_dev, X as add_resize_listener, C as get_slot_changes, D as get_slot_context, x as transition_in, y as transition_out, V as binding_callbacks, Y as createEventDispatcher, G as globals, L as getContext, Z as subscribe, v as validate_store, r as component_subscribe, M as svg_element, T as listen_dev, R as destroy_each, U as run_all, Q as toggle_class, n as noop, u as set_store_value, E as text, F as claim_text, H as set_data_dev, _ as set_input_value, A as group_outros, B as check_outros, $ as create_in_transition, a0 as create_out_transition, o as onMount, g as set_style, w as mount_component, z as destroy_component, a1 as prop_dev, a2 as now, a3 as loop, a4 as bind, a5 as add_flush_callback, t as setContext, a6 as null_to_empty, a7 as stop_propagation } from './index.b2dd6920.js';
import { w as writable } from './index.ea650d67.js';

function clamp(num, min, max) {
    return num < min ? min : num > max ? max : num;
}

/* node_modules\@sveltejs\svelte-repl\src\SplitPane.svelte generated by Svelte v3.12.0 */

const file = "node_modules\\@sveltejs\\svelte-repl\\src\\SplitPane.svelte";

const get_b_slot_changes = () => ({});
const get_b_slot_context = () => ({});

const get_a_slot_changes = () => ({});
const get_a_slot_context = () => ({});

// (161:1) {#if !fixed}
function create_if_block_1(ctx) {
	var div, div_class_value, div_style_value, drag_action;

	const block = {
		c: function create() {
			div = element("div");
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true }, false);
			var div_nodes = children(div);

			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(div, "class", div_class_value = "" + ctx.type + " divider" + " svelte-1k0d9r4");
			attr_dev(div, "style", div_style_value = "" + ctx.side + ": calc(" + ctx.pos + "% - 8px)");
			add_location(div, file, 161, 2, 2754);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			drag_action = ctx.drag.call(null, div, ctx.setPos) || {};
		},

		p: function update(changed, ctx) {
			if ((changed.type) && div_class_value !== (div_class_value = "" + ctx.type + " divider" + " svelte-1k0d9r4")) {
				attr_dev(div, "class", div_class_value);
			}

			if ((changed.side || changed.pos) && div_style_value !== (div_style_value = "" + ctx.side + ": calc(" + ctx.pos + "% - 8px)")) {
				attr_dev(div, "style", div_style_value);
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			if (drag_action && typeof drag_action.destroy === 'function') drag_action.destroy();
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_1.name, type: "if", source: "(161:1) {#if !fixed}", ctx });
	return block;
}

// (166:0) {#if dragging}
function create_if_block(ctx) {
	var div;

	const block = {
		c: function create() {
			div = element("div");
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(div, "class", "mousecatcher svelte-1k0d9r4");
			add_location(div, file, 166, 1, 2873);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block.name, type: "if", source: "(166:0) {#if dragging}", ctx });
	return block;
}

function create_fragment(ctx) {
	var div2, div0, div0_style_value, t0, div1, div1_style_value, t1, div2_resize_listener, t2, if_block1_anchor, current;

	const a_slot_template = ctx.$$slots.a;
	const a_slot = create_slot(a_slot_template, ctx, get_a_slot_context);

	const b_slot_template = ctx.$$slots.b;
	const b_slot = create_slot(b_slot_template, ctx, get_b_slot_context);

	var if_block0 = (!ctx.fixed) && create_if_block_1(ctx);

	var if_block1 = (ctx.dragging) && create_if_block(ctx);

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");

			if (a_slot) a_slot.c();
			t0 = space();
			div1 = element("div");

			if (b_slot) b_slot.c();
			t1 = space();
			if (if_block0) if_block0.c();
			t2 = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
			this.h();
		},

		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true }, false);
			var div2_nodes = children(div2);

			div0 = claim_element(div2_nodes, "DIV", { class: true, style: true }, false);
			var div0_nodes = children(div0);

			if (a_slot) a_slot.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(div2_nodes);

			div1 = claim_element(div2_nodes, "DIV", { class: true, style: true }, false);
			var div1_nodes = children(div1);

			if (b_slot) b_slot.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			t1 = claim_space(div2_nodes);
			if (if_block0) if_block0.l(div2_nodes);
			div2_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			if_block1_anchor = empty();
			this.h();
		},

		h: function hydrate() {
			attr_dev(div0, "class", "pane svelte-1k0d9r4");
			attr_dev(div0, "style", div0_style_value = "" + ctx.dimension + ": " + ctx.pos + "%;");
			add_location(div0, file, 152, 1, 2565);

			attr_dev(div1, "class", "pane svelte-1k0d9r4");
			attr_dev(div1, "style", div1_style_value = "" + ctx.dimension + ": " + (100 - (ctx.pos)) + "%;");
			add_location(div1, file, 156, 1, 2648);
			add_render_callback(() => ctx.div2_resize_handler.call(div2));
			attr_dev(div2, "class", "container svelte-1k0d9r4");
			add_location(div2, file, 151, 0, 2470);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);

			if (a_slot) {
				a_slot.m(div0, null);
			}

			append_dev(div2, t0);
			append_dev(div2, div1);

			if (b_slot) {
				b_slot.m(div1, null);
			}

			append_dev(div2, t1);
			if (if_block0) if_block0.m(div2, null);
			div2_resize_listener = add_resize_listener(div2, ctx.div2_resize_handler.bind(div2));
			ctx.div2_binding(div2);
			insert_dev(target, t2, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, if_block1_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			if (a_slot && a_slot.p && changed.$$scope) {
				a_slot.p(
					get_slot_changes(a_slot_template, ctx, changed, get_a_slot_changes),
					get_slot_context(a_slot_template, ctx, get_a_slot_context)
				);
			}

			if ((!current || changed.dimension || changed.pos) && div0_style_value !== (div0_style_value = "" + ctx.dimension + ": " + ctx.pos + "%;")) {
				attr_dev(div0, "style", div0_style_value);
			}

			if (b_slot && b_slot.p && changed.$$scope) {
				b_slot.p(
					get_slot_changes(b_slot_template, ctx, changed, get_b_slot_changes),
					get_slot_context(b_slot_template, ctx, get_b_slot_context)
				);
			}

			if ((!current || changed.dimension || changed.pos) && div1_style_value !== (div1_style_value = "" + ctx.dimension + ": " + (100 - (ctx.pos)) + "%;")) {
				attr_dev(div1, "style", div1_style_value);
			}

			if (!ctx.fixed) {
				if (if_block0) {
					if_block0.p(changed, ctx);
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(div2, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (ctx.dragging) {
				if (!if_block1) {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(a_slot, local);
			transition_in(b_slot, local);
			current = true;
		},

		o: function outro(local) {
			transition_out(a_slot, local);
			transition_out(b_slot, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div2);
			}

			if (a_slot) a_slot.d(detaching);

			if (b_slot) b_slot.d(detaching);
			if (if_block0) if_block0.d();
			div2_resize_listener.cancel();
			ctx.div2_binding(null);

			if (detaching) {
				detach_dev(t2);
			}

			if (if_block1) if_block1.d(detaching);

			if (detaching) {
				detach_dev(if_block1_anchor);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment.name, type: "component", source: "", ctx });
	return block;
}

function instance($$self, $$props, $$invalidate) {
	

	const dispatch = createEventDispatcher();

	let { type, pos = 50, fixed = false, buffer = 40, min, max } = $$props;

	let w;
	let h;

	const refs = {};

	let dragging = false;

	function setPos(event) {
		const { top, left } = refs.container.getBoundingClientRect();

		const px = type === 'vertical'
			? (event.clientY - top)
			: (event.clientX - left);

		$$invalidate('pos', pos = 100 * px / size);
		dispatch('change');
	}

	function drag(node, callback) {
		const mousedown = event => {
			if (event.which !== 1) return;

			event.preventDefault();

			$$invalidate('dragging', dragging = true);

			const onmouseup = () => {
				$$invalidate('dragging', dragging = false);

				window.removeEventListener('mousemove', callback, false);
				window.removeEventListener('mouseup', onmouseup, false);
			};

			window.addEventListener('mousemove', callback, false);
			window.addEventListener('mouseup', onmouseup, false);
		};

		node.addEventListener('mousedown', mousedown, false);

		return {
			destroy() {
				node.removeEventListener('mousedown', onmousedown, false);
			}
		};
	}

	const writable_props = ['type', 'pos', 'fixed', 'buffer', 'min', 'max'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<SplitPane> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;

	function div2_resize_handler() {
		w = this.clientWidth;
		h = this.clientHeight;
		$$invalidate('w', w);
		$$invalidate('h', h);
	}

	function div2_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			refs.container = $$value;
			$$invalidate('refs', refs);
		});
	}

	$$self.$set = $$props => {
		if ('type' in $$props) $$invalidate('type', type = $$props.type);
		if ('pos' in $$props) $$invalidate('pos', pos = $$props.pos);
		if ('fixed' in $$props) $$invalidate('fixed', fixed = $$props.fixed);
		if ('buffer' in $$props) $$invalidate('buffer', buffer = $$props.buffer);
		if ('min' in $$props) $$invalidate('min', min = $$props.min);
		if ('max' in $$props) $$invalidate('max', max = $$props.max);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => {
		return { type, pos, fixed, buffer, min, max, w, h, dragging, size, side, dimension };
	};

	$$self.$inject_state = $$props => {
		if ('type' in $$props) $$invalidate('type', type = $$props.type);
		if ('pos' in $$props) $$invalidate('pos', pos = $$props.pos);
		if ('fixed' in $$props) $$invalidate('fixed', fixed = $$props.fixed);
		if ('buffer' in $$props) $$invalidate('buffer', buffer = $$props.buffer);
		if ('min' in $$props) $$invalidate('min', min = $$props.min);
		if ('max' in $$props) $$invalidate('max', max = $$props.max);
		if ('w' in $$props) $$invalidate('w', w = $$props.w);
		if ('h' in $$props) $$invalidate('h', h = $$props.h);
		if ('dragging' in $$props) $$invalidate('dragging', dragging = $$props.dragging);
		if ('size' in $$props) $$invalidate('size', size = $$props.size);
		if ('side' in $$props) $$invalidate('side', side = $$props.side);
		if ('dimension' in $$props) $$invalidate('dimension', dimension = $$props.dimension);
	};

	let size, side, dimension;

	$$self.$$.update = ($$dirty = { type: 1, h: 1, w: 1, buffer: 1, size: 1, min: 1, pos: 1, max: 1 }) => {
		if ($$dirty.type || $$dirty.h || $$dirty.w) { $$invalidate('size', size = type === 'vertical' ? h : w); }
		if ($$dirty.buffer || $$dirty.size) { $$invalidate('min', min = 100 * (buffer / size)); }
		if ($$dirty.min) { $$invalidate('max', max = 100 - min); }
		if ($$dirty.pos || $$dirty.min || $$dirty.max) { $$invalidate('pos', pos = clamp(pos, min, max)); }
		if ($$dirty.type) { $$invalidate('side', side = type === 'horizontal' ? 'left' : 'top'); }
		if ($$dirty.type) { $$invalidate('dimension', dimension = type === 'horizontal' ? 'width' : 'height'); }
	};

	return {
		type,
		pos,
		fixed,
		buffer,
		min,
		max,
		w,
		h,
		refs,
		dragging,
		setPos,
		drag,
		side,
		dimension,
		div2_resize_handler,
		div2_binding,
		$$slots,
		$$scope
	};
}

class SplitPane extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["type", "pos", "fixed", "buffer", "min", "max"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "SplitPane", options, id: create_fragment.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.type === undefined && !('type' in props)) {
			console.warn("<SplitPane> was created without expected prop 'type'");
		}
		if (ctx.min === undefined && !('min' in props)) {
			console.warn("<SplitPane> was created without expected prop 'min'");
		}
		if (ctx.max === undefined && !('max' in props)) {
			console.warn("<SplitPane> was created without expected prop 'max'");
		}
	}

	get type() {
		throw new Error("<SplitPane>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<SplitPane>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get pos() {
		throw new Error("<SplitPane>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set pos(value) {
		throw new Error("<SplitPane>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get fixed() {
		throw new Error("<SplitPane>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set fixed(value) {
		throw new Error("<SplitPane>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get buffer() {
		throw new Error("<SplitPane>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set buffer(value) {
		throw new Error("<SplitPane>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get min() {
		throw new Error("<SplitPane>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set min(value) {
		throw new Error("<SplitPane>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get max() {
		throw new Error("<SplitPane>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set max(value) {
		throw new Error("<SplitPane>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\@sveltejs\svelte-repl\src\Input\ComponentSelector.svelte generated by Svelte v3.12.0 */
const { console: console_1 } = globals;

const file$1 = "node_modules\\@sveltejs\\svelte-repl\\src\\Input\\ComponentSelector.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.component = list[i];
	child_ctx.index = i;
	return child_ctx;
}

// (213:1) {#if $components.length}
function create_if_block$1(ctx) {
	var div, t, button, svg, line0, line1, dispose;

	let each_value = ctx.$components;

	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			button = element("button");
			svg = svg_element("svg");
			line0 = svg_element("line");
			line1 = svg_element("line");
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			t = claim_space(div_nodes);

			button = claim_element(div_nodes, "BUTTON", { class: true, title: true }, false);
			var button_nodes = children(button);

			svg = claim_element(button_nodes, "svg", { width: true, height: true, viewBox: true, class: true }, true);
			var svg_nodes = children(svg);

			line0 = claim_element(svg_nodes, "line", { stroke: true, x1: true, y1: true, x2: true, y2: true }, true);
			var line0_nodes = children(line0);

			line0_nodes.forEach(detach_dev);

			line1 = claim_element(svg_nodes, "line", { stroke: true, x1: true, y1: true, x2: true, y2: true }, true);
			var line1_nodes = children(line1);

			line1_nodes.forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			button_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(line0, "stroke", "#999");
			attr_dev(line0, "x1", "12");
			attr_dev(line0, "y1", "5");
			attr_dev(line0, "x2", "12");
			attr_dev(line0, "y2", "19");
			add_location(line0, file$1, 263, 5, 5664);
			attr_dev(line1, "stroke", "#999");
			attr_dev(line1, "x1", "5");
			attr_dev(line1, "y1", "12");
			attr_dev(line1, "x2", "19");
			attr_dev(line1, "y2", "12");
			add_location(line1, file$1, 264, 5, 5723);
			attr_dev(svg, "width", "12");
			attr_dev(svg, "height", "12");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "class", "svelte-zab12q");
			add_location(svg, file$1, 262, 4, 5610);
			attr_dev(button, "class", "add-new svelte-zab12q");
			attr_dev(button, "title", "add new component");
			add_location(button, file$1, 261, 3, 5537);
			attr_dev(div, "class", "file-tabs svelte-zab12q");
			add_location(div, file$1, 213, 2, 4077);

			dispose = [
				listen_dev(button, "click", ctx.addNew),
				listen_dev(div, "dblclick", ctx.addNew)
			];
		},

		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			append_dev(div, t);
			append_dev(div, button);
			append_dev(button, svg);
			append_dev(svg, line0);
			append_dev(svg, line1);
		},

		p: function update(changed, ctx) {
			if (changed.$components || changed.$selected || changed.editing || changed.isComponentNameUsed) {
				each_value = ctx.$components;

				let i;
				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, t);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value.length;
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_each(each_blocks, detaching);

			run_all(dispose);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$1.name, type: "if", source: "(213:1) {#if $components.length}", ctx });
	return block;
}

// (242:6) {:else}
function create_else_block(ctx) {
	var div, t0_value = ctx.component.name + "", t0, t1, t2_value = ctx.component.type + "", t2, t3, span, svg, line0, line1, dispose;

	function click_handler() {
		return ctx.click_handler(ctx);
	}

	function click_handler_1() {
		return ctx.click_handler_1(ctx);
	}

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(t0_value);
			t1 = text(".");
			t2 = text(t2_value);
			t3 = space();
			span = element("span");
			svg = svg_element("svg");
			line0 = svg_element("line");
			line1 = svg_element("line");
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, title: true }, false);
			var div_nodes = children(div);

			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_text(div_nodes, ".");
			t2 = claim_text(div_nodes, t2_value);
			div_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);

			span = claim_element(nodes, "SPAN", { class: true }, false);
			var span_nodes = children(span);

			svg = claim_element(span_nodes, "svg", { width: true, height: true, viewBox: true, class: true }, true);
			var svg_nodes = children(svg);

			line0 = claim_element(svg_nodes, "line", { stroke: true, x1: true, y1: true, x2: true, y2: true }, true);
			var line0_nodes = children(line0);

			line0_nodes.forEach(detach_dev);

			line1 = claim_element(svg_nodes, "line", { stroke: true, x1: true, y1: true, x2: true, y2: true }, true);
			var line1_nodes = children(line1);

			line1_nodes.forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			span_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(div, "class", "editable svelte-zab12q");
			attr_dev(div, "title", "edit component name");
			add_location(div, file$1, 242, 7, 5033);
			attr_dev(line0, "stroke", "#999");
			attr_dev(line0, "x1", "18");
			attr_dev(line0, "y1", "6");
			attr_dev(line0, "x2", "6");
			attr_dev(line0, "y2", "18");
			add_location(line0, file$1, 252, 9, 5343);
			attr_dev(line1, "stroke", "#999");
			attr_dev(line1, "x1", "6");
			attr_dev(line1, "y1", "6");
			attr_dev(line1, "x2", "18");
			attr_dev(line1, "y2", "18");
			add_location(line1, file$1, 253, 9, 5405);
			attr_dev(svg, "width", "12");
			attr_dev(svg, "height", "12");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "class", "svelte-zab12q");
			add_location(svg, file$1, 251, 8, 5285);
			attr_dev(span, "class", "remove svelte-zab12q");
			add_location(span, file$1, 250, 7, 5218);

			dispose = [
				listen_dev(div, "click", click_handler),
				listen_dev(span, "click", click_handler_1)
			];
		},

		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);
			append_dev(div, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, span, anchor);
			append_dev(span, svg);
			append_dev(svg, line0);
			append_dev(svg, line1);
		},

		p: function update(changed, new_ctx) {
			ctx = new_ctx;
			if ((changed.$components) && t0_value !== (t0_value = ctx.component.name + "")) {
				set_data_dev(t0, t0_value);
			}

			if ((changed.$components) && t2_value !== (t2_value = ctx.component.type + "")) {
				set_data_dev(t2, t2_value);
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
				detach_dev(t3);
				detach_dev(span);
			}

			run_all(dispose);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block.name, type: "else", source: "(242:6) {:else}", ctx });
	return block;
}

// (229:6) {#if component === editing}
function create_if_block_2(ctx) {
	var span, t0_value = ctx.editing.name + (/\./.test(ctx.editing.name) ? '' : `.${ctx.editing.type}`) + "", t0, t1, input, dispose;

	const block = {
		c: function create() {
			span = element("span");
			t0 = text(t0_value);
			t1 = space();
			input = element("input");
			this.h();
		},

		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true }, false);
			var span_nodes = children(span);

			t0 = claim_text(span_nodes, t0_value);
			span_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);

			input = claim_element(nodes, "INPUT", { autofocus: true, spellcheck: true, class: true }, false);
			var input_nodes = children(input);

			input_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(span, "class", "input-sizer svelte-zab12q");
			add_location(span, file$1, 229, 7, 4555);
			input.autofocus = true;
			attr_dev(input, "spellcheck", false);
			attr_dev(input, "class", "svelte-zab12q");
			toggle_class(input, "duplicate", ctx.isComponentNameUsed(ctx.editing));
			add_location(input, file$1, 232, 7, 4710);

			dispose = [
				listen_dev(input, "input", ctx.input_input_handler),
				listen_dev(input, "focus", selectInput),
				listen_dev(input, "blur", ctx.closeEdit),
				listen_dev(input, "keydown", ctx.keydown_handler)
			];
		},

		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, input, anchor);

			set_input_value(input, ctx.editing.name);

			input.focus();
		},

		p: function update(changed, ctx) {
			if ((changed.editing) && t0_value !== (t0_value = ctx.editing.name + (/\./.test(ctx.editing.name) ? '' : `.${ctx.editing.type}`) + "")) {
				set_data_dev(t0, t0_value);
			}

			if (changed.editing && (input.value !== ctx.editing.name)) set_input_value(input, ctx.editing.name);

			if ((changed.isComponentNameUsed || changed.editing)) {
				toggle_class(input, "duplicate", ctx.isComponentNameUsed(ctx.editing));
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span);
				detach_dev(t1);
				detach_dev(input);
			}

			run_all(dispose);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_2.name, type: "if", source: "(229:6) {#if component === editing}", ctx });
	return block;
}

// (224:5) {#if component.name == 'App' && index === 0}
function create_if_block_1$1(ctx) {
	var div, t;

	const block = {
		c: function create() {
			div = element("div");
			t = text("App.svelte");
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			t = claim_text(div_nodes, "App.svelte");
			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(div, "class", "uneditable svelte-zab12q");
			add_location(div, file$1, 224, 6, 4445);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},

		p: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_1$1.name, type: "if", source: "(224:5) {#if component.name == 'App' && index === 0}", ctx });
	return block;
}

// (215:3) {#each $components as component, index}
function create_each_block(ctx) {
	var div, div_id_value, dispose;

	function select_block_type(changed, ctx) {
		if (ctx.component.name == 'App' && ctx.index === 0) return create_if_block_1$1;
		if (ctx.component === ctx.editing) return create_if_block_2;
		return create_else_block;
	}

	var current_block_type = select_block_type(null, ctx);
	var if_block = current_block_type(ctx);

	function click_handler_2() {
		return ctx.click_handler_2(ctx);
	}

	const block = {
		c: function create() {
			div = element("div");
			if_block.c();
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true, class: true, role: true }, false);
			var div_nodes = children(div);

			if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(div, "id", div_id_value = ctx.component.name);
			attr_dev(div, "class", "button svelte-zab12q");
			attr_dev(div, "role", "button");
			toggle_class(div, "active", ctx.component === ctx.$selected);
			add_location(div, file$1, 215, 4, 4171);

			dispose = [
				listen_dev(div, "click", click_handler_2),
				listen_dev(div, "dblclick", dblclick_handler)
			];
		},

		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if_block.m(div, null);
		},

		p: function update(changed, new_ctx) {
			ctx = new_ctx;
			if (current_block_type === (current_block_type = select_block_type(changed, ctx)) && if_block) {
				if_block.p(changed, ctx);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);
				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}

			if ((changed.$components) && div_id_value !== (div_id_value = ctx.component.name)) {
				attr_dev(div, "id", div_id_value);
			}

			if ((changed.$components || changed.$selected)) {
				toggle_class(div, "active", ctx.component === ctx.$selected);
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			if_block.d();
			run_all(dispose);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block.name, type: "each", source: "(215:3) {#each $components as component, index}", ctx });
	return block;
}

function create_fragment$1(ctx) {
	var div;

	var if_block = (ctx.$components.length) && create_if_block$1(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if (if_block) if_block.c();
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(div, "class", "component-selector svelte-zab12q");
			add_location(div, file$1, 211, 0, 4016);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block) if_block.m(div, null);
		},

		p: function update(changed, ctx) {
			if (ctx.$components.length) {
				if (if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block = create_if_block$1(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},

		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			if (if_block) if_block.d();
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$1.name, type: "component", source: "", ctx });
	return block;
}

function selectInput(event) {
	setTimeout(() => {
		event.target.select();
	});
}

const dblclick_handler = (e) => e.stopPropagation();

function instance$1($$self, $$props, $$invalidate) {
	let $selected, $components, $$unsubscribe_components = noop, $$subscribe_components = () => ($$unsubscribe_components(), $$unsubscribe_components = subscribe(components, $$value => { $components = $$value; $$invalidate('$components', $components); }), components);

	$$self.$$.on_destroy.push(() => $$unsubscribe_components());

	let { handle_select } = $$props;

	const { components, selected, request_focus, rebundle } = getContext('REPL'); $$subscribe_components(); validate_store(selected, 'selected'); component_subscribe($$self, selected, $$value => { $selected = $$value; $$invalidate('$selected', $selected); });

	let editing = null;

	function selectComponent(component) {
		if ($selected !== component) {
			$$invalidate('editing', editing = null);
			handle_select(component);
		}
	}

	function editTab(component) {
		if ($selected === component) {
			$$invalidate('editing', editing = $selected);
		}
	}

	function closeEdit() {
		const match = /(.+)\.(svelte|js)$/.exec($selected.name);
		set_store_value(selected, $selected.name = match ? match[1] : $selected.name, $selected);
		if (isComponentNameUsed($selected)) {
			set_store_value(selected, $selected.name = $selected.name + '_1', $selected);
		}
		if (match && match[2]) set_store_value(selected, $selected.type = match[2], $selected);


		$$invalidate('editing', editing = null);

		// re-select, in case the type changed
		handle_select($selected);

		$$subscribe_components($$invalidate('components', components)); // TODO necessary?

		// focus the editor, but wait a beat (so key events aren't misdirected)
		setTimeout(request_focus);

		rebundle();
	}

	function remove(component) {
		let result = confirm(`Are you sure you want to delete ${component.name}.${component.type}?`);

		if (result) {
			const index = $components.indexOf(component);

			if (~index) {
				components.set($components.slice(0, index).concat($components.slice(index + 1)));
			} else {
				console.error(`Could not find component! That's... odd`);
			}

			handle_select($components[index] || $components[$components.length - 1]);
		}
	}

	let uid = 1;

	function addNew() {
		const component = {
			name: uid++ ? `Component${uid}` : 'Component1',
			type: 'svelte',
			source: ''
		};

		$$invalidate('editing', editing = component);

		setTimeout(() => {
			// TODO we can do this without IDs
			document.getElementById(component.name).scrollIntoView(false);
		});

		components.update(components => components.concat(component));
		handle_select(component);
	}

	function isComponentNameUsed(editing) {
		return $components.find(component => component !== editing && component.name === editing.name);
	}

	const writable_props = ['handle_select'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console_1.warn(`<ComponentSelector> was created with unknown prop '${key}'`);
	});

	function input_input_handler() {
		editing.name = this.value;
		$$invalidate('editing', editing);
	}

	const keydown_handler = (e) => e.which === 13 && !isComponentNameUsed(editing) && e.target.blur();

	const click_handler = ({ component }) => editTab(component);

	const click_handler_1 = ({ component }) => remove(component);

	const click_handler_2 = ({ component }) => selectComponent(component);

	$$self.$set = $$props => {
		if ('handle_select' in $$props) $$invalidate('handle_select', handle_select = $$props.handle_select);
	};

	$$self.$capture_state = () => {
		return { handle_select, editing, uid, $selected, $components };
	};

	$$self.$inject_state = $$props => {
		if ('handle_select' in $$props) $$invalidate('handle_select', handle_select = $$props.handle_select);
		if ('editing' in $$props) $$invalidate('editing', editing = $$props.editing);
		if ('uid' in $$props) uid = $$props.uid;
		if ('$selected' in $$props) selected.set($selected);
		if ('$components' in $$props) components.set($components);
	};

	return {
		handle_select,
		components,
		selected,
		editing,
		selectComponent,
		editTab,
		closeEdit,
		remove,
		addNew,
		isComponentNameUsed,
		$selected,
		$components,
		input_input_handler,
		keydown_handler,
		click_handler,
		click_handler_1,
		click_handler_2
	};
}

class ComponentSelector extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, ["handle_select"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "ComponentSelector", options, id: create_fragment$1.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.handle_select === undefined && !('handle_select' in props)) {
			console_1.warn("<ComponentSelector> was created without expected prop 'handle_select'");
		}
	}

	get handle_select() {
		throw new Error("<ComponentSelector>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set handle_select(value) {
		throw new Error("<ComponentSelector>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const is_browser = typeof window !== 'undefined';

function cubicOut(t) {
    const f = t - 1.0;
    return f * f * f + 1.0;
}

function slide(node, { delay = 0, duration = 400, easing = cubicOut }) {
    const style = getComputedStyle(node);
    const opacity = +style.opacity;
    const height = parseFloat(style.height);
    const padding_top = parseFloat(style.paddingTop);
    const padding_bottom = parseFloat(style.paddingBottom);
    const margin_top = parseFloat(style.marginTop);
    const margin_bottom = parseFloat(style.marginBottom);
    const border_top_width = parseFloat(style.borderTopWidth);
    const border_bottom_width = parseFloat(style.borderBottomWidth);
    return {
        delay,
        duration,
        easing,
        css: t => `overflow: hidden;` +
            `opacity: ${Math.min(t * 20, 1) * opacity};` +
            `height: ${t * height}px;` +
            `padding-top: ${t * padding_top}px;` +
            `padding-bottom: ${t * padding_bottom}px;` +
            `margin-top: ${t * margin_top}px;` +
            `margin-bottom: ${t * margin_bottom}px;` +
            `border-top-width: ${t * border_top_width}px;` +
            `border-bottom-width: ${t * border_bottom_width}px;`
    };
}

/* node_modules\@sveltejs\svelte-repl\src\Message.svelte generated by Svelte v3.12.0 */

const file$2 = "node_modules\\@sveltejs\\svelte-repl\\src\\Message.svelte";

// (88:1) {:else}
function create_else_block$1(ctx) {
	var current;

	const default_slot_template = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_template, ctx, null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},

		l: function claim(nodes) {
			if (default_slot) default_slot.l(nodes);
		},

		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},

		p: function update(changed, ctx) {
			if (default_slot && default_slot.p && changed.$$scope) {
				default_slot.p(
					get_slot_changes(default_slot_template, ctx, changed, null),
					get_slot_context(default_slot_template, ctx, null)
				);
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},

		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block$1.name, type: "else", source: "(88:1) {:else}", ctx });
	return block;
}

// (83:1) {#if details}
function create_if_block$2(ctx) {
	var p, t_value = ctx.message(ctx.details) + "", t, dispose;

	const block = {
		c: function create() {
			p = element("p");
			t = text(t_value);
			this.h();
		},

		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true }, false);
			var p_nodes = children(p);

			t = claim_text(p_nodes, t_value);
			p_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(p, "class", "svelte-9488n4");
			toggle_class(p, "navigable", ctx.details.filename);
			add_location(p, file$2, 83, 2, 1471);
			dispose = listen_dev(p, "click", ctx.click_handler);
		},

		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},

		p: function update(changed, ctx) {
			if ((changed.details) && t_value !== (t_value = ctx.message(ctx.details) + "")) {
				set_data_dev(t, t_value);
			}

			if (changed.details) {
				toggle_class(p, "navigable", ctx.details.filename);
			}
		},

		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(p);
			}

			dispose();
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$2.name, type: "if", source: "(83:1) {#if details}", ctx });
	return block;
}

function create_fragment$2(ctx) {
	var div, current_block_type_index, if_block, div_class_value, div_intro, div_outro, current;

	var if_block_creators = [
		create_if_block$2,
		create_else_block$1
	];

	var if_blocks = [];

	function select_block_type(changed, ctx) {
		if (ctx.details) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(null, ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			div = element("div");
			if_block.c();
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(div, "class", div_class_value = "message " + ctx.kind + " svelte-9488n4");
			toggle_class(div, "truncate", ctx.truncate);
			add_location(div, file$2, 81, 0, 1343);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if_blocks[current_block_type_index].m(div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(changed, ctx);
			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(changed, ctx);
			} else {
				group_outros();
				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});
				check_outros();

				if_block = if_blocks[current_block_type_index];
				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}
				transition_in(if_block, 1);
				if_block.m(div, null);
			}

			if ((!current || changed.kind) && div_class_value !== (div_class_value = "message " + ctx.kind + " svelte-9488n4")) {
				attr_dev(div, "class", div_class_value);
			}

			if ((changed.kind || changed.truncate)) {
				toggle_class(div, "truncate", ctx.truncate);
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(if_block);

			add_render_callback(() => {
				if (div_outro) div_outro.end(1);
				if (!div_intro) div_intro = create_in_transition(div, slide, {delay: 150, duration: 100});
				div_intro.start();
			});

			current = true;
		},

		o: function outro(local) {
			transition_out(if_block);
			if (div_intro) div_intro.invalidate();

			div_outro = create_out_transition(div, slide, {duration: 100});

			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			if_blocks[current_block_type_index].d();

			if (detaching) {
				if (div_outro) div_outro.end();
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$2.name, type: "component", source: "", ctx });
	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	

	const { navigate } = getContext('REPL');

	let { kind, details = null, filename = null, truncate } = $$props;

	function message(details) {
		let str = details.message || '[missing message]';

		let loc = [];

		if (details.filename && details.filename !== filename) {
			loc.push(details.filename);
		}

		if (details.start) loc.push(details.start.line, details.start.column);

		return str + (loc.length ? ` (${loc.join(':')})` : ``);
	}
	const writable_props = ['kind', 'details', 'filename', 'truncate'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<Message> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;

	const click_handler = () => navigate(details);

	$$self.$set = $$props => {
		if ('kind' in $$props) $$invalidate('kind', kind = $$props.kind);
		if ('details' in $$props) $$invalidate('details', details = $$props.details);
		if ('filename' in $$props) $$invalidate('filename', filename = $$props.filename);
		if ('truncate' in $$props) $$invalidate('truncate', truncate = $$props.truncate);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => {
		return { kind, details, filename, truncate };
	};

	$$self.$inject_state = $$props => {
		if ('kind' in $$props) $$invalidate('kind', kind = $$props.kind);
		if ('details' in $$props) $$invalidate('details', details = $$props.details);
		if ('filename' in $$props) $$invalidate('filename', filename = $$props.filename);
		if ('truncate' in $$props) $$invalidate('truncate', truncate = $$props.truncate);
	};

	return {
		navigate,
		kind,
		details,
		filename,
		truncate,
		message,
		click_handler,
		$$slots,
		$$scope
	};
}

class Message extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, ["kind", "details", "filename", "truncate"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Message", options, id: create_fragment$2.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.kind === undefined && !('kind' in props)) {
			console.warn("<Message> was created without expected prop 'kind'");
		}
		if (ctx.truncate === undefined && !('truncate' in props)) {
			console.warn("<Message> was created without expected prop 'truncate'");
		}
	}

	get kind() {
		throw new Error("<Message>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set kind(value) {
		throw new Error("<Message>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get details() {
		throw new Error("<Message>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set details(value) {
		throw new Error("<Message>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get filename() {
		throw new Error("<Message>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set filename(value) {
		throw new Error("<Message>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get truncate() {
		throw new Error("<Message>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set truncate(value) {
		throw new Error("<Message>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\@sveltejs\svelte-repl\src\CodeMirror.svelte generated by Svelte v3.12.0 */

const file$3 = "node_modules\\@sveltejs\\svelte-repl\\src\\CodeMirror.svelte";

// (272:1) {#if !CodeMirror}
function create_if_block$3(ctx) {
	var pre, t0, t1, div, current;

	var message = new Message({
		props: {
		kind: "info",
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			pre = element("pre");
			t0 = text(ctx.code);
			t1 = space();
			div = element("div");
			message.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			pre = claim_element(nodes, "PRE", { style: true, class: true }, false);
			var pre_nodes = children(pre);

			t0 = claim_text(pre_nodes, ctx.code);
			pre_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);

			div = claim_element(nodes, "DIV", { style: true }, false);
			var div_nodes = children(div);

			message.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			set_style(pre, "position", "absolute");
			set_style(pre, "left", "0");
			set_style(pre, "top", "0");
			attr_dev(pre, "class", "svelte-s9cc8a");
			add_location(pre, file$3, 272, 2, 5157);
			set_style(div, "position", "absolute");
			set_style(div, "width", "100%");
			set_style(div, "bottom", "0");
			add_location(div, file$3, 275, 2, 5225);
		},

		m: function mount(target, anchor) {
			insert_dev(target, pre, anchor);
			append_dev(pre, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, div, anchor);
			mount_component(message, div, null);
			current = true;
		},

		p: function update_1(changed, ctx) {
			if (!current || changed.code) {
				set_data_dev(t0, ctx.code);
			}

			var message_changes = {};
			if (changed.$$scope) message_changes.$$scope = { changed, ctx };
			message.$set(message_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(message.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(message.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(pre);
				detach_dev(t1);
				detach_dev(div);
			}

			destroy_component(message);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$3.name, type: "if", source: "(272:1) {#if !CodeMirror}", ctx });
	return block;
}

// (277:3) <Message kind='info'>
function create_default_slot(ctx) {
	var t;

	const block = {
		c: function create() {
			t = text("loading editor...");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "loading editor...");
		},

		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_default_slot.name, type: "slot", source: "(277:3) <Message kind='info'>", ctx });
	return block;
}

function create_fragment$3(ctx) {
	var div, textarea, t, div_resize_listener, current;

	var if_block = (!ctx.CodeMirror) && create_if_block$3(ctx);

	const block = {
		c: function create() {
			div = element("div");
			textarea = element("textarea");
			t = space();
			if (if_block) if_block.c();
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			textarea = claim_element(div_nodes, "TEXTAREA", { tabindex: true, readonly: true, value: true, class: true }, false);
			var textarea_nodes = children(textarea);

			textarea_nodes.forEach(detach_dev);
			t = claim_space(div_nodes);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(textarea, "tabindex", "2");
			textarea.readOnly = true;
			textarea.value = ctx.code;
			attr_dev(textarea, "class", "svelte-s9cc8a");
			add_location(textarea, file$3, 264, 1, 5044);
			add_render_callback(() => ctx.div_resize_handler.call(div));
			attr_dev(div, "class", "codemirror-container svelte-s9cc8a");
			toggle_class(div, "flex", ctx.flex);
			add_location(div, file$3, 262, 0, 4907);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, textarea);
			ctx.textarea_binding(textarea);
			append_dev(div, t);
			if (if_block) if_block.m(div, null);
			div_resize_listener = add_resize_listener(div, ctx.div_resize_handler.bind(div));
			current = true;
		},

		p: function update_1(changed, ctx) {
			if (!current || changed.code) {
				prop_dev(textarea, "value", ctx.code);
			}

			if (!ctx.CodeMirror) {
				if (if_block) {
					if_block.p(changed, ctx);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block$3(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();
				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});
				check_outros();
			}

			if (changed.flex) {
				toggle_class(div, "flex", ctx.flex);
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},

		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			ctx.textarea_binding(null);
			if (if_block) if_block.d();
			div_resize_listener.cancel();
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$3.name, type: "component", source: "", ctx });
	return block;
}

let codemirror_promise;
let _CodeMirror;

if (is_browser) {
	codemirror_promise = import('./codemirror.bc7e52bb.js');

	codemirror_promise.then(mod => {
		_CodeMirror = mod.default;
	});
}

function sleep(ms) {
	return new Promise(fulfil => setTimeout(fulfil, ms));
}

function instance$3($$self, $$props, $$invalidate) {
	

	const dispatch = createEventDispatcher();

	let { readonly = false, errorLoc = null, flex = false, lineNumbers = true, tab = true } = $$props;

	let w;
	let h;
	let code = '';
	let mode;

	// We have to expose set and update methods, rather
	// than making this state-driven through props,
	// because it's difficult to update an editor
	// without resetting scroll otherwise
	async function set(new_code, new_mode) {
		if (new_mode !== mode) {
			await createEditor(mode = new_mode);
		}

		$$invalidate('code', code = new_code);
		updating_externally = true;
		if (editor) editor.setValue(code);
		updating_externally = false;
	}

	function update(new_code) {
		$$invalidate('code', code = new_code);

		if (editor) {
			const { left, top } = editor.getScrollInfo();
			editor.setValue($$invalidate('code', code = new_code));
			editor.scrollTo(left, top);
		}
	}

	function resize() {
		editor.refresh();
	}

	function focus() {
		editor.focus();
	}

	const modes = {
		js: {
			name: 'javascript',
			json: false
		},
		json: {
			name: 'javascript',
			json: true
		},
		svelte: {
			name: 'handlebars',
			base: 'text/html'
		}
	};

	const refs = {};
	let editor;
	let updating_externally = false;
	let marker;
	let error_line;
	let destroyed = false;
	let CodeMirror;

	let previous_error_line;

	onMount(() => {
		if (_CodeMirror) {
			$$invalidate('CodeMirror', CodeMirror = _CodeMirror);
			createEditor(mode || 'svelte').then(() => {
				if (editor) editor.setValue(code || '');
			});
		} else {
			codemirror_promise.then(async mod => {
				$$invalidate('CodeMirror', CodeMirror = mod.default);
				await createEditor(mode || 'svelte');
				if (editor) editor.setValue(code || '');
			});
		}

		return () => {
			destroyed = true;
			if (editor) editor.toTextArea();
		}
	});

	let first = true;

	async function createEditor(mode) {
		if (destroyed || !CodeMirror) return;

		if (editor) editor.toTextArea();

		const opts = {
			lineNumbers,
			lineWrapping: true,
			indentWithTabs: true,
			indentUnit: 2,
			tabSize: 2,
			value: '',
			mode: modes[mode] || {
				name: mode
			},
			readOnly: readonly,
			autoCloseBrackets: true,
			autoCloseTags: true
		};

		if (!tab) opts.extraKeys = {
			Tab: tab,
			'Shift-Tab': tab
		};

		// Creating a text editor is a lot of work, so we yield
		// the main thread for a moment. This helps reduce jank
		if (first) await sleep(50);

		if (destroyed) return;

		$$invalidate('editor', editor = CodeMirror.fromTextArea(refs.editor, opts));

		editor.on('change', instance => {
			if (!updating_externally) {
				const value = instance.getValue();
				dispatch('change', { value });
			}
		});

		if (first) await sleep(50);
		editor.refresh();

		first = false;
	}

	const writable_props = ['readonly', 'errorLoc', 'flex', 'lineNumbers', 'tab'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<CodeMirror> was created with unknown prop '${key}'`);
	});

	function textarea_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			refs.editor = $$value;
			$$invalidate('refs', refs);
		});
	}

	function div_resize_handler() {
		w = this.offsetWidth;
		h = this.offsetHeight;
		$$invalidate('w', w);
		$$invalidate('h', h);
	}

	$$self.$set = $$props => {
		if ('readonly' in $$props) $$invalidate('readonly', readonly = $$props.readonly);
		if ('errorLoc' in $$props) $$invalidate('errorLoc', errorLoc = $$props.errorLoc);
		if ('flex' in $$props) $$invalidate('flex', flex = $$props.flex);
		if ('lineNumbers' in $$props) $$invalidate('lineNumbers', lineNumbers = $$props.lineNumbers);
		if ('tab' in $$props) $$invalidate('tab', tab = $$props.tab);
	};

	$$self.$capture_state = () => {
		return { codemirror_promise, _CodeMirror, readonly, errorLoc, flex, lineNumbers, tab, w, h, code, mode, editor, updating_externally, marker, error_line, destroyed, CodeMirror, previous_error_line, first };
	};

	$$self.$inject_state = $$props => {
		if ('readonly' in $$props) $$invalidate('readonly', readonly = $$props.readonly);
		if ('errorLoc' in $$props) $$invalidate('errorLoc', errorLoc = $$props.errorLoc);
		if ('flex' in $$props) $$invalidate('flex', flex = $$props.flex);
		if ('lineNumbers' in $$props) $$invalidate('lineNumbers', lineNumbers = $$props.lineNumbers);
		if ('tab' in $$props) $$invalidate('tab', tab = $$props.tab);
		if ('w' in $$props) $$invalidate('w', w = $$props.w);
		if ('h' in $$props) $$invalidate('h', h = $$props.h);
		if ('code' in $$props) $$invalidate('code', code = $$props.code);
		if ('mode' in $$props) mode = $$props.mode;
		if ('editor' in $$props) $$invalidate('editor', editor = $$props.editor);
		if ('updating_externally' in $$props) updating_externally = $$props.updating_externally;
		if ('marker' in $$props) $$invalidate('marker', marker = $$props.marker);
		if ('error_line' in $$props) $$invalidate('error_line', error_line = $$props.error_line);
		if ('destroyed' in $$props) destroyed = $$props.destroyed;
		if ('CodeMirror' in $$props) $$invalidate('CodeMirror', CodeMirror = $$props.CodeMirror);
		if ('previous_error_line' in $$props) $$invalidate('previous_error_line', previous_error_line = $$props.previous_error_line);
		if ('first' in $$props) first = $$props.first;
	};

	$$self.$$.update = ($$dirty = { editor: 1, w: 1, h: 1, marker: 1, errorLoc: 1, previous_error_line: 1, error_line: 1 }) => {
		if ($$dirty.editor || $$dirty.w || $$dirty.h) { if (editor && w && h) {
				editor.refresh();
			} }
		if ($$dirty.marker || $$dirty.errorLoc || $$dirty.editor) { {
				if (marker) marker.clear();
		
				if (errorLoc) {
					const line = errorLoc.line - 1;
					const ch = errorLoc.column;
		
					$$invalidate('marker', marker = editor.markText({ line, ch }, { line, ch: ch + 1 }, {
						className: 'error-loc'
					}));
		
					$$invalidate('error_line', error_line = line);
				} else {
					$$invalidate('error_line', error_line = null);
				}
			} }
		if ($$dirty.editor || $$dirty.previous_error_line || $$dirty.error_line) { if (editor) {
				if (previous_error_line != null) {
					editor.removeLineClass(previous_error_line, 'wrap', 'error-line');
				}
		
				if (error_line && (error_line !== previous_error_line)) {
					editor.addLineClass(error_line, 'wrap', 'error-line');
					$$invalidate('previous_error_line', previous_error_line = error_line);
				}
			} }
	};

	return {
		readonly,
		errorLoc,
		flex,
		lineNumbers,
		tab,
		w,
		h,
		code,
		set,
		update,
		resize,
		focus,
		refs,
		CodeMirror,
		textarea_binding,
		div_resize_handler
	};
}

class CodeMirror_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, ["readonly", "errorLoc", "flex", "lineNumbers", "tab", "set", "update", "resize", "focus"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "CodeMirror_1", options, id: create_fragment$3.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.set === undefined && !('set' in props)) {
			console.warn("<CodeMirror> was created without expected prop 'set'");
		}
		if (ctx.update === undefined && !('update' in props)) {
			console.warn("<CodeMirror> was created without expected prop 'update'");
		}
		if (ctx.resize === undefined && !('resize' in props)) {
			console.warn("<CodeMirror> was created without expected prop 'resize'");
		}
		if (ctx.focus === undefined && !('focus' in props)) {
			console.warn("<CodeMirror> was created without expected prop 'focus'");
		}
	}

	get readonly() {
		throw new Error("<CodeMirror>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set readonly(value) {
		throw new Error("<CodeMirror>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get errorLoc() {
		throw new Error("<CodeMirror>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set errorLoc(value) {
		throw new Error("<CodeMirror>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get flex() {
		throw new Error("<CodeMirror>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set flex(value) {
		throw new Error("<CodeMirror>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get lineNumbers() {
		throw new Error("<CodeMirror>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set lineNumbers(value) {
		throw new Error("<CodeMirror>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tab() {
		throw new Error("<CodeMirror>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tab(value) {
		throw new Error("<CodeMirror>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get set() {
		return this.$$.ctx.set;
	}

	set set(value) {
		throw new Error("<CodeMirror>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get update() {
		return this.$$.ctx.update;
	}

	set update(value) {
		throw new Error("<CodeMirror>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get resize() {
		return this.$$.ctx.resize;
	}

	set resize(value) {
		throw new Error("<CodeMirror>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get focus() {
		return this.$$.ctx.focus;
	}

	set focus(value) {
		throw new Error("<CodeMirror>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\@sveltejs\svelte-repl\src\Input\ModuleEditor.svelte generated by Svelte v3.12.0 */

const file$4 = "node_modules\\@sveltejs\\svelte-repl\\src\\Input\\ModuleEditor.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.warning = list[i];
	return child_ctx;
}

// (57:2) {#if $bundle}
function create_if_block$4(ctx) {
	var current_block_type_index, if_block, if_block_anchor, current;

	var if_block_creators = [
		create_if_block_1$2,
		create_if_block_2$1
	];

	var if_blocks = [];

	function select_block_type(changed, ctx) {
		if (ctx.$bundle.error) return 0;
		if (ctx.$bundle.warnings.length > 0) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(null, ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},

		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},

		m: function mount(target, anchor) {
			if (~current_block_type_index) if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(changed, ctx);
			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) if_blocks[current_block_type_index].p(changed, ctx);
			} else {
				if (if_block) {
					group_outros();
					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});
					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];
					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					}
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				} else {
					if_block = null;
				}
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},

		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},

		d: function destroy(detaching) {
			if (~current_block_type_index) if_blocks[current_block_type_index].d(detaching);

			if (detaching) {
				detach_dev(if_block_anchor);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$4.name, type: "if", source: "(57:2) {#if $bundle}", ctx });
	return block;
}

// (60:41) 
function create_if_block_2$1(ctx) {
	var each_1_anchor, current;

	let each_value = ctx.$bundle.warnings;

	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},

		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},

		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			if (changed.$bundle || changed.$selected) {
				each_value = ctx.$bundle.warnings;

				let i;
				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();
				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}
				check_outros();
			}
		},

		i: function intro(local) {
			if (current) return;
			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},

		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},

		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);

			if (detaching) {
				detach_dev(each_1_anchor);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_2$1.name, type: "if", source: "(60:41) ", ctx });
	return block;
}

// (58:3) {#if $bundle.error}
function create_if_block_1$2(ctx) {
	var current;

	var message = new Message({
		props: {
		kind: "error",
		details: ctx.$bundle.error,
		filename: "" + ctx.$selected.name + "." + ctx.$selected.type
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			message.$$.fragment.c();
		},

		l: function claim(nodes) {
			message.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(message, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var message_changes = {};
			if (changed.$bundle) message_changes.details = ctx.$bundle.error;
			if (changed.$selected) message_changes.filename = "" + ctx.$selected.name + "." + ctx.$selected.type;
			message.$set(message_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(message.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(message.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(message, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_1$2.name, type: "if", source: "(58:3) {#if $bundle.error}", ctx });
	return block;
}

// (61:4) {#each $bundle.warnings as warning}
function create_each_block$1(ctx) {
	var current;

	var message = new Message({
		props: {
		kind: "warning",
		details: ctx.warning,
		filename: "" + ctx.$selected.name + "." + ctx.$selected.type
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			message.$$.fragment.c();
		},

		l: function claim(nodes) {
			message.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(message, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var message_changes = {};
			if (changed.$bundle) message_changes.details = ctx.warning;
			if (changed.$selected) message_changes.filename = "" + ctx.$selected.name + "." + ctx.$selected.type;
			message.$set(message_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(message.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(message.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(message, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block$1.name, type: "each", source: "(61:4) {#each $bundle.warnings as warning}", ctx });
	return block;
}

function create_fragment$4(ctx) {
	var div2, div0, t, div1, current;

	let codemirror_props = { errorLoc: ctx.errorLoc };
	var codemirror = new CodeMirror_1({ props: codemirror_props, $$inline: true });

	ctx.codemirror_binding(codemirror);
	codemirror.$on("change", ctx.handle_change);

	var if_block = (ctx.$bundle) && create_if_block$4(ctx);

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			codemirror.$$.fragment.c();
			t = space();
			div1 = element("div");
			if (if_block) if_block.c();
			this.h();
		},

		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true }, false);
			var div2_nodes = children(div2);

			div0 = claim_element(div2_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			codemirror.$$.fragment.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			t = claim_space(div2_nodes);

			div1 = claim_element(div2_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			if (if_block) if_block.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(div0, "class", "editor svelte-m7nlxn");
			add_location(div0, file$4, 47, 1, 831);
			attr_dev(div1, "class", "info svelte-m7nlxn");
			add_location(div1, file$4, 55, 1, 946);
			attr_dev(div2, "class", "editor-wrapper svelte-m7nlxn");
			add_location(div2, file$4, 46, 0, 801);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			mount_component(codemirror, div0, null);
			append_dev(div2, t);
			append_dev(div2, div1);
			if (if_block) if_block.m(div1, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var codemirror_changes = {};
			if (changed.errorLoc) codemirror_changes.errorLoc = ctx.errorLoc;
			codemirror.$set(codemirror_changes);

			if (ctx.$bundle) {
				if (if_block) {
					if_block.p(changed, ctx);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block$4(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div1, null);
				}
			} else if (if_block) {
				group_outros();
				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});
				check_outros();
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(codemirror.$$.fragment, local);

			transition_in(if_block);
			current = true;
		},

		o: function outro(local) {
			transition_out(codemirror.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div2);
			}

			ctx.codemirror_binding(null);

			destroy_component(codemirror);

			if (if_block) if_block.d();
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$4.name, type: "component", source: "", ctx });
	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let $bundle, $selected;

	

	const { bundle, selected, handle_change, register_module_editor } = getContext('REPL'); validate_store(bundle, 'bundle'); component_subscribe($$self, bundle, $$value => { $bundle = $$value; $$invalidate('$bundle', $bundle); }); validate_store(selected, 'selected'); component_subscribe($$self, selected, $$value => { $selected = $$value; $$invalidate('$selected', $selected); });

	let { errorLoc } = $$props;

	let editor;
	onMount(() => {
		register_module_editor(editor);
	});

	function focus() {
		editor.focus();
	}

	const writable_props = ['errorLoc'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<ModuleEditor> was created with unknown prop '${key}'`);
	});

	function codemirror_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('editor', editor = $$value);
		});
	}

	$$self.$set = $$props => {
		if ('errorLoc' in $$props) $$invalidate('errorLoc', errorLoc = $$props.errorLoc);
	};

	$$self.$capture_state = () => {
		return { errorLoc, editor, $bundle, $selected };
	};

	$$self.$inject_state = $$props => {
		if ('errorLoc' in $$props) $$invalidate('errorLoc', errorLoc = $$props.errorLoc);
		if ('editor' in $$props) $$invalidate('editor', editor = $$props.editor);
		if ('$bundle' in $$props) bundle.set($bundle);
		if ('$selected' in $$props) selected.set($selected);
	};

	return {
		bundle,
		selected,
		handle_change,
		errorLoc,
		editor,
		focus,
		$bundle,
		$selected,
		codemirror_binding
	};
}

class ModuleEditor extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$4, create_fragment$4, safe_not_equal, ["errorLoc", "focus"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "ModuleEditor", options, id: create_fragment$4.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.errorLoc === undefined && !('errorLoc' in props)) {
			console.warn("<ModuleEditor> was created without expected prop 'errorLoc'");
		}
		if (ctx.focus === undefined && !('focus' in props)) {
			console.warn("<ModuleEditor> was created without expected prop 'focus'");
		}
	}

	get errorLoc() {
		throw new Error("<ModuleEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set errorLoc(value) {
		throw new Error("<ModuleEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get focus() {
		return this.$$.ctx.focus;
	}

	set focus(value) {
		throw new Error("<ModuleEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var charToInteger = {};
var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
for (var i = 0; i < chars.length; i++) {
    charToInteger[chars.charCodeAt(i)] = i;
}
function decode(mappings) {
    var generatedCodeColumn = 0; // first field
    var sourceFileIndex = 0; // second field
    var sourceCodeLine = 0; // third field
    var sourceCodeColumn = 0; // fourth field
    var nameIndex = 0; // fifth field
    var decoded = [];
    var line = [];
    var segment = [];
    for (var i = 0, j = 0, shift = 0, value = 0, len = mappings.length; i < len; i++) {
        var c = mappings.charCodeAt(i);
        if (c === 44) { // ","
            if (segment.length)
                line.push(segment);
            segment = [];
            j = 0;
        }
        else if (c === 59) { // ";"
            if (segment.length)
                line.push(segment);
            segment = [];
            j = 0;
            decoded.push(line);
            line = [];
            generatedCodeColumn = 0;
        }
        else {
            var integer = charToInteger[c];
            if (integer === undefined) {
                throw new Error('Invalid character (' + String.fromCharCode(c) + ')');
            }
            var hasContinuationBit = integer & 32;
            integer &= 31;
            value += integer << shift;
            if (hasContinuationBit) {
                shift += 5;
            }
            else {
                var shouldNegate = value & 1;
                value >>>= 1;
                if (shouldNegate) {
                    value = -value;
                    if (value === 0)
                        value = -0x80000000;
                }
                if (j == 0) {
                    generatedCodeColumn += value;
                    segment.push(generatedCodeColumn);
                }
                else if (j === 1) {
                    sourceFileIndex += value;
                    segment.push(sourceFileIndex);
                }
                else if (j === 2) {
                    sourceCodeLine += value;
                    segment.push(sourceCodeLine);
                }
                else if (j === 3) {
                    sourceCodeColumn += value;
                    segment.push(sourceCodeColumn);
                }
                else if (j === 4) {
                    nameIndex += value;
                    segment.push(nameIndex);
                }
                j++;
                value = shift = 0; // reset
            }
        }
    }
    if (segment.length)
        line.push(segment);
    decoded.push(line);
    return decoded;
}

function getLocationFromStack(stack, map) {
	if (!stack) return;
	const last = stack.split('\n')[1];
	const match = /<anonymous>:(\d+):(\d+)\)$/.exec(last);

	if (!match) return null;

	const line = +match[1];
	const column = +match[2];

	return trace({ line, column }, map);
}

function trace(loc, map) {
	const mappings = decode(map.mappings);
	const segments = mappings[loc.line - 1];

	for (let i = 0; i < segments.length; i += 1) {
		const segment = segments[i];
		if (segment[0] === loc.column) {
			const [, sourceIndex, line, column] = segment;
			const source = map.sources[sourceIndex].slice(2);

			return { source, line: line + 1, column };
		}
	}

	return null;
}

function is_date(obj) {
    return Object.prototype.toString.call(obj) === '[object Date]';
}

function tick_spring(ctx, last_value, current_value, target_value) {
    if (typeof current_value === 'number' || is_date(current_value)) {
        // @ts-ignore
        const delta = target_value - current_value;
        // @ts-ignore
        const velocity = (current_value - last_value) / (ctx.dt || 1 / 60); // guard div by 0
        const spring = ctx.opts.stiffness * delta;
        const damper = ctx.opts.damping * velocity;
        const acceleration = (spring - damper) * ctx.inv_mass;
        const d = (velocity + acceleration) * ctx.dt;
        if (Math.abs(d) < ctx.opts.precision && Math.abs(delta) < ctx.opts.precision) {
            return target_value; // settled
        }
        else {
            ctx.settled = false; // signal loop to keep ticking
            // @ts-ignore
            return is_date(current_value) ?
                new Date(current_value.getTime() + d) : current_value + d;
        }
    }
    else if (Array.isArray(current_value)) {
        // @ts-ignore
        return current_value.map((_, i) => tick_spring(ctx, last_value[i], current_value[i], target_value[i]));
    }
    else if (typeof current_value === 'object') {
        const next_value = {};
        for (const k in current_value)
            // @ts-ignore
            next_value[k] = tick_spring(ctx, last_value[k], current_value[k], target_value[k]);
        // @ts-ignore
        return next_value;
    }
    else {
        throw new Error(`Cannot spring ${typeof current_value} values`);
    }
}
function spring(value, opts = {}) {
    const store = writable(value);
    const { stiffness = 0.15, damping = 0.8, precision = 0.01 } = opts;
    let last_time;
    let task;
    let current_token;
    let last_value = value;
    let target_value = value;
    let inv_mass = 1;
    let inv_mass_recovery_rate = 0;
    let cancel_task = false;
    /* eslint-disable @typescript-eslint/no-use-before-define */
    function set(new_value, opts = {}) {
        target_value = new_value;
        const token = current_token = {};
        if (opts.hard || (spring.stiffness >= 1 && spring.damping >= 1)) {
            cancel_task = true; // cancel any running animation
            last_time = now();
            last_value = value;
            store.set(value = target_value);
            return new Promise(f => f()); // fulfil immediately
        }
        else if (opts.soft) {
            const rate = opts.soft === true ? .5 : +opts.soft;
            inv_mass_recovery_rate = 1 / (rate * 60);
            inv_mass = 0; // infinite mass, unaffected by spring forces
        }
        if (!task) {
            last_time = now();
            cancel_task = false;
            task = loop(now => {
                if (cancel_task) {
                    cancel_task = false;
                    task = null;
                    return false;
                }
                inv_mass = Math.min(inv_mass + inv_mass_recovery_rate, 1);
                const ctx = {
                    inv_mass,
                    opts: spring,
                    settled: true,
                    dt: (now - last_time) * 60 / 1000
                };
                const next_value = tick_spring(ctx, last_value, value, target_value);
                last_time = now;
                last_value = value;
                store.set(value = next_value);
                if (ctx.settled)
                    task = null;
                return !ctx.settled;
            });
        }
        return new Promise(fulfil => {
            task.promise.then(() => {
                if (token === current_token)
                    fulfil();
            });
        });
    }
    /* eslint-enable @typescript-eslint/no-use-before-define */
    const spring = {
        set,
        update: (fn, opts) => set(fn(target_value, value), opts),
        subscribe: store.subscribe,
        stiffness,
        damping,
        precision
    };
    return spring;
}

/* node_modules\@sveltejs\svelte-repl\src\Output\PaneWithPanel.svelte generated by Svelte v3.12.0 */

const file$5 = "node_modules\\@sveltejs\\svelte-repl\\src\\Output\\PaneWithPanel.svelte";

const get_panel_body_slot_changes = () => ({});
const get_panel_body_slot_context = () => ({});

const get_panel_header_slot_changes = () => ({});
const get_panel_header_slot_context = () => ({});

const get_main_slot_changes = () => ({});
const get_main_slot_context = () => ({});

// (29:1) <section slot="a">
function create_a_slot(ctx) {
	var section, current;

	const main_slot_template = ctx.$$slots.main;
	const main_slot = create_slot(main_slot_template, ctx, get_main_slot_context);

	const block = {
		c: function create() {
			section = element("section");

			if (main_slot) main_slot.c();
			this.h();
		},

		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { slot: true }, false);
			var section_nodes = children(section);

			if (main_slot) main_slot.l(section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(section, "slot", "a");
			add_location(section, file$5, 28, 1, 562);
		},

		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);

			if (main_slot) {
				main_slot.m(section, null);
			}

			current = true;
		},

		p: function update(changed, ctx) {
			if (main_slot && main_slot.p && changed.$$scope) {
				main_slot.p(
					get_slot_changes(main_slot_template, ctx, changed, get_main_slot_changes),
					get_slot_context(main_slot_template, ctx, get_main_slot_context)
				);
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(main_slot, local);
			current = true;
		},

		o: function outro(local) {
			transition_out(main_slot, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(section);
			}

			if (main_slot) main_slot.d(detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_a_slot.name, type: "slot", source: "(29:1) <section slot=\"a\">", ctx });
	return block;
}

// (33:1) <section slot="b">
function create_b_slot(ctx) {
	var section, div0, h3, t0, t1, t2, div1, current, dispose;

	const panel_header_slot_template = ctx.$$slots["panel-header"];
	const panel_header_slot = create_slot(panel_header_slot_template, ctx, get_panel_header_slot_context);

	const panel_body_slot_template = ctx.$$slots["panel-body"];
	const panel_body_slot = create_slot(panel_body_slot_template, ctx, get_panel_body_slot_context);

	const block = {
		c: function create() {
			section = element("section");
			div0 = element("div");
			h3 = element("h3");
			t0 = text(ctx.panel);
			t1 = space();

			if (panel_header_slot) panel_header_slot.c();
			t2 = space();
			div1 = element("div");

			if (panel_body_slot) panel_body_slot.c();
			this.h();
		},

		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { slot: true }, false);
			var section_nodes = children(section);

			div0 = claim_element(section_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			h3 = claim_element(div0_nodes, "H3", { class: true }, false);
			var h3_nodes = children(h3);

			t0 = claim_text(h3_nodes, ctx.panel);
			h3_nodes.forEach(detach_dev);
			t1 = claim_space(div0_nodes);

			if (panel_header_slot) panel_header_slot.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			t2 = claim_space(section_nodes);

			div1 = claim_element(section_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			if (panel_body_slot) panel_body_slot.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(h3, "class", "svelte-5jyt6a");
			add_location(h3, file$5, 34, 3, 692);

			attr_dev(div0, "class", "panel-header svelte-5jyt6a");
			add_location(div0, file$5, 33, 2, 644);

			attr_dev(div1, "class", "panel-body svelte-5jyt6a");
			add_location(div1, file$5, 38, 2, 758);
			attr_dev(section, "slot", "b");
			add_location(section, file$5, 32, 1, 623);
			dispose = listen_dev(div0, "click", ctx.toggle);
		},

		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, div0);
			append_dev(div0, h3);
			append_dev(h3, t0);
			append_dev(div0, t1);

			if (panel_header_slot) {
				panel_header_slot.m(div0, null);
			}

			append_dev(section, t2);
			append_dev(section, div1);

			if (panel_body_slot) {
				panel_body_slot.m(div1, null);
			}

			current = true;
		},

		p: function update(changed, ctx) {
			if (!current || changed.panel) {
				set_data_dev(t0, ctx.panel);
			}

			if (panel_header_slot && panel_header_slot.p && changed.$$scope) {
				panel_header_slot.p(
					get_slot_changes(panel_header_slot_template, ctx, changed, get_panel_header_slot_changes),
					get_slot_context(panel_header_slot_template, ctx, get_panel_header_slot_context)
				);
			}

			if (panel_body_slot && panel_body_slot.p && changed.$$scope) {
				panel_body_slot.p(
					get_slot_changes(panel_body_slot_template, ctx, changed, get_panel_body_slot_changes),
					get_slot_context(panel_body_slot_template, ctx, get_panel_body_slot_context)
				);
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(panel_header_slot, local);
			transition_in(panel_body_slot, local);
			current = true;
		},

		o: function outro(local) {
			transition_out(panel_header_slot, local);
			transition_out(panel_body_slot, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(section);
			}

			if (panel_header_slot) panel_header_slot.d(detaching);

			if (panel_body_slot) panel_body_slot.d(detaching);
			dispose();
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_b_slot.name, type: "slot", source: "(33:1) <section slot=\"b\">", ctx });
	return block;
}

// (28:0) <SplitPane bind:max type="vertical" bind:pos={pos}>
function create_default_slot$1(ctx) {
	var t;

	const block = {
		c: function create() {
			t = space();
		},

		l: function claim(nodes) {
			t = claim_space(nodes);
		},

		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},

		p: noop,
		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_default_slot$1.name, type: "slot", source: "(28:0) <SplitPane bind:max type=\"vertical\" bind:pos={pos}>", ctx });
	return block;
}

function create_fragment$5(ctx) {
	var updating_max, updating_pos, current;

	function splitpane_max_binding(value) {
		ctx.splitpane_max_binding.call(null, value);
		updating_max = true;
		add_flush_callback(() => updating_max = false);
	}

	function splitpane_pos_binding(value_1) {
		ctx.splitpane_pos_binding.call(null, value_1);
		updating_pos = true;
		add_flush_callback(() => updating_pos = false);
	}

	let splitpane_props = {
		type: "vertical",
		$$slots: {
		default: [create_default_slot$1],
		b: [create_b_slot],
		a: [create_a_slot]
	},
		$$scope: { ctx }
	};
	if (ctx.max !== void 0) {
		splitpane_props.max = ctx.max;
	}
	if (ctx.pos !== void 0) {
		splitpane_props.pos = ctx.pos;
	}
	var splitpane = new SplitPane({ props: splitpane_props, $$inline: true });

	binding_callbacks.push(() => bind(splitpane, 'max', splitpane_max_binding));
	binding_callbacks.push(() => bind(splitpane, 'pos', splitpane_pos_binding));

	const block = {
		c: function create() {
			splitpane.$$.fragment.c();
		},

		l: function claim(nodes) {
			splitpane.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(splitpane, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var splitpane_changes = {};
			if (changed.$$scope || changed.panel) splitpane_changes.$$scope = { changed, ctx };
			if (!updating_max && changed.max) {
				splitpane_changes.max = ctx.max;
			}
			if (!updating_pos && changed.pos) {
				splitpane_changes.pos = ctx.pos;
			}
			splitpane.$set(splitpane_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(splitpane.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(splitpane.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(splitpane, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$5.name, type: "component", source: "", ctx });
	return block;
}

function instance$5($$self, $$props, $$invalidate) {
	let $driver;

	

	let { panel, pos = 50 } = $$props;
	let previous_pos = Math.min(pos, 70);

	let max;

	// we can't bind to the spring itself, but we
	// can still use the spring to drive `pos`
	const driver = spring(pos); validate_store(driver, 'driver'); component_subscribe($$self, driver, $$value => { $driver = $$value; $$invalidate('$driver', $driver); });

	const toggle = () => {
		driver.set(pos, { hard: true });

		if (pos > 80) {
			driver.set(previous_pos);
		} else {
			previous_pos = pos;
			driver.set(max);
		}
	};

	const writable_props = ['panel', 'pos'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<PaneWithPanel> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;

	function splitpane_max_binding(value) {
		max = value;
		$$invalidate('max', max);
	}

	function splitpane_pos_binding(value_1) {
		pos = value_1;
		$$invalidate('pos', pos), $$invalidate('$driver', $driver);
	}

	$$self.$set = $$props => {
		if ('panel' in $$props) $$invalidate('panel', panel = $$props.panel);
		if ('pos' in $$props) $$invalidate('pos', pos = $$props.pos);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => {
		return { panel, pos, previous_pos, max, $driver };
	};

	$$self.$inject_state = $$props => {
		if ('panel' in $$props) $$invalidate('panel', panel = $$props.panel);
		if ('pos' in $$props) $$invalidate('pos', pos = $$props.pos);
		if ('previous_pos' in $$props) previous_pos = $$props.previous_pos;
		if ('max' in $$props) $$invalidate('max', max = $$props.max);
		if ('$driver' in $$props) driver.set($driver);
	};

	$$self.$$.update = ($$dirty = { $driver: 1 }) => {
		if ($$dirty.$driver) { $$invalidate('pos', pos = $driver); }
	};

	return {
		panel,
		pos,
		max,
		driver,
		toggle,
		splitpane_max_binding,
		splitpane_pos_binding,
		$$slots,
		$$scope
	};
}

class PaneWithPanel extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$5, create_fragment$5, safe_not_equal, ["panel", "pos"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "PaneWithPanel", options, id: create_fragment$5.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.panel === undefined && !('panel' in props)) {
			console.warn("<PaneWithPanel> was created without expected prop 'panel'");
		}
	}

	get panel() {
		throw new Error("<PaneWithPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set panel(value) {
		throw new Error("<PaneWithPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get pos() {
		throw new Error("<PaneWithPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set pos(value) {
		throw new Error("<PaneWithPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

let uid = 1;

class ReplProxy {
	constructor(iframe, handlers) {
		this.iframe = iframe;
		this.handlers = handlers;

		this.pending_cmds = new Map();

		this.handle_event = e => this.handle_repl_message(e);
		window.addEventListener('message', this.handle_event, false);
	}

	destroy() {
		window.removeEventListener('message', this.handle_event);
	}

	iframe_command(action, args) {
		return new Promise((resolve, reject) => {
			const cmd_id = uid++;

			this.pending_cmds.set(cmd_id, { resolve, reject });

			this.iframe.contentWindow.postMessage({ action, cmd_id, args }, '*');
		});
	}

	handle_command_message(cmd_data) {
		let action = cmd_data.action;
		let id = cmd_data.cmd_id;
		let handler = this.pending_cmds.get(id);

		if (handler) {
			this.pending_cmds.delete(id);
			if (action === 'cmd_error') {
				let { message, stack } = cmd_data;
				let e = new Error(message);
				e.stack = stack;
				handler.reject(e);
			}

			if (action === 'cmd_ok') {
				handler.resolve(cmd_data.args);
			}
		} else {
			console.error('command not found', id, cmd_data, [...this.pending_cmds.keys()]);
		}
	}

	handle_repl_message(event) {
		if (event.source !== this.iframe.contentWindow) return;

		const { action, args } = event.data;

		switch (action) {
			case 'cmd_error':
			case 'cmd_ok':
				return this.handle_command_message(event.data);
			case 'fetch_progress':
				return this.handlers.on_fetch_progress(args.remaining)
			case 'error':
				return this.handlers.on_error(event.data);
			case 'unhandledrejection':
				return this.handlers.on_unhandled_rejection(event.data);
			case 'console':
				return this.handlers.on_console(event.data);
		}
	}

	eval(script) {
		return this.iframe_command('eval', { script });
	}

	handle_links() {
		return this.iframe_command('catch_clicks', {});
	}
}

/* node_modules\svelte-json-tree\src\JSONArrow.svelte generated by Svelte v3.12.0 */

const file$6 = "node_modules\\svelte-json-tree\\src\\JSONArrow.svelte";

function create_fragment$6(ctx) {
	var div1, div0, t_value = '\u25B6' + "", t, dispose;

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			t = text(t_value);
			this.h();
		},

		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			div0 = claim_element(div1_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			t = claim_text(div0_nodes, t_value);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(div0, "class", "arrow svelte-kniv4z");
			toggle_class(div0, "expanded", ctx.expanded);
			add_location(div0, file$6, 33, 2, 692);
			attr_dev(div1, "class", "container svelte-kniv4z");
			add_location(div1, file$6, 32, 0, 647);
			dispose = listen_dev(div1, "click", ctx.onClick);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, t);
		},

		p: function update(changed, ctx) {
			if (changed.expanded) {
				toggle_class(div0, "expanded", ctx.expanded);
			}
		},

		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div1);
			}

			dispose();
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$6.name, type: "component", source: "", ctx });
	return block;
}

function instance$6($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();

  function onClick(event) {
    dispatch('click', event);
  }

  let { expanded } = $$props;

	const writable_props = ['expanded'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<JSONArrow> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('expanded' in $$props) $$invalidate('expanded', expanded = $$props.expanded);
	};

	$$self.$capture_state = () => {
		return { expanded };
	};

	$$self.$inject_state = $$props => {
		if ('expanded' in $$props) $$invalidate('expanded', expanded = $$props.expanded);
	};

	return { onClick, expanded };
}

class JSONArrow extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$6, create_fragment$6, safe_not_equal, ["expanded"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "JSONArrow", options, id: create_fragment$6.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.expanded === undefined && !('expanded' in props)) {
			console.warn("<JSONArrow> was created without expected prop 'expanded'");
		}
	}

	get expanded() {
		throw new Error("<JSONArrow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set expanded(value) {
		throw new Error("<JSONArrow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

function objType(obj) {
  const type = Object.prototype.toString.call(obj).slice(8, -1);
  if (type === 'Object') {
    if (typeof obj[Symbol.iterator] === 'function') {
      return 'Iterable';
    }
    return obj.constructor.name;
  }

  return type;
}

/* node_modules\svelte-json-tree\src\JSONKey.svelte generated by Svelte v3.12.0 */

const file$7 = "node_modules\\svelte-json-tree\\src\\JSONKey.svelte";

// (19:0) {#if showKey && key}
function create_if_block$5(ctx) {
	var label, span, t0, t1;

	const block = {
		c: function create() {
			label = element("label");
			span = element("span");
			t0 = text(ctx.key);
			t1 = text(ctx.colon);
			this.h();
		},

		l: function claim(nodes) {
			label = claim_element(nodes, "LABEL", { class: true }, false);
			var label_nodes = children(label);

			span = claim_element(label_nodes, "SPAN", {}, false);
			var span_nodes = children(span);

			t0 = claim_text(span_nodes, ctx.key);
			t1 = claim_text(span_nodes, ctx.colon);
			span_nodes.forEach(detach_dev);
			label_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			add_location(span, file$7, 20, 4, 476);
			attr_dev(label, "class", "svelte-15h461i");
			toggle_class(label, "spaced", ctx.isParentExpanded);
			add_location(label, file$7, 19, 2, 432);
		},

		m: function mount(target, anchor) {
			insert_dev(target, label, anchor);
			append_dev(label, span);
			append_dev(span, t0);
			append_dev(span, t1);
		},

		p: function update(changed, ctx) {
			if (changed.key) {
				set_data_dev(t0, ctx.key);
			}

			if (changed.colon) {
				set_data_dev(t1, ctx.colon);
			}

			if (changed.isParentExpanded) {
				toggle_class(label, "spaced", ctx.isParentExpanded);
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(label);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$5.name, type: "if", source: "(19:0) {#if showKey && key}", ctx });
	return block;
}

function create_fragment$7(ctx) {
	var if_block_anchor;

	var if_block = (ctx.showKey && ctx.key) && create_if_block$5(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},

		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},

		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},

		p: function update(changed, ctx) {
			if (ctx.showKey && ctx.key) {
				if (if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block = create_if_block$5(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},

		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);

			if (detaching) {
				detach_dev(if_block_anchor);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$7.name, type: "component", source: "", ctx });
	return block;
}

function instance$7($$self, $$props, $$invalidate) {
	

  let { key, isParentExpanded, isParentArray = false, colon = ':' } = $$props;

	const writable_props = ['key', 'isParentExpanded', 'isParentArray', 'colon'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<JSONKey> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('key' in $$props) $$invalidate('key', key = $$props.key);
		if ('isParentExpanded' in $$props) $$invalidate('isParentExpanded', isParentExpanded = $$props.isParentExpanded);
		if ('isParentArray' in $$props) $$invalidate('isParentArray', isParentArray = $$props.isParentArray);
		if ('colon' in $$props) $$invalidate('colon', colon = $$props.colon);
	};

	$$self.$capture_state = () => {
		return { key, isParentExpanded, isParentArray, colon, showKey };
	};

	$$self.$inject_state = $$props => {
		if ('key' in $$props) $$invalidate('key', key = $$props.key);
		if ('isParentExpanded' in $$props) $$invalidate('isParentExpanded', isParentExpanded = $$props.isParentExpanded);
		if ('isParentArray' in $$props) $$invalidate('isParentArray', isParentArray = $$props.isParentArray);
		if ('colon' in $$props) $$invalidate('colon', colon = $$props.colon);
		if ('showKey' in $$props) $$invalidate('showKey', showKey = $$props.showKey);
	};

	let showKey;

	$$self.$$.update = ($$dirty = { isParentExpanded: 1, isParentArray: 1, key: 1 }) => {
		if ($$dirty.isParentExpanded || $$dirty.isParentArray || $$dirty.key) { $$invalidate('showKey', showKey = (isParentExpanded || !isParentArray || key != +key)); }
	};

	return {
		key,
		isParentExpanded,
		isParentArray,
		colon,
		showKey
	};
}

class JSONKey extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$7, create_fragment$7, safe_not_equal, ["key", "isParentExpanded", "isParentArray", "colon"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "JSONKey", options, id: create_fragment$7.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.key === undefined && !('key' in props)) {
			console.warn("<JSONKey> was created without expected prop 'key'");
		}
		if (ctx.isParentExpanded === undefined && !('isParentExpanded' in props)) {
			console.warn("<JSONKey> was created without expected prop 'isParentExpanded'");
		}
	}

	get key() {
		throw new Error("<JSONKey>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set key(value) {
		throw new Error("<JSONKey>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isParentExpanded() {
		throw new Error("<JSONKey>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isParentExpanded(value) {
		throw new Error("<JSONKey>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isParentArray() {
		throw new Error("<JSONKey>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isParentArray(value) {
		throw new Error("<JSONKey>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get colon() {
		throw new Error("<JSONKey>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set colon(value) {
		throw new Error("<JSONKey>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var contextKey = {};

/* node_modules\svelte-json-tree\src\JSONNested.svelte generated by Svelte v3.12.0 */

const file$8 = "node_modules\\svelte-json-tree\\src\\JSONNested.svelte";

function get_each_context$2(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.key = list[i];
	child_ctx.index = i;
	return child_ctx;
}

// (48:2) {#if expandable && isParentExpanded}
function create_if_block_3(ctx) {
	var current;

	var jsonarrow = new JSONArrow({
		props: { expanded: ctx.expanded },
		$$inline: true
	});
	jsonarrow.$on("click", ctx.toggleExpand);

	const block = {
		c: function create() {
			jsonarrow.$$.fragment.c();
		},

		l: function claim(nodes) {
			jsonarrow.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(jsonarrow, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var jsonarrow_changes = {};
			if (changed.expanded) jsonarrow_changes.expanded = ctx.expanded;
			jsonarrow.$set(jsonarrow_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(jsonarrow.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(jsonarrow.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(jsonarrow, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_3.name, type: "if", source: "(48:2) {#if expandable && isParentExpanded}", ctx });
	return block;
}

// (65:4) {:else}
function create_else_block$2(ctx) {
	var span, t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("…");
			this.h();
		},

		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", {}, false);
			var span_nodes = children(span);

			t = claim_text(span_nodes, "…");
			span_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			add_location(span, file$8, 65, 6, 1920);
		},

		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},

		p: noop,
		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block$2.name, type: "else", source: "(65:4) {:else}", ctx });
	return block;
}

// (53:4) {#if isParentExpanded}
function create_if_block$6(ctx) {
	var ul, t, current, dispose;

	let each_value = ctx.slicedKeys;

	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	var if_block = (ctx.slicedKeys.length < ctx.previewKeys.length) && create_if_block_1$3(ctx);

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			if (if_block) if_block.c();
			this.h();
		},

		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			t = claim_space(ul_nodes);
			if (if_block) if_block.l(ul_nodes);
			ul_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(ul, "class", "svelte-2jkrkt");
			toggle_class(ul, "collapse", !ctx.expanded);
			add_location(ul, file$8, 53, 6, 1424);
			dispose = listen_dev(ul, "click", ctx.expand);
		},

		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			append_dev(ul, t);
			if (if_block) if_block.m(ul, null);
			current = true;
		},

		p: function update(changed, ctx) {
			if (changed.expanded || changed.previewKeys || changed.getKey || changed.slicedKeys || changed.isArray || changed.getValue || changed.getPreviewValue) {
				each_value = ctx.slicedKeys;

				let i;
				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$2(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$2(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul, t);
					}
				}

				group_outros();
				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}
				check_outros();
			}

			if (ctx.slicedKeys.length < ctx.previewKeys.length) {
				if (!if_block) {
					if_block = create_if_block_1$3(ctx);
					if_block.c();
					if_block.m(ul, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (changed.expanded) {
				toggle_class(ul, "collapse", !ctx.expanded);
			}
		},

		i: function intro(local) {
			if (current) return;
			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},

		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(ul);
			}

			destroy_each(each_blocks, detaching);

			if (if_block) if_block.d();
			dispose();
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$6.name, type: "if", source: "(53:4) {#if isParentExpanded}", ctx });
	return block;
}

// (57:10) {#if !expanded && index < previewKeys.length - 1}
function create_if_block_2$2(ctx) {
	var span, t;

	const block = {
		c: function create() {
			span = element("span");
			t = text(",");
			this.h();
		},

		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true }, false);
			var span_nodes = children(span);

			t = claim_text(span_nodes, ",");
			span_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(span, "class", "comma svelte-2jkrkt");
			add_location(span, file$8, 57, 12, 1736);
		},

		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_2$2.name, type: "if", source: "(57:10) {#if !expanded && index < previewKeys.length - 1}", ctx });
	return block;
}

// (55:8) {#each slicedKeys as key, index}
function create_each_block$2(ctx) {
	var t, if_block_anchor, current;

	var jsonnode = new JSONNode({
		props: {
		key: ctx.getKey(ctx.key),
		isParentExpanded: ctx.expanded,
		isParentArray: ctx.isArray,
		value: ctx.expanded ? ctx.getValue(ctx.key) : ctx.getPreviewValue(ctx.key)
	},
		$$inline: true
	});

	var if_block = (!ctx.expanded && ctx.index < ctx.previewKeys.length - 1) && create_if_block_2$2(ctx);

	const block = {
		c: function create() {
			jsonnode.$$.fragment.c();
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},

		l: function claim(nodes) {
			jsonnode.$$.fragment.l(nodes);
			t = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},

		m: function mount(target, anchor) {
			mount_component(jsonnode, target, anchor);
			insert_dev(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var jsonnode_changes = {};
			if (changed.getKey || changed.slicedKeys) jsonnode_changes.key = ctx.getKey(ctx.key);
			if (changed.expanded) jsonnode_changes.isParentExpanded = ctx.expanded;
			if (changed.isArray) jsonnode_changes.isParentArray = ctx.isArray;
			if (changed.expanded || changed.getValue || changed.slicedKeys || changed.getPreviewValue) jsonnode_changes.value = ctx.expanded ? ctx.getValue(ctx.key) : ctx.getPreviewValue(ctx.key);
			jsonnode.$set(jsonnode_changes);

			if (!ctx.expanded && ctx.index < ctx.previewKeys.length - 1) {
				if (!if_block) {
					if_block = create_if_block_2$2(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(jsonnode.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(jsonnode.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(jsonnode, detaching);

			if (detaching) {
				detach_dev(t);
			}

			if (if_block) if_block.d(detaching);

			if (detaching) {
				detach_dev(if_block_anchor);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block$2.name, type: "each", source: "(55:8) {#each slicedKeys as key, index}", ctx });
	return block;
}

// (61:8) {#if slicedKeys.length < previewKeys.length }
function create_if_block_1$3(ctx) {
	var span, t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("…");
			this.h();
		},

		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", {}, false);
			var span_nodes = children(span);

			t = claim_text(span_nodes, "…");
			span_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			add_location(span, file$8, 61, 10, 1861);
		},

		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_1$3.name, type: "if", source: "(61:8) {#if slicedKeys.length < previewKeys.length }", ctx });
	return block;
}

function create_fragment$8(ctx) {
	var li, t0, t1, span1, span0, t2, t3, t4, current_block_type_index, if_block1, t5, span2, t6, current, dispose;

	var if_block0 = (ctx.expandable && ctx.isParentExpanded) && create_if_block_3(ctx);

	var jsonkey = new JSONKey({
		props: {
		key: ctx.key,
		colon: ctx.context.colon,
		isParentExpanded: ctx.isParentExpanded,
		isParentArray: ctx.isParentArray
	},
		$$inline: true
	});

	var if_block_creators = [
		create_if_block$6,
		create_else_block$2
	];

	var if_blocks = [];

	function select_block_type(changed, ctx) {
		if (ctx.isParentExpanded) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(null, ctx);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			li = element("li");
			if (if_block0) if_block0.c();
			t0 = space();
			jsonkey.$$.fragment.c();
			t1 = space();
			span1 = element("span");
			span0 = element("span");
			t2 = text(ctx.label);
			t3 = text(ctx.bracketOpen);
			t4 = space();
			if_block1.c();
			t5 = space();
			span2 = element("span");
			t6 = text(ctx.bracketClose);
			this.h();
		},

		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true }, false);
			var li_nodes = children(li);

			if (if_block0) if_block0.l(li_nodes);
			t0 = claim_space(li_nodes);
			jsonkey.$$.fragment.l(li_nodes);
			t1 = claim_space(li_nodes);

			span1 = claim_element(li_nodes, "SPAN", {}, false);
			var span1_nodes = children(span1);

			span0 = claim_element(span1_nodes, "SPAN", {}, false);
			var span0_nodes = children(span0);

			t2 = claim_text(span0_nodes, ctx.label);
			span0_nodes.forEach(detach_dev);
			t3 = claim_text(span1_nodes, ctx.bracketOpen);
			span1_nodes.forEach(detach_dev);
			t4 = claim_space(li_nodes);
			if_block1.l(li_nodes);
			t5 = claim_space(li_nodes);

			span2 = claim_element(li_nodes, "SPAN", {}, false);
			var span2_nodes = children(span2);

			t6 = claim_text(span2_nodes, ctx.bracketClose);
			span2_nodes.forEach(detach_dev);
			li_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			add_location(span0, file$8, 51, 8, 1326);
			add_location(span1, file$8, 51, 2, 1320);
			add_location(span2, file$8, 67, 2, 1947);
			attr_dev(li, "class", "svelte-2jkrkt");
			toggle_class(li, "indent", ctx.isParentExpanded);
			add_location(li, file$8, 46, 0, 1104);
			dispose = listen_dev(span0, "click", ctx.toggleExpand);
		},

		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			if (if_block0) if_block0.m(li, null);
			append_dev(li, t0);
			mount_component(jsonkey, li, null);
			append_dev(li, t1);
			append_dev(li, span1);
			append_dev(span1, span0);
			append_dev(span0, t2);
			append_dev(span1, t3);
			append_dev(li, t4);
			if_blocks[current_block_type_index].m(li, null);
			append_dev(li, t5);
			append_dev(li, span2);
			append_dev(span2, t6);
			current = true;
		},

		p: function update(changed, ctx) {
			if (ctx.expandable && ctx.isParentExpanded) {
				if (if_block0) {
					if_block0.p(changed, ctx);
					transition_in(if_block0, 1);
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(li, t0);
				}
			} else if (if_block0) {
				group_outros();
				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});
				check_outros();
			}

			var jsonkey_changes = {};
			if (changed.key) jsonkey_changes.key = ctx.key;
			if (changed.isParentExpanded) jsonkey_changes.isParentExpanded = ctx.isParentExpanded;
			if (changed.isParentArray) jsonkey_changes.isParentArray = ctx.isParentArray;
			jsonkey.$set(jsonkey_changes);

			if (!current || changed.label) {
				set_data_dev(t2, ctx.label);
			}

			if (!current || changed.bracketOpen) {
				set_data_dev(t3, ctx.bracketOpen);
			}

			var previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(changed, ctx);
			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(changed, ctx);
			} else {
				group_outros();
				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});
				check_outros();

				if_block1 = if_blocks[current_block_type_index];
				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				}
				transition_in(if_block1, 1);
				if_block1.m(li, t5);
			}

			if (!current || changed.bracketClose) {
				set_data_dev(t6, ctx.bracketClose);
			}

			if (changed.isParentExpanded) {
				toggle_class(li, "indent", ctx.isParentExpanded);
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);

			transition_in(jsonkey.$$.fragment, local);

			transition_in(if_block1);
			current = true;
		},

		o: function outro(local) {
			transition_out(if_block0);
			transition_out(jsonkey.$$.fragment, local);
			transition_out(if_block1);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(li);
			}

			if (if_block0) if_block0.d();

			destroy_component(jsonkey);

			if_blocks[current_block_type_index].d();
			dispose();
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$8.name, type: "component", source: "", ctx });
	return block;
}

function instance$8($$self, $$props, $$invalidate) {
	

  let { key, keys, colon = ':', label = '', isParentExpanded, isParentArray, isArray = false, bracketOpen, bracketClose, previewKeys = keys, getKey = key => key } = $$props;
  let { getValue = key => key } = $$props;
  let { getPreviewValue = getValue, expanded = false, expandable = true } = $$props;

  const context = getContext(contextKey);
  setContext(contextKey, { ...context, colon });

  function toggleExpand() {
    $$invalidate('expanded', expanded = !expanded);
  }

  function expand() {
    $$invalidate('expanded', expanded = true);
  }

	const writable_props = ['key', 'keys', 'colon', 'label', 'isParentExpanded', 'isParentArray', 'isArray', 'bracketOpen', 'bracketClose', 'previewKeys', 'getKey', 'getValue', 'getPreviewValue', 'expanded', 'expandable'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<JSONNested> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('key' in $$props) $$invalidate('key', key = $$props.key);
		if ('keys' in $$props) $$invalidate('keys', keys = $$props.keys);
		if ('colon' in $$props) $$invalidate('colon', colon = $$props.colon);
		if ('label' in $$props) $$invalidate('label', label = $$props.label);
		if ('isParentExpanded' in $$props) $$invalidate('isParentExpanded', isParentExpanded = $$props.isParentExpanded);
		if ('isParentArray' in $$props) $$invalidate('isParentArray', isParentArray = $$props.isParentArray);
		if ('isArray' in $$props) $$invalidate('isArray', isArray = $$props.isArray);
		if ('bracketOpen' in $$props) $$invalidate('bracketOpen', bracketOpen = $$props.bracketOpen);
		if ('bracketClose' in $$props) $$invalidate('bracketClose', bracketClose = $$props.bracketClose);
		if ('previewKeys' in $$props) $$invalidate('previewKeys', previewKeys = $$props.previewKeys);
		if ('getKey' in $$props) $$invalidate('getKey', getKey = $$props.getKey);
		if ('getValue' in $$props) $$invalidate('getValue', getValue = $$props.getValue);
		if ('getPreviewValue' in $$props) $$invalidate('getPreviewValue', getPreviewValue = $$props.getPreviewValue);
		if ('expanded' in $$props) $$invalidate('expanded', expanded = $$props.expanded);
		if ('expandable' in $$props) $$invalidate('expandable', expandable = $$props.expandable);
	};

	$$self.$capture_state = () => {
		return { key, keys, colon, label, isParentExpanded, isParentArray, isArray, bracketOpen, bracketClose, previewKeys, getKey, getValue, getPreviewValue, expanded, expandable, slicedKeys };
	};

	$$self.$inject_state = $$props => {
		if ('key' in $$props) $$invalidate('key', key = $$props.key);
		if ('keys' in $$props) $$invalidate('keys', keys = $$props.keys);
		if ('colon' in $$props) $$invalidate('colon', colon = $$props.colon);
		if ('label' in $$props) $$invalidate('label', label = $$props.label);
		if ('isParentExpanded' in $$props) $$invalidate('isParentExpanded', isParentExpanded = $$props.isParentExpanded);
		if ('isParentArray' in $$props) $$invalidate('isParentArray', isParentArray = $$props.isParentArray);
		if ('isArray' in $$props) $$invalidate('isArray', isArray = $$props.isArray);
		if ('bracketOpen' in $$props) $$invalidate('bracketOpen', bracketOpen = $$props.bracketOpen);
		if ('bracketClose' in $$props) $$invalidate('bracketClose', bracketClose = $$props.bracketClose);
		if ('previewKeys' in $$props) $$invalidate('previewKeys', previewKeys = $$props.previewKeys);
		if ('getKey' in $$props) $$invalidate('getKey', getKey = $$props.getKey);
		if ('getValue' in $$props) $$invalidate('getValue', getValue = $$props.getValue);
		if ('getPreviewValue' in $$props) $$invalidate('getPreviewValue', getPreviewValue = $$props.getPreviewValue);
		if ('expanded' in $$props) $$invalidate('expanded', expanded = $$props.expanded);
		if ('expandable' in $$props) $$invalidate('expandable', expandable = $$props.expandable);
		if ('slicedKeys' in $$props) $$invalidate('slicedKeys', slicedKeys = $$props.slicedKeys);
	};

	let slicedKeys;

	$$self.$$.update = ($$dirty = { isParentExpanded: 1, expanded: 1, keys: 1, previewKeys: 1 }) => {
		if ($$dirty.isParentExpanded) { if (!isParentExpanded) {
        $$invalidate('expanded', expanded = false);
      } }
		if ($$dirty.expanded || $$dirty.keys || $$dirty.previewKeys) { $$invalidate('slicedKeys', slicedKeys = expanded ? keys: previewKeys.slice(0, 5)); }
	};

	return {
		key,
		keys,
		colon,
		label,
		isParentExpanded,
		isParentArray,
		isArray,
		bracketOpen,
		bracketClose,
		previewKeys,
		getKey,
		getValue,
		getPreviewValue,
		expanded,
		expandable,
		context,
		toggleExpand,
		expand,
		slicedKeys
	};
}

class JSONNested extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$8, create_fragment$8, safe_not_equal, ["key", "keys", "colon", "label", "isParentExpanded", "isParentArray", "isArray", "bracketOpen", "bracketClose", "previewKeys", "getKey", "getValue", "getPreviewValue", "expanded", "expandable"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "JSONNested", options, id: create_fragment$8.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.key === undefined && !('key' in props)) {
			console.warn("<JSONNested> was created without expected prop 'key'");
		}
		if (ctx.keys === undefined && !('keys' in props)) {
			console.warn("<JSONNested> was created without expected prop 'keys'");
		}
		if (ctx.isParentExpanded === undefined && !('isParentExpanded' in props)) {
			console.warn("<JSONNested> was created without expected prop 'isParentExpanded'");
		}
		if (ctx.isParentArray === undefined && !('isParentArray' in props)) {
			console.warn("<JSONNested> was created without expected prop 'isParentArray'");
		}
		if (ctx.bracketOpen === undefined && !('bracketOpen' in props)) {
			console.warn("<JSONNested> was created without expected prop 'bracketOpen'");
		}
		if (ctx.bracketClose === undefined && !('bracketClose' in props)) {
			console.warn("<JSONNested> was created without expected prop 'bracketClose'");
		}
	}

	get key() {
		throw new Error("<JSONNested>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set key(value) {
		throw new Error("<JSONNested>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get keys() {
		throw new Error("<JSONNested>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set keys(value) {
		throw new Error("<JSONNested>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get colon() {
		throw new Error("<JSONNested>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set colon(value) {
		throw new Error("<JSONNested>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<JSONNested>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<JSONNested>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isParentExpanded() {
		throw new Error("<JSONNested>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isParentExpanded(value) {
		throw new Error("<JSONNested>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isParentArray() {
		throw new Error("<JSONNested>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isParentArray(value) {
		throw new Error("<JSONNested>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isArray() {
		throw new Error("<JSONNested>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isArray(value) {
		throw new Error("<JSONNested>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get bracketOpen() {
		throw new Error("<JSONNested>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set bracketOpen(value) {
		throw new Error("<JSONNested>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get bracketClose() {
		throw new Error("<JSONNested>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set bracketClose(value) {
		throw new Error("<JSONNested>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get previewKeys() {
		throw new Error("<JSONNested>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set previewKeys(value) {
		throw new Error("<JSONNested>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get getKey() {
		throw new Error("<JSONNested>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set getKey(value) {
		throw new Error("<JSONNested>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get getValue() {
		throw new Error("<JSONNested>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set getValue(value) {
		throw new Error("<JSONNested>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get getPreviewValue() {
		throw new Error("<JSONNested>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set getPreviewValue(value) {
		throw new Error("<JSONNested>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get expanded() {
		throw new Error("<JSONNested>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set expanded(value) {
		throw new Error("<JSONNested>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get expandable() {
		throw new Error("<JSONNested>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set expandable(value) {
		throw new Error("<JSONNested>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\svelte-json-tree\src\JSONObjectNode.svelte generated by Svelte v3.12.0 */
const { Object: Object_1 } = globals;

function create_fragment$9(ctx) {
	var current;

	var jsonnested = new JSONNested({
		props: {
		key: ctx.key,
		expanded: ctx.expanded,
		isParentExpanded: ctx.isParentExpanded,
		isParentArray: ctx.isParentArray,
		keys: ctx.keys,
		getValue: ctx.getValue,
		label: "" + ctx.nodeType + " ",
		bracketOpen: '{',
		bracketClose: '}'
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			jsonnested.$$.fragment.c();
		},

		l: function claim(nodes) {
			jsonnested.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(jsonnested, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var jsonnested_changes = {};
			if (changed.key) jsonnested_changes.key = ctx.key;
			if (changed.expanded) jsonnested_changes.expanded = ctx.expanded;
			if (changed.isParentExpanded) jsonnested_changes.isParentExpanded = ctx.isParentExpanded;
			if (changed.isParentArray) jsonnested_changes.isParentArray = ctx.isParentArray;
			if (changed.keys) jsonnested_changes.keys = ctx.keys;
			if (changed.nodeType) jsonnested_changes.label = "" + ctx.nodeType + " ";
			jsonnested.$set(jsonnested_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(jsonnested.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(jsonnested.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(jsonnested, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$9.name, type: "component", source: "", ctx });
	return block;
}

function instance$9($$self, $$props, $$invalidate) {
	

  let { key, value, isParentExpanded, isParentArray, nodeType, expanded = false } = $$props;

  function getValue(key) {
    return value[key];
  }

	const writable_props = ['key', 'value', 'isParentExpanded', 'isParentArray', 'nodeType', 'expanded'];
	Object_1.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<JSONObjectNode> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('key' in $$props) $$invalidate('key', key = $$props.key);
		if ('value' in $$props) $$invalidate('value', value = $$props.value);
		if ('isParentExpanded' in $$props) $$invalidate('isParentExpanded', isParentExpanded = $$props.isParentExpanded);
		if ('isParentArray' in $$props) $$invalidate('isParentArray', isParentArray = $$props.isParentArray);
		if ('nodeType' in $$props) $$invalidate('nodeType', nodeType = $$props.nodeType);
		if ('expanded' in $$props) $$invalidate('expanded', expanded = $$props.expanded);
	};

	$$self.$capture_state = () => {
		return { key, value, isParentExpanded, isParentArray, nodeType, expanded, keys };
	};

	$$self.$inject_state = $$props => {
		if ('key' in $$props) $$invalidate('key', key = $$props.key);
		if ('value' in $$props) $$invalidate('value', value = $$props.value);
		if ('isParentExpanded' in $$props) $$invalidate('isParentExpanded', isParentExpanded = $$props.isParentExpanded);
		if ('isParentArray' in $$props) $$invalidate('isParentArray', isParentArray = $$props.isParentArray);
		if ('nodeType' in $$props) $$invalidate('nodeType', nodeType = $$props.nodeType);
		if ('expanded' in $$props) $$invalidate('expanded', expanded = $$props.expanded);
		if ('keys' in $$props) $$invalidate('keys', keys = $$props.keys);
	};

	let keys;

	$$self.$$.update = ($$dirty = { value: 1 }) => {
		if ($$dirty.value) { $$invalidate('keys', keys = Object.getOwnPropertyNames(value)); }
	};

	return {
		key,
		value,
		isParentExpanded,
		isParentArray,
		nodeType,
		expanded,
		getValue,
		keys
	};
}

class JSONObjectNode extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$9, create_fragment$9, safe_not_equal, ["key", "value", "isParentExpanded", "isParentArray", "nodeType", "expanded"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "JSONObjectNode", options, id: create_fragment$9.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.key === undefined && !('key' in props)) {
			console.warn("<JSONObjectNode> was created without expected prop 'key'");
		}
		if (ctx.value === undefined && !('value' in props)) {
			console.warn("<JSONObjectNode> was created without expected prop 'value'");
		}
		if (ctx.isParentExpanded === undefined && !('isParentExpanded' in props)) {
			console.warn("<JSONObjectNode> was created without expected prop 'isParentExpanded'");
		}
		if (ctx.isParentArray === undefined && !('isParentArray' in props)) {
			console.warn("<JSONObjectNode> was created without expected prop 'isParentArray'");
		}
		if (ctx.nodeType === undefined && !('nodeType' in props)) {
			console.warn("<JSONObjectNode> was created without expected prop 'nodeType'");
		}
	}

	get key() {
		throw new Error("<JSONObjectNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set key(value) {
		throw new Error("<JSONObjectNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<JSONObjectNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<JSONObjectNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isParentExpanded() {
		throw new Error("<JSONObjectNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isParentExpanded(value) {
		throw new Error("<JSONObjectNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isParentArray() {
		throw new Error("<JSONObjectNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isParentArray(value) {
		throw new Error("<JSONObjectNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get nodeType() {
		throw new Error("<JSONObjectNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set nodeType(value) {
		throw new Error("<JSONObjectNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get expanded() {
		throw new Error("<JSONObjectNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set expanded(value) {
		throw new Error("<JSONObjectNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\svelte-json-tree\src\JSONArrayNode.svelte generated by Svelte v3.12.0 */
const { Object: Object_1$1 } = globals;

function create_fragment$a(ctx) {
	var current;

	var jsonnested = new JSONNested({
		props: {
		key: ctx.key,
		expanded: ctx.expanded,
		isParentExpanded: ctx.isParentExpanded,
		isParentArray: ctx.isParentArray,
		isArray: true,
		keys: ctx.keys,
		previewKeys: ctx.previewKeys,
		getValue: ctx.getValue,
		label: "Array(" + ctx.value.length + ")",
		bracketOpen: "[",
		bracketClose: "]"
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			jsonnested.$$.fragment.c();
		},

		l: function claim(nodes) {
			jsonnested.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(jsonnested, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var jsonnested_changes = {};
			if (changed.key) jsonnested_changes.key = ctx.key;
			if (changed.expanded) jsonnested_changes.expanded = ctx.expanded;
			if (changed.isParentExpanded) jsonnested_changes.isParentExpanded = ctx.isParentExpanded;
			if (changed.isParentArray) jsonnested_changes.isParentArray = ctx.isParentArray;
			if (changed.keys) jsonnested_changes.keys = ctx.keys;
			if (changed.previewKeys) jsonnested_changes.previewKeys = ctx.previewKeys;
			if (changed.value) jsonnested_changes.label = "Array(" + ctx.value.length + ")";
			jsonnested.$set(jsonnested_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(jsonnested.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(jsonnested.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(jsonnested, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$a.name, type: "component", source: "", ctx });
	return block;
}

function instance$a($$self, $$props, $$invalidate) {
	

  let { key, value, isParentExpanded, isParentArray, expanded = false } = $$props;
  const filteredKey = new Set(['length']);

  function getValue(key) {
    return value[key];
  }

	const writable_props = ['key', 'value', 'isParentExpanded', 'isParentArray', 'expanded'];
	Object_1$1.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<JSONArrayNode> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('key' in $$props) $$invalidate('key', key = $$props.key);
		if ('value' in $$props) $$invalidate('value', value = $$props.value);
		if ('isParentExpanded' in $$props) $$invalidate('isParentExpanded', isParentExpanded = $$props.isParentExpanded);
		if ('isParentArray' in $$props) $$invalidate('isParentArray', isParentArray = $$props.isParentArray);
		if ('expanded' in $$props) $$invalidate('expanded', expanded = $$props.expanded);
	};

	$$self.$capture_state = () => {
		return { key, value, isParentExpanded, isParentArray, expanded, keys, previewKeys };
	};

	$$self.$inject_state = $$props => {
		if ('key' in $$props) $$invalidate('key', key = $$props.key);
		if ('value' in $$props) $$invalidate('value', value = $$props.value);
		if ('isParentExpanded' in $$props) $$invalidate('isParentExpanded', isParentExpanded = $$props.isParentExpanded);
		if ('isParentArray' in $$props) $$invalidate('isParentArray', isParentArray = $$props.isParentArray);
		if ('expanded' in $$props) $$invalidate('expanded', expanded = $$props.expanded);
		if ('keys' in $$props) $$invalidate('keys', keys = $$props.keys);
		if ('previewKeys' in $$props) $$invalidate('previewKeys', previewKeys = $$props.previewKeys);
	};

	let keys, previewKeys;

	$$self.$$.update = ($$dirty = { value: 1, keys: 1 }) => {
		if ($$dirty.value) { $$invalidate('keys', keys = Object.getOwnPropertyNames(value)); }
		if ($$dirty.keys) { $$invalidate('previewKeys', previewKeys = keys.filter(key => !filteredKey.has(key))); }
	};

	return {
		key,
		value,
		isParentExpanded,
		isParentArray,
		expanded,
		getValue,
		keys,
		previewKeys
	};
}

class JSONArrayNode extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$a, create_fragment$a, safe_not_equal, ["key", "value", "isParentExpanded", "isParentArray", "expanded"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "JSONArrayNode", options, id: create_fragment$a.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.key === undefined && !('key' in props)) {
			console.warn("<JSONArrayNode> was created without expected prop 'key'");
		}
		if (ctx.value === undefined && !('value' in props)) {
			console.warn("<JSONArrayNode> was created without expected prop 'value'");
		}
		if (ctx.isParentExpanded === undefined && !('isParentExpanded' in props)) {
			console.warn("<JSONArrayNode> was created without expected prop 'isParentExpanded'");
		}
		if (ctx.isParentArray === undefined && !('isParentArray' in props)) {
			console.warn("<JSONArrayNode> was created without expected prop 'isParentArray'");
		}
	}

	get key() {
		throw new Error("<JSONArrayNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set key(value) {
		throw new Error("<JSONArrayNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<JSONArrayNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<JSONArrayNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isParentExpanded() {
		throw new Error("<JSONArrayNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isParentExpanded(value) {
		throw new Error("<JSONArrayNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isParentArray() {
		throw new Error("<JSONArrayNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isParentArray(value) {
		throw new Error("<JSONArrayNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get expanded() {
		throw new Error("<JSONArrayNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set expanded(value) {
		throw new Error("<JSONArrayNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\svelte-json-tree\src\JSONIterableArrayNode.svelte generated by Svelte v3.12.0 */

function create_fragment$b(ctx) {
	var current;

	var jsonnested = new JSONNested({
		props: {
		key: ctx.key,
		isParentExpanded: ctx.isParentExpanded,
		isParentArray: ctx.isParentArray,
		keys: ctx.keys,
		getKey: getKey,
		getValue: getValue,
		isArray: true,
		label: "" + ctx.nodeType + "(" + ctx.keys.length + ")",
		bracketOpen: '{',
		bracketClose: '}'
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			jsonnested.$$.fragment.c();
		},

		l: function claim(nodes) {
			jsonnested.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(jsonnested, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var jsonnested_changes = {};
			if (changed.key) jsonnested_changes.key = ctx.key;
			if (changed.isParentExpanded) jsonnested_changes.isParentExpanded = ctx.isParentExpanded;
			if (changed.isParentArray) jsonnested_changes.isParentArray = ctx.isParentArray;
			if (changed.keys) jsonnested_changes.keys = ctx.keys;
			if (changed.nodeType || changed.keys) jsonnested_changes.label = "" + ctx.nodeType + "(" + ctx.keys.length + ")";
			jsonnested.$set(jsonnested_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(jsonnested.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(jsonnested.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(jsonnested, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$b.name, type: "component", source: "", ctx });
	return block;
}

function getKey(key) {
  return String(key[0]);
}

function getValue(key) {
  return key[1];
}

function instance$b($$self, $$props, $$invalidate) {
	

  let { key, value, isParentExpanded, isParentArray, nodeType } = $$props;

  let keys = [];

	const writable_props = ['key', 'value', 'isParentExpanded', 'isParentArray', 'nodeType'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<JSONIterableArrayNode> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('key' in $$props) $$invalidate('key', key = $$props.key);
		if ('value' in $$props) $$invalidate('value', value = $$props.value);
		if ('isParentExpanded' in $$props) $$invalidate('isParentExpanded', isParentExpanded = $$props.isParentExpanded);
		if ('isParentArray' in $$props) $$invalidate('isParentArray', isParentArray = $$props.isParentArray);
		if ('nodeType' in $$props) $$invalidate('nodeType', nodeType = $$props.nodeType);
	};

	$$self.$capture_state = () => {
		return { key, value, isParentExpanded, isParentArray, nodeType, keys };
	};

	$$self.$inject_state = $$props => {
		if ('key' in $$props) $$invalidate('key', key = $$props.key);
		if ('value' in $$props) $$invalidate('value', value = $$props.value);
		if ('isParentExpanded' in $$props) $$invalidate('isParentExpanded', isParentExpanded = $$props.isParentExpanded);
		if ('isParentArray' in $$props) $$invalidate('isParentArray', isParentArray = $$props.isParentArray);
		if ('nodeType' in $$props) $$invalidate('nodeType', nodeType = $$props.nodeType);
		if ('keys' in $$props) $$invalidate('keys', keys = $$props.keys);
	};

	$$self.$$.update = ($$dirty = { value: 1 }) => {
		if ($$dirty.value) { {
        let result = [];
        let i = 0;
        for(const entry of value) {
          result.push([i++, entry]);
        }
        $$invalidate('keys', keys = result);
      } }
	};

	return {
		key,
		value,
		isParentExpanded,
		isParentArray,
		nodeType,
		keys
	};
}

class JSONIterableArrayNode extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$b, create_fragment$b, safe_not_equal, ["key", "value", "isParentExpanded", "isParentArray", "nodeType"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "JSONIterableArrayNode", options, id: create_fragment$b.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.key === undefined && !('key' in props)) {
			console.warn("<JSONIterableArrayNode> was created without expected prop 'key'");
		}
		if (ctx.value === undefined && !('value' in props)) {
			console.warn("<JSONIterableArrayNode> was created without expected prop 'value'");
		}
		if (ctx.isParentExpanded === undefined && !('isParentExpanded' in props)) {
			console.warn("<JSONIterableArrayNode> was created without expected prop 'isParentExpanded'");
		}
		if (ctx.isParentArray === undefined && !('isParentArray' in props)) {
			console.warn("<JSONIterableArrayNode> was created without expected prop 'isParentArray'");
		}
		if (ctx.nodeType === undefined && !('nodeType' in props)) {
			console.warn("<JSONIterableArrayNode> was created without expected prop 'nodeType'");
		}
	}

	get key() {
		throw new Error("<JSONIterableArrayNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set key(value) {
		throw new Error("<JSONIterableArrayNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<JSONIterableArrayNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<JSONIterableArrayNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isParentExpanded() {
		throw new Error("<JSONIterableArrayNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isParentExpanded(value) {
		throw new Error("<JSONIterableArrayNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isParentArray() {
		throw new Error("<JSONIterableArrayNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isParentArray(value) {
		throw new Error("<JSONIterableArrayNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get nodeType() {
		throw new Error("<JSONIterableArrayNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set nodeType(value) {
		throw new Error("<JSONIterableArrayNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

class MapEntry {
  constructor(key, value) {
    this.key = key;
    this.value = value;
  }
}

/* node_modules\svelte-json-tree\src\JSONIterableMapNode.svelte generated by Svelte v3.12.0 */

function create_fragment$c(ctx) {
	var current;

	var jsonnested = new JSONNested({
		props: {
		key: ctx.key,
		isParentExpanded: ctx.isParentExpanded,
		isParentArray: ctx.isParentArray,
		keys: ctx.keys,
		getKey: getKey$1,
		getValue: getValue$1,
		label: "" + ctx.nodeType + "(" + ctx.keys.length + ")",
		colon: "",
		bracketOpen: '{',
		bracketClose: '}'
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			jsonnested.$$.fragment.c();
		},

		l: function claim(nodes) {
			jsonnested.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(jsonnested, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var jsonnested_changes = {};
			if (changed.key) jsonnested_changes.key = ctx.key;
			if (changed.isParentExpanded) jsonnested_changes.isParentExpanded = ctx.isParentExpanded;
			if (changed.isParentArray) jsonnested_changes.isParentArray = ctx.isParentArray;
			if (changed.keys) jsonnested_changes.keys = ctx.keys;
			if (changed.nodeType || changed.keys) jsonnested_changes.label = "" + ctx.nodeType + "(" + ctx.keys.length + ")";
			jsonnested.$set(jsonnested_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(jsonnested.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(jsonnested.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(jsonnested, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$c.name, type: "component", source: "", ctx });
	return block;
}

function getKey$1(entry) {
  return entry[0];
}

function getValue$1(entry) {
  return entry[1];
}

function instance$c($$self, $$props, $$invalidate) {
	

  let { key, value, isParentExpanded, isParentArray, nodeType } = $$props;

  let keys = [];

	const writable_props = ['key', 'value', 'isParentExpanded', 'isParentArray', 'nodeType'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<JSONIterableMapNode> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('key' in $$props) $$invalidate('key', key = $$props.key);
		if ('value' in $$props) $$invalidate('value', value = $$props.value);
		if ('isParentExpanded' in $$props) $$invalidate('isParentExpanded', isParentExpanded = $$props.isParentExpanded);
		if ('isParentArray' in $$props) $$invalidate('isParentArray', isParentArray = $$props.isParentArray);
		if ('nodeType' in $$props) $$invalidate('nodeType', nodeType = $$props.nodeType);
	};

	$$self.$capture_state = () => {
		return { key, value, isParentExpanded, isParentArray, nodeType, keys };
	};

	$$self.$inject_state = $$props => {
		if ('key' in $$props) $$invalidate('key', key = $$props.key);
		if ('value' in $$props) $$invalidate('value', value = $$props.value);
		if ('isParentExpanded' in $$props) $$invalidate('isParentExpanded', isParentExpanded = $$props.isParentExpanded);
		if ('isParentArray' in $$props) $$invalidate('isParentArray', isParentArray = $$props.isParentArray);
		if ('nodeType' in $$props) $$invalidate('nodeType', nodeType = $$props.nodeType);
		if ('keys' in $$props) $$invalidate('keys', keys = $$props.keys);
	};

	$$self.$$.update = ($$dirty = { value: 1 }) => {
		if ($$dirty.value) { {
        let result = [];
        let i = 0;
        for(const entry of value) {
          result.push([i++, new MapEntry(entry[0], entry[1])]);
        }
        $$invalidate('keys', keys = result);
      } }
	};

	return {
		key,
		value,
		isParentExpanded,
		isParentArray,
		nodeType,
		keys
	};
}

class JSONIterableMapNode extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$c, create_fragment$c, safe_not_equal, ["key", "value", "isParentExpanded", "isParentArray", "nodeType"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "JSONIterableMapNode", options, id: create_fragment$c.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.key === undefined && !('key' in props)) {
			console.warn("<JSONIterableMapNode> was created without expected prop 'key'");
		}
		if (ctx.value === undefined && !('value' in props)) {
			console.warn("<JSONIterableMapNode> was created without expected prop 'value'");
		}
		if (ctx.isParentExpanded === undefined && !('isParentExpanded' in props)) {
			console.warn("<JSONIterableMapNode> was created without expected prop 'isParentExpanded'");
		}
		if (ctx.isParentArray === undefined && !('isParentArray' in props)) {
			console.warn("<JSONIterableMapNode> was created without expected prop 'isParentArray'");
		}
		if (ctx.nodeType === undefined && !('nodeType' in props)) {
			console.warn("<JSONIterableMapNode> was created without expected prop 'nodeType'");
		}
	}

	get key() {
		throw new Error("<JSONIterableMapNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set key(value) {
		throw new Error("<JSONIterableMapNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<JSONIterableMapNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<JSONIterableMapNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isParentExpanded() {
		throw new Error("<JSONIterableMapNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isParentExpanded(value) {
		throw new Error("<JSONIterableMapNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isParentArray() {
		throw new Error("<JSONIterableMapNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isParentArray(value) {
		throw new Error("<JSONIterableMapNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get nodeType() {
		throw new Error("<JSONIterableMapNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set nodeType(value) {
		throw new Error("<JSONIterableMapNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\svelte-json-tree\src\JSONMapEntryNode.svelte generated by Svelte v3.12.0 */

function create_fragment$d(ctx) {
	var current;

	var jsonnested = new JSONNested({
		props: {
		expanded: ctx.expanded,
		isParentExpanded: ctx.isParentExpanded,
		isParentArray: ctx.isParentArray,
		key: ctx.isParentExpanded ? String(ctx.key) : ctx.value.key,
		keys: ctx.keys,
		getValue: ctx.getValue,
		label: ctx.isParentExpanded ? ': Entry ': '=> ',
		bracketOpen: '{',
		bracketClose: '}'
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			jsonnested.$$.fragment.c();
		},

		l: function claim(nodes) {
			jsonnested.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(jsonnested, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var jsonnested_changes = {};
			if (changed.expanded) jsonnested_changes.expanded = ctx.expanded;
			if (changed.isParentExpanded) jsonnested_changes.isParentExpanded = ctx.isParentExpanded;
			if (changed.isParentArray) jsonnested_changes.isParentArray = ctx.isParentArray;
			if (changed.isParentExpanded || changed.key || changed.value) jsonnested_changes.key = ctx.isParentExpanded ? String(ctx.key) : ctx.value.key;
			if (changed.isParentExpanded) jsonnested_changes.label = ctx.isParentExpanded ? ': Entry ': '=> ';
			jsonnested.$set(jsonnested_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(jsonnested.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(jsonnested.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(jsonnested, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$d.name, type: "component", source: "", ctx });
	return block;
}

function instance$d($$self, $$props, $$invalidate) {
	

  let { key, value, isParentExpanded, isParentArray, expanded = false } = $$props;

  const keys = ['key', 'value'];

  function getValue(key) {
    return value[key];
  }

	const writable_props = ['key', 'value', 'isParentExpanded', 'isParentArray', 'expanded'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<JSONMapEntryNode> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('key' in $$props) $$invalidate('key', key = $$props.key);
		if ('value' in $$props) $$invalidate('value', value = $$props.value);
		if ('isParentExpanded' in $$props) $$invalidate('isParentExpanded', isParentExpanded = $$props.isParentExpanded);
		if ('isParentArray' in $$props) $$invalidate('isParentArray', isParentArray = $$props.isParentArray);
		if ('expanded' in $$props) $$invalidate('expanded', expanded = $$props.expanded);
	};

	$$self.$capture_state = () => {
		return { key, value, isParentExpanded, isParentArray, expanded };
	};

	$$self.$inject_state = $$props => {
		if ('key' in $$props) $$invalidate('key', key = $$props.key);
		if ('value' in $$props) $$invalidate('value', value = $$props.value);
		if ('isParentExpanded' in $$props) $$invalidate('isParentExpanded', isParentExpanded = $$props.isParentExpanded);
		if ('isParentArray' in $$props) $$invalidate('isParentArray', isParentArray = $$props.isParentArray);
		if ('expanded' in $$props) $$invalidate('expanded', expanded = $$props.expanded);
	};

	return {
		key,
		value,
		isParentExpanded,
		isParentArray,
		expanded,
		keys,
		getValue
	};
}

class JSONMapEntryNode extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$d, create_fragment$d, safe_not_equal, ["key", "value", "isParentExpanded", "isParentArray", "expanded"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "JSONMapEntryNode", options, id: create_fragment$d.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.key === undefined && !('key' in props)) {
			console.warn("<JSONMapEntryNode> was created without expected prop 'key'");
		}
		if (ctx.value === undefined && !('value' in props)) {
			console.warn("<JSONMapEntryNode> was created without expected prop 'value'");
		}
		if (ctx.isParentExpanded === undefined && !('isParentExpanded' in props)) {
			console.warn("<JSONMapEntryNode> was created without expected prop 'isParentExpanded'");
		}
		if (ctx.isParentArray === undefined && !('isParentArray' in props)) {
			console.warn("<JSONMapEntryNode> was created without expected prop 'isParentArray'");
		}
	}

	get key() {
		throw new Error("<JSONMapEntryNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set key(value) {
		throw new Error("<JSONMapEntryNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<JSONMapEntryNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<JSONMapEntryNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isParentExpanded() {
		throw new Error("<JSONMapEntryNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isParentExpanded(value) {
		throw new Error("<JSONMapEntryNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isParentArray() {
		throw new Error("<JSONMapEntryNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isParentArray(value) {
		throw new Error("<JSONMapEntryNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get expanded() {
		throw new Error("<JSONMapEntryNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set expanded(value) {
		throw new Error("<JSONMapEntryNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\svelte-json-tree\src\JSONValueNode.svelte generated by Svelte v3.12.0 */

const file$9 = "node_modules\\svelte-json-tree\\src\\JSONValueNode.svelte";

function create_fragment$e(ctx) {
	var li, t0, span, t1_value = ctx.valueGetter ? ctx.valueGetter(ctx.value) : ctx.value + "", t1, span_class_value, current;

	var jsonkey = new JSONKey({
		props: {
		key: ctx.key,
		colon: ctx.colon,
		isParentExpanded: ctx.isParentExpanded,
		isParentArray: ctx.isParentArray
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			li = element("li");
			jsonkey.$$.fragment.c();
			t0 = space();
			span = element("span");
			t1 = text(t1_value);
			this.h();
		},

		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true }, false);
			var li_nodes = children(li);

			jsonkey.$$.fragment.l(li_nodes);
			t0 = claim_space(li_nodes);

			span = claim_element(li_nodes, "SPAN", { class: true }, false);
			var span_nodes = children(span);

			t1 = claim_text(span_nodes, t1_value);
			span_nodes.forEach(detach_dev);
			li_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(span, "class", span_class_value = "" + null_to_empty(ctx.nodeType) + " svelte-1m3zj06");
			add_location(span, file$9, 47, 2, 947);
			attr_dev(li, "class", "svelte-1m3zj06");
			toggle_class(li, "indent", ctx.isParentExpanded);
			add_location(li, file$9, 45, 0, 845);
		},

		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			mount_component(jsonkey, li, null);
			append_dev(li, t0);
			append_dev(li, span);
			append_dev(span, t1);
			current = true;
		},

		p: function update(changed, ctx) {
			var jsonkey_changes = {};
			if (changed.key) jsonkey_changes.key = ctx.key;
			if (changed.isParentExpanded) jsonkey_changes.isParentExpanded = ctx.isParentExpanded;
			if (changed.isParentArray) jsonkey_changes.isParentArray = ctx.isParentArray;
			jsonkey.$set(jsonkey_changes);

			if ((!current || changed.valueGetter || changed.value) && t1_value !== (t1_value = ctx.valueGetter ? ctx.valueGetter(ctx.value) : ctx.value + "")) {
				set_data_dev(t1, t1_value);
			}

			if ((!current || changed.nodeType) && span_class_value !== (span_class_value = "" + null_to_empty(ctx.nodeType) + " svelte-1m3zj06")) {
				attr_dev(span, "class", span_class_value);
			}

			if (changed.isParentExpanded) {
				toggle_class(li, "indent", ctx.isParentExpanded);
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(jsonkey.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(jsonkey.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(li);
			}

			destroy_component(jsonkey);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$e.name, type: "component", source: "", ctx });
	return block;
}

function instance$e($$self, $$props, $$invalidate) {
	

  let { key, value, valueGetter = null, isParentExpanded, isParentArray, nodeType } = $$props;

  const { colon } = getContext(contextKey);

	const writable_props = ['key', 'value', 'valueGetter', 'isParentExpanded', 'isParentArray', 'nodeType'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<JSONValueNode> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('key' in $$props) $$invalidate('key', key = $$props.key);
		if ('value' in $$props) $$invalidate('value', value = $$props.value);
		if ('valueGetter' in $$props) $$invalidate('valueGetter', valueGetter = $$props.valueGetter);
		if ('isParentExpanded' in $$props) $$invalidate('isParentExpanded', isParentExpanded = $$props.isParentExpanded);
		if ('isParentArray' in $$props) $$invalidate('isParentArray', isParentArray = $$props.isParentArray);
		if ('nodeType' in $$props) $$invalidate('nodeType', nodeType = $$props.nodeType);
	};

	$$self.$capture_state = () => {
		return { key, value, valueGetter, isParentExpanded, isParentArray, nodeType };
	};

	$$self.$inject_state = $$props => {
		if ('key' in $$props) $$invalidate('key', key = $$props.key);
		if ('value' in $$props) $$invalidate('value', value = $$props.value);
		if ('valueGetter' in $$props) $$invalidate('valueGetter', valueGetter = $$props.valueGetter);
		if ('isParentExpanded' in $$props) $$invalidate('isParentExpanded', isParentExpanded = $$props.isParentExpanded);
		if ('isParentArray' in $$props) $$invalidate('isParentArray', isParentArray = $$props.isParentArray);
		if ('nodeType' in $$props) $$invalidate('nodeType', nodeType = $$props.nodeType);
	};

	return {
		key,
		value,
		valueGetter,
		isParentExpanded,
		isParentArray,
		nodeType,
		colon
	};
}

class JSONValueNode extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$e, create_fragment$e, safe_not_equal, ["key", "value", "valueGetter", "isParentExpanded", "isParentArray", "nodeType"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "JSONValueNode", options, id: create_fragment$e.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.key === undefined && !('key' in props)) {
			console.warn("<JSONValueNode> was created without expected prop 'key'");
		}
		if (ctx.value === undefined && !('value' in props)) {
			console.warn("<JSONValueNode> was created without expected prop 'value'");
		}
		if (ctx.isParentExpanded === undefined && !('isParentExpanded' in props)) {
			console.warn("<JSONValueNode> was created without expected prop 'isParentExpanded'");
		}
		if (ctx.isParentArray === undefined && !('isParentArray' in props)) {
			console.warn("<JSONValueNode> was created without expected prop 'isParentArray'");
		}
		if (ctx.nodeType === undefined && !('nodeType' in props)) {
			console.warn("<JSONValueNode> was created without expected prop 'nodeType'");
		}
	}

	get key() {
		throw new Error("<JSONValueNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set key(value) {
		throw new Error("<JSONValueNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<JSONValueNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<JSONValueNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get valueGetter() {
		throw new Error("<JSONValueNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set valueGetter(value) {
		throw new Error("<JSONValueNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isParentExpanded() {
		throw new Error("<JSONValueNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isParentExpanded(value) {
		throw new Error("<JSONValueNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isParentArray() {
		throw new Error("<JSONValueNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isParentArray(value) {
		throw new Error("<JSONValueNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get nodeType() {
		throw new Error("<JSONValueNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set nodeType(value) {
		throw new Error("<JSONValueNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\svelte-json-tree\src\ErrorNode.svelte generated by Svelte v3.12.0 */

const file$a = "node_modules\\svelte-json-tree\\src\\ErrorNode.svelte";

function get_each_context$3(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.line = list[i];
	child_ctx.index = i;
	return child_ctx;
}

// (40:2) {#if isParentExpanded}
function create_if_block_2$3(ctx) {
	var current;

	var jsonarrow = new JSONArrow({
		props: { expanded: ctx.expanded },
		$$inline: true
	});
	jsonarrow.$on("click", ctx.toggleExpand);

	const block = {
		c: function create() {
			jsonarrow.$$.fragment.c();
		},

		l: function claim(nodes) {
			jsonarrow.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(jsonarrow, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var jsonarrow_changes = {};
			if (changed.expanded) jsonarrow_changes.expanded = ctx.expanded;
			jsonarrow.$set(jsonarrow_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(jsonarrow.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(jsonarrow.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(jsonarrow, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_2$3.name, type: "if", source: "(40:2) {#if isParentExpanded}", ctx });
	return block;
}

// (45:2) {#if isParentExpanded}
function create_if_block$7(ctx) {
	var ul, current;

	var if_block = (ctx.expanded) && create_if_block_1$4(ctx);

	const block = {
		c: function create() {
			ul = element("ul");
			if (if_block) if_block.c();
			this.h();
		},

		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			if (if_block) if_block.l(ul_nodes);
			ul_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(ul, "class", "svelte-zydcof");
			toggle_class(ul, "collapse", !ctx.expanded);
			add_location(ul, file$a, 45, 4, 1133);
		},

		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);
			if (if_block) if_block.m(ul, null);
			current = true;
		},

		p: function update(changed, ctx) {
			if (ctx.expanded) {
				if (if_block) {
					if_block.p(changed, ctx);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block_1$4(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(ul, null);
				}
			} else if (if_block) {
				group_outros();
				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});
				check_outros();
			}

			if (changed.expanded) {
				toggle_class(ul, "collapse", !ctx.expanded);
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},

		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(ul);
			}

			if (if_block) if_block.d();
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$7.name, type: "if", source: "(45:2) {#if isParentExpanded}", ctx });
	return block;
}

// (47:6) {#if expanded}
function create_if_block_1$4(ctx) {
	var t0, li, t1, span, current;

	var jsonnode = new JSONNode({
		props: { key: "message", value: ctx.value.message },
		$$inline: true
	});

	var jsonkey = new JSONKey({
		props: {
		key: "stack",
		colon: ":",
		isParentExpanded: ctx.isParentExpanded
	},
		$$inline: true
	});

	let each_value = ctx.stack;

	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			jsonnode.$$.fragment.c();
			t0 = space();
			li = element("li");
			jsonkey.$$.fragment.c();
			t1 = space();
			span = element("span");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
			this.h();
		},

		l: function claim(nodes) {
			jsonnode.$$.fragment.l(nodes);
			t0 = claim_space(nodes);

			li = claim_element(nodes, "LI", { class: true }, false);
			var li_nodes = children(li);

			jsonkey.$$.fragment.l(li_nodes);
			t1 = claim_space(li_nodes);

			span = claim_element(li_nodes, "SPAN", {}, false);
			var span_nodes = children(span);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(span_nodes);
			}

			span_nodes.forEach(detach_dev);
			li_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			add_location(span, file$a, 50, 10, 1329);
			attr_dev(li, "class", "svelte-zydcof");
			add_location(li, file$a, 48, 8, 1251);
		},

		m: function mount(target, anchor) {
			mount_component(jsonnode, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, li, anchor);
			mount_component(jsonkey, li, null);
			append_dev(li, t1);
			append_dev(li, span);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(span, null);
			}

			current = true;
		},

		p: function update(changed, ctx) {
			var jsonnode_changes = {};
			if (changed.value) jsonnode_changes.value = ctx.value.message;
			jsonnode.$set(jsonnode_changes);

			var jsonkey_changes = {};
			if (changed.isParentExpanded) jsonkey_changes.isParentExpanded = ctx.isParentExpanded;
			jsonkey.$set(jsonkey_changes);

			if (changed.stack) {
				each_value = ctx.stack;

				let i;
				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$3(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block$3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(span, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value.length;
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(jsonnode.$$.fragment, local);

			transition_in(jsonkey.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(jsonnode.$$.fragment, local);
			transition_out(jsonkey.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(jsonnode, detaching);

			if (detaching) {
				detach_dev(t0);
				detach_dev(li);
			}

			destroy_component(jsonkey);

			destroy_each(each_blocks, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_1$4.name, type: "if", source: "(47:6) {#if expanded}", ctx });
	return block;
}

// (52:12) {#each stack as line, index}
function create_each_block$3(ctx) {
	var span, t_value = ctx.line + "", t, br;

	const block = {
		c: function create() {
			span = element("span");
			t = text(t_value);
			br = element("br");
			this.h();
		},

		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true }, false);
			var span_nodes = children(span);

			t = claim_text(span_nodes, t_value);
			span_nodes.forEach(detach_dev);

			br = claim_element(nodes, "BR", {}, false);
			var br_nodes = children(br);

			br_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(span, "class", "svelte-zydcof");
			toggle_class(span, "indent", ctx.index > 0);
			add_location(span, file$a, 52, 14, 1391);
			add_location(br, file$a, 52, 58, 1435);
		},

		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
			insert_dev(target, br, anchor);
		},

		p: function update(changed, ctx) {
			if ((changed.stack) && t_value !== (t_value = ctx.line + "")) {
				set_data_dev(t, t_value);
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span);
				detach_dev(br);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block$3.name, type: "each", source: "(52:12) {#each stack as line, index}", ctx });
	return block;
}

function create_fragment$f(ctx) {
	var li, t0, t1, span, t2, t3_value = ctx.expanded?'':ctx.value.message + "", t3, t4, current, dispose;

	var if_block0 = (ctx.isParentExpanded) && create_if_block_2$3(ctx);

	var jsonkey = new JSONKey({
		props: {
		key: ctx.key,
		colon: ctx.context.colon,
		isParentExpanded: ctx.isParentExpanded,
		isParentArray: ctx.isParentArray
	},
		$$inline: true
	});

	var if_block1 = (ctx.isParentExpanded) && create_if_block$7(ctx);

	const block = {
		c: function create() {
			li = element("li");
			if (if_block0) if_block0.c();
			t0 = space();
			jsonkey.$$.fragment.c();
			t1 = space();
			span = element("span");
			t2 = text("Error: ");
			t3 = text(t3_value);
			t4 = space();
			if (if_block1) if_block1.c();
			this.h();
		},

		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true }, false);
			var li_nodes = children(li);

			if (if_block0) if_block0.l(li_nodes);
			t0 = claim_space(li_nodes);
			jsonkey.$$.fragment.l(li_nodes);
			t1 = claim_space(li_nodes);

			span = claim_element(li_nodes, "SPAN", {}, false);
			var span_nodes = children(span);

			t2 = claim_text(span_nodes, "Error: ");
			t3 = claim_text(span_nodes, t3_value);
			span_nodes.forEach(detach_dev);
			t4 = claim_space(li_nodes);
			if (if_block1) if_block1.l(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			add_location(span, file$a, 43, 2, 1032);
			attr_dev(li, "class", "svelte-zydcof");
			toggle_class(li, "indent", ctx.isParentExpanded);
			add_location(li, file$a, 38, 0, 830);
			dispose = listen_dev(span, "click", ctx.toggleExpand);
		},

		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			if (if_block0) if_block0.m(li, null);
			append_dev(li, t0);
			mount_component(jsonkey, li, null);
			append_dev(li, t1);
			append_dev(li, span);
			append_dev(span, t2);
			append_dev(span, t3);
			append_dev(li, t4);
			if (if_block1) if_block1.m(li, null);
			current = true;
		},

		p: function update(changed, ctx) {
			if (ctx.isParentExpanded) {
				if (if_block0) {
					if_block0.p(changed, ctx);
					transition_in(if_block0, 1);
				} else {
					if_block0 = create_if_block_2$3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(li, t0);
				}
			} else if (if_block0) {
				group_outros();
				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});
				check_outros();
			}

			var jsonkey_changes = {};
			if (changed.key) jsonkey_changes.key = ctx.key;
			if (changed.isParentExpanded) jsonkey_changes.isParentExpanded = ctx.isParentExpanded;
			if (changed.isParentArray) jsonkey_changes.isParentArray = ctx.isParentArray;
			jsonkey.$set(jsonkey_changes);

			if ((!current || changed.expanded || changed.value) && t3_value !== (t3_value = ctx.expanded?'':ctx.value.message + "")) {
				set_data_dev(t3, t3_value);
			}

			if (ctx.isParentExpanded) {
				if (if_block1) {
					if_block1.p(changed, ctx);
					transition_in(if_block1, 1);
				} else {
					if_block1 = create_if_block$7(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(li, null);
				}
			} else if (if_block1) {
				group_outros();
				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});
				check_outros();
			}

			if (changed.isParentExpanded) {
				toggle_class(li, "indent", ctx.isParentExpanded);
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);

			transition_in(jsonkey.$$.fragment, local);

			transition_in(if_block1);
			current = true;
		},

		o: function outro(local) {
			transition_out(if_block0);
			transition_out(jsonkey.$$.fragment, local);
			transition_out(if_block1);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(li);
			}

			if (if_block0) if_block0.d();

			destroy_component(jsonkey);

			if (if_block1) if_block1.d();
			dispose();
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$f.name, type: "component", source: "", ctx });
	return block;
}

function instance$f($$self, $$props, $$invalidate) {
	

  let { key, value, isParentExpanded, isParentArray, expanded = false } = $$props;

  const context = getContext(contextKey);
  setContext(contextKey, { ...context, colon: ':' });

  function toggleExpand() {
    $$invalidate('expanded', expanded = !expanded);
  }

	const writable_props = ['key', 'value', 'isParentExpanded', 'isParentArray', 'expanded'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<ErrorNode> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('key' in $$props) $$invalidate('key', key = $$props.key);
		if ('value' in $$props) $$invalidate('value', value = $$props.value);
		if ('isParentExpanded' in $$props) $$invalidate('isParentExpanded', isParentExpanded = $$props.isParentExpanded);
		if ('isParentArray' in $$props) $$invalidate('isParentArray', isParentArray = $$props.isParentArray);
		if ('expanded' in $$props) $$invalidate('expanded', expanded = $$props.expanded);
	};

	$$self.$capture_state = () => {
		return { key, value, isParentExpanded, isParentArray, expanded, stack };
	};

	$$self.$inject_state = $$props => {
		if ('key' in $$props) $$invalidate('key', key = $$props.key);
		if ('value' in $$props) $$invalidate('value', value = $$props.value);
		if ('isParentExpanded' in $$props) $$invalidate('isParentExpanded', isParentExpanded = $$props.isParentExpanded);
		if ('isParentArray' in $$props) $$invalidate('isParentArray', isParentArray = $$props.isParentArray);
		if ('expanded' in $$props) $$invalidate('expanded', expanded = $$props.expanded);
		if ('stack' in $$props) $$invalidate('stack', stack = $$props.stack);
	};

	let stack;

	$$self.$$.update = ($$dirty = { value: 1, isParentExpanded: 1 }) => {
		if ($$dirty.value) { $$invalidate('stack', stack = value.stack.split('\n')); }
		if ($$dirty.isParentExpanded) { if (!isParentExpanded) {
        $$invalidate('expanded', expanded = false);
      } }
	};

	return {
		key,
		value,
		isParentExpanded,
		isParentArray,
		expanded,
		context,
		toggleExpand,
		stack
	};
}

class ErrorNode extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$f, create_fragment$f, safe_not_equal, ["key", "value", "isParentExpanded", "isParentArray", "expanded"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "ErrorNode", options, id: create_fragment$f.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.key === undefined && !('key' in props)) {
			console.warn("<ErrorNode> was created without expected prop 'key'");
		}
		if (ctx.value === undefined && !('value' in props)) {
			console.warn("<ErrorNode> was created without expected prop 'value'");
		}
		if (ctx.isParentExpanded === undefined && !('isParentExpanded' in props)) {
			console.warn("<ErrorNode> was created without expected prop 'isParentExpanded'");
		}
		if (ctx.isParentArray === undefined && !('isParentArray' in props)) {
			console.warn("<ErrorNode> was created without expected prop 'isParentArray'");
		}
	}

	get key() {
		throw new Error("<ErrorNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set key(value) {
		throw new Error("<ErrorNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<ErrorNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<ErrorNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isParentExpanded() {
		throw new Error("<ErrorNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isParentExpanded(value) {
		throw new Error("<ErrorNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isParentArray() {
		throw new Error("<ErrorNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isParentArray(value) {
		throw new Error("<ErrorNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get expanded() {
		throw new Error("<ErrorNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set expanded(value) {
		throw new Error("<ErrorNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\svelte-json-tree\src\JSONNode.svelte generated by Svelte v3.12.0 */

// (43:0) {:else}
function create_else_block_1(ctx) {
	var current;

	var jsonvaluenode = new JSONValueNode({
		props: {
		key: ctx.key,
		value: ctx.value,
		isParentExpanded: ctx.isParentExpanded,
		isParentArray: ctx.isParentArray,
		nodeType: ctx.nodeType,
		valueGetter: ctx.func_6
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			jsonvaluenode.$$.fragment.c();
		},

		l: function claim(nodes) {
			jsonvaluenode.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(jsonvaluenode, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var jsonvaluenode_changes = {};
			if (changed.key) jsonvaluenode_changes.key = ctx.key;
			if (changed.value) jsonvaluenode_changes.value = ctx.value;
			if (changed.isParentExpanded) jsonvaluenode_changes.isParentExpanded = ctx.isParentExpanded;
			if (changed.isParentArray) jsonvaluenode_changes.isParentArray = ctx.isParentArray;
			jsonvaluenode.$set(jsonvaluenode_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(jsonvaluenode.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(jsonvaluenode.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(jsonvaluenode, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_1.name, type: "else", source: "(43:0) {:else}", ctx });
	return block;
}

// (41:59) 
function create_if_block_12(ctx) {
	var current;

	var jsonvaluenode = new JSONValueNode({
		props: {
		key: ctx.key,
		value: ctx.value,
		isParentExpanded: ctx.isParentExpanded,
		isParentArray: ctx.isParentArray,
		nodeType: ctx.nodeType,
		valueGetter: func_5
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			jsonvaluenode.$$.fragment.c();
		},

		l: function claim(nodes) {
			jsonvaluenode.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(jsonvaluenode, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var jsonvaluenode_changes = {};
			if (changed.key) jsonvaluenode_changes.key = ctx.key;
			if (changed.value) jsonvaluenode_changes.value = ctx.value;
			if (changed.isParentExpanded) jsonvaluenode_changes.isParentExpanded = ctx.isParentExpanded;
			if (changed.isParentArray) jsonvaluenode_changes.isParentArray = ctx.isParentArray;
			jsonvaluenode.$set(jsonvaluenode_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(jsonvaluenode.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(jsonvaluenode.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(jsonvaluenode, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_12.name, type: "if", source: "(41:59) ", ctx });
	return block;
}

// (39:35) 
function create_if_block_11(ctx) {
	var current;

	var jsonvaluenode = new JSONValueNode({
		props: {
		key: ctx.key,
		value: ctx.value,
		isParentExpanded: ctx.isParentExpanded,
		isParentArray: ctx.isParentArray,
		nodeType: ctx.nodeType,
		valueGetter: func_4
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			jsonvaluenode.$$.fragment.c();
		},

		l: function claim(nodes) {
			jsonvaluenode.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(jsonvaluenode, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var jsonvaluenode_changes = {};
			if (changed.key) jsonvaluenode_changes.key = ctx.key;
			if (changed.value) jsonvaluenode_changes.value = ctx.value;
			if (changed.isParentExpanded) jsonvaluenode_changes.isParentExpanded = ctx.isParentExpanded;
			if (changed.isParentArray) jsonvaluenode_changes.isParentArray = ctx.isParentArray;
			jsonvaluenode.$set(jsonvaluenode_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(jsonvaluenode.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(jsonvaluenode.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(jsonvaluenode, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_11.name, type: "if", source: "(39:35) ", ctx });
	return block;
}

// (37:30) 
function create_if_block_10(ctx) {
	var current;

	var jsonvaluenode = new JSONValueNode({
		props: {
		key: ctx.key,
		value: ctx.value,
		isParentExpanded: ctx.isParentExpanded,
		isParentArray: ctx.isParentArray,
		nodeType: ctx.nodeType,
		valueGetter: func_3
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			jsonvaluenode.$$.fragment.c();
		},

		l: function claim(nodes) {
			jsonvaluenode.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(jsonvaluenode, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var jsonvaluenode_changes = {};
			if (changed.key) jsonvaluenode_changes.key = ctx.key;
			if (changed.value) jsonvaluenode_changes.value = ctx.value;
			if (changed.isParentExpanded) jsonvaluenode_changes.isParentExpanded = ctx.isParentExpanded;
			if (changed.isParentArray) jsonvaluenode_changes.isParentArray = ctx.isParentArray;
			jsonvaluenode.$set(jsonvaluenode_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(jsonvaluenode.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(jsonvaluenode.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(jsonvaluenode, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_10.name, type: "if", source: "(37:30) ", ctx });
	return block;
}

// (35:30) 
function create_if_block_9(ctx) {
	var current;

	var jsonvaluenode = new JSONValueNode({
		props: {
		key: ctx.key,
		value: ctx.value,
		isParentExpanded: ctx.isParentExpanded,
		isParentArray: ctx.isParentArray,
		nodeType: ctx.nodeType,
		valueGetter: func_2
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			jsonvaluenode.$$.fragment.c();
		},

		l: function claim(nodes) {
			jsonvaluenode.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(jsonvaluenode, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var jsonvaluenode_changes = {};
			if (changed.key) jsonvaluenode_changes.key = ctx.key;
			if (changed.value) jsonvaluenode_changes.value = ctx.value;
			if (changed.isParentExpanded) jsonvaluenode_changes.isParentExpanded = ctx.isParentExpanded;
			if (changed.isParentArray) jsonvaluenode_changes.isParentArray = ctx.isParentArray;
			jsonvaluenode.$set(jsonvaluenode_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(jsonvaluenode.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(jsonvaluenode.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(jsonvaluenode, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_9.name, type: "if", source: "(35:30) ", ctx });
	return block;
}

// (33:33) 
function create_if_block_8(ctx) {
	var current;

	var jsonvaluenode = new JSONValueNode({
		props: {
		key: ctx.key,
		value: ctx.value,
		isParentExpanded: ctx.isParentExpanded,
		isParentArray: ctx.isParentArray,
		nodeType: ctx.nodeType,
		valueGetter: func_1
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			jsonvaluenode.$$.fragment.c();
		},

		l: function claim(nodes) {
			jsonvaluenode.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(jsonvaluenode, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var jsonvaluenode_changes = {};
			if (changed.key) jsonvaluenode_changes.key = ctx.key;
			if (changed.value) jsonvaluenode_changes.value = ctx.value;
			if (changed.isParentExpanded) jsonvaluenode_changes.isParentExpanded = ctx.isParentExpanded;
			if (changed.isParentArray) jsonvaluenode_changes.isParentArray = ctx.isParentArray;
			jsonvaluenode.$set(jsonvaluenode_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(jsonvaluenode.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(jsonvaluenode.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(jsonvaluenode, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_8.name, type: "if", source: "(33:33) ", ctx });
	return block;
}

// (31:32) 
function create_if_block_7(ctx) {
	var current;

	var jsonvaluenode = new JSONValueNode({
		props: {
		key: ctx.key,
		value: ctx.value,
		isParentExpanded: ctx.isParentExpanded,
		isParentArray: ctx.isParentArray,
		nodeType: ctx.nodeType
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			jsonvaluenode.$$.fragment.c();
		},

		l: function claim(nodes) {
			jsonvaluenode.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(jsonvaluenode, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var jsonvaluenode_changes = {};
			if (changed.key) jsonvaluenode_changes.key = ctx.key;
			if (changed.value) jsonvaluenode_changes.value = ctx.value;
			if (changed.isParentExpanded) jsonvaluenode_changes.isParentExpanded = ctx.isParentExpanded;
			if (changed.isParentArray) jsonvaluenode_changes.isParentArray = ctx.isParentArray;
			jsonvaluenode.$set(jsonvaluenode_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(jsonvaluenode.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(jsonvaluenode.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(jsonvaluenode, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_7.name, type: "if", source: "(31:32) ", ctx });
	return block;
}

// (29:32) 
function create_if_block_6(ctx) {
	var current;

	var jsonvaluenode = new JSONValueNode({
		props: {
		key: ctx.key,
		value: ctx.value,
		isParentExpanded: ctx.isParentExpanded,
		isParentArray: ctx.isParentArray,
		nodeType: ctx.nodeType,
		valueGetter: func
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			jsonvaluenode.$$.fragment.c();
		},

		l: function claim(nodes) {
			jsonvaluenode.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(jsonvaluenode, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var jsonvaluenode_changes = {};
			if (changed.key) jsonvaluenode_changes.key = ctx.key;
			if (changed.value) jsonvaluenode_changes.value = ctx.value;
			if (changed.isParentExpanded) jsonvaluenode_changes.isParentExpanded = ctx.isParentExpanded;
			if (changed.isParentArray) jsonvaluenode_changes.isParentArray = ctx.isParentArray;
			jsonvaluenode.$set(jsonvaluenode_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(jsonvaluenode.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(jsonvaluenode.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(jsonvaluenode, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_6.name, type: "if", source: "(29:32) ", ctx });
	return block;
}

// (27:34) 
function create_if_block_5(ctx) {
	var current;

	var jsonmapentrynode = new JSONMapEntryNode({
		props: {
		key: ctx.key,
		value: ctx.value,
		isParentExpanded: ctx.isParentExpanded,
		isParentArray: ctx.isParentArray,
		nodeType: ctx.nodeType
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			jsonmapentrynode.$$.fragment.c();
		},

		l: function claim(nodes) {
			jsonmapentrynode.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(jsonmapentrynode, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var jsonmapentrynode_changes = {};
			if (changed.key) jsonmapentrynode_changes.key = ctx.key;
			if (changed.value) jsonmapentrynode_changes.value = ctx.value;
			if (changed.isParentExpanded) jsonmapentrynode_changes.isParentExpanded = ctx.isParentExpanded;
			if (changed.isParentArray) jsonmapentrynode_changes.isParentArray = ctx.isParentArray;
			jsonmapentrynode.$set(jsonmapentrynode_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(jsonmapentrynode.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(jsonmapentrynode.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(jsonmapentrynode, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_5.name, type: "if", source: "(27:34) ", ctx });
	return block;
}

// (21:78) 
function create_if_block_3$1(ctx) {
	var current_block_type_index, if_block, if_block_anchor, current;

	var if_block_creators = [
		create_if_block_4,
		create_else_block$3
	];

	var if_blocks = [];

	function select_block_type_1(changed, ctx) {
		if (typeof ctx.value.set === 'function') return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(null, ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},

		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},

		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(changed, ctx);
			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(changed, ctx);
			} else {
				group_outros();
				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});
				check_outros();

				if_block = if_blocks[current_block_type_index];
				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}
				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},

		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},

		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);

			if (detaching) {
				detach_dev(if_block_anchor);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_3$1.name, type: "if", source: "(21:78) ", ctx });
	return block;
}

// (19:31) 
function create_if_block_2$4(ctx) {
	var current;

	var jsonarraynode = new JSONArrayNode({
		props: {
		key: ctx.key,
		value: ctx.value,
		isParentExpanded: ctx.isParentExpanded,
		isParentArray: ctx.isParentArray
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			jsonarraynode.$$.fragment.c();
		},

		l: function claim(nodes) {
			jsonarraynode.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(jsonarraynode, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var jsonarraynode_changes = {};
			if (changed.key) jsonarraynode_changes.key = ctx.key;
			if (changed.value) jsonarraynode_changes.value = ctx.value;
			if (changed.isParentExpanded) jsonarraynode_changes.isParentExpanded = ctx.isParentExpanded;
			if (changed.isParentArray) jsonarraynode_changes.isParentArray = ctx.isParentArray;
			jsonarraynode.$set(jsonarraynode_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(jsonarraynode.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(jsonarraynode.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(jsonarraynode, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_2$4.name, type: "if", source: "(19:31) ", ctx });
	return block;
}

// (17:31) 
function create_if_block_1$5(ctx) {
	var current;

	var errornode = new ErrorNode({
		props: {
		key: ctx.key,
		value: ctx.value,
		isParentExpanded: ctx.isParentExpanded,
		isParentArray: ctx.isParentArray
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			errornode.$$.fragment.c();
		},

		l: function claim(nodes) {
			errornode.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(errornode, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var errornode_changes = {};
			if (changed.key) errornode_changes.key = ctx.key;
			if (changed.value) errornode_changes.value = ctx.value;
			if (changed.isParentExpanded) errornode_changes.isParentExpanded = ctx.isParentExpanded;
			if (changed.isParentArray) errornode_changes.isParentArray = ctx.isParentArray;
			errornode.$set(errornode_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(errornode.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(errornode.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(errornode, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_1$5.name, type: "if", source: "(17:31) ", ctx });
	return block;
}

// (15:0) {#if nodeType === 'Object'}
function create_if_block$8(ctx) {
	var current;

	var jsonobjectnode = new JSONObjectNode({
		props: {
		key: ctx.key,
		value: ctx.value,
		isParentExpanded: ctx.isParentExpanded,
		isParentArray: ctx.isParentArray,
		nodeType: ctx.nodeType
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			jsonobjectnode.$$.fragment.c();
		},

		l: function claim(nodes) {
			jsonobjectnode.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(jsonobjectnode, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var jsonobjectnode_changes = {};
			if (changed.key) jsonobjectnode_changes.key = ctx.key;
			if (changed.value) jsonobjectnode_changes.value = ctx.value;
			if (changed.isParentExpanded) jsonobjectnode_changes.isParentExpanded = ctx.isParentExpanded;
			if (changed.isParentArray) jsonobjectnode_changes.isParentArray = ctx.isParentArray;
			jsonobjectnode.$set(jsonobjectnode_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(jsonobjectnode.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(jsonobjectnode.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(jsonobjectnode, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$8.name, type: "if", source: "(15:0) {#if nodeType === 'Object'}", ctx });
	return block;
}

// (24:2) {:else}
function create_else_block$3(ctx) {
	var current;

	var jsoniterablearraynode = new JSONIterableArrayNode({
		props: {
		key: ctx.key,
		value: ctx.value,
		isParentExpanded: ctx.isParentExpanded,
		isParentArray: ctx.isParentArray,
		nodeType: ctx.nodeType
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			jsoniterablearraynode.$$.fragment.c();
		},

		l: function claim(nodes) {
			jsoniterablearraynode.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(jsoniterablearraynode, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var jsoniterablearraynode_changes = {};
			if (changed.key) jsoniterablearraynode_changes.key = ctx.key;
			if (changed.value) jsoniterablearraynode_changes.value = ctx.value;
			if (changed.isParentExpanded) jsoniterablearraynode_changes.isParentExpanded = ctx.isParentExpanded;
			if (changed.isParentArray) jsoniterablearraynode_changes.isParentArray = ctx.isParentArray;
			jsoniterablearraynode.$set(jsoniterablearraynode_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(jsoniterablearraynode.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(jsoniterablearraynode.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(jsoniterablearraynode, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block$3.name, type: "else", source: "(24:2) {:else}", ctx });
	return block;
}

// (22:2) {#if typeof value.set === 'function'}
function create_if_block_4(ctx) {
	var current;

	var jsoniterablemapnode = new JSONIterableMapNode({
		props: {
		key: ctx.key,
		value: ctx.value,
		isParentExpanded: ctx.isParentExpanded,
		isParentArray: ctx.isParentArray,
		nodeType: ctx.nodeType
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			jsoniterablemapnode.$$.fragment.c();
		},

		l: function claim(nodes) {
			jsoniterablemapnode.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(jsoniterablemapnode, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var jsoniterablemapnode_changes = {};
			if (changed.key) jsoniterablemapnode_changes.key = ctx.key;
			if (changed.value) jsoniterablemapnode_changes.value = ctx.value;
			if (changed.isParentExpanded) jsoniterablemapnode_changes.isParentExpanded = ctx.isParentExpanded;
			if (changed.isParentArray) jsoniterablemapnode_changes.isParentArray = ctx.isParentArray;
			jsoniterablemapnode.$set(jsoniterablemapnode_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(jsoniterablemapnode.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(jsoniterablemapnode.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(jsoniterablemapnode, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_4.name, type: "if", source: "(22:2) {#if typeof value.set === 'function'}", ctx });
	return block;
}

function create_fragment$g(ctx) {
	var current_block_type_index, if_block, if_block_anchor, current;

	var if_block_creators = [
		create_if_block$8,
		create_if_block_1$5,
		create_if_block_2$4,
		create_if_block_3$1,
		create_if_block_5,
		create_if_block_6,
		create_if_block_7,
		create_if_block_8,
		create_if_block_9,
		create_if_block_10,
		create_if_block_11,
		create_if_block_12,
		create_else_block_1
	];

	var if_blocks = [];

	function select_block_type(changed, ctx) {
		if (ctx.nodeType === 'Object') return 0;
		if (ctx.nodeType === 'Error') return 1;
		if (ctx.nodeType === 'Array') return 2;
		if (ctx.nodeType === 'Iterable' || ctx.nodeType === 'Map' || ctx.nodeType === 'Set') return 3;
		if (ctx.nodeType === 'MapEntry') return 4;
		if (ctx.nodeType === 'String') return 5;
		if (ctx.nodeType === 'Number') return 6;
		if (ctx.nodeType === 'Boolean') return 7;
		if (ctx.nodeType === 'Date') return 8;
		if (ctx.nodeType === 'Null') return 9;
		if (ctx.nodeType === 'Undefined') return 10;
		if (ctx.nodeType === 'Function' || ctx.nodeType === 'Symbol') return 11;
		return 12;
	}

	current_block_type_index = select_block_type(null, ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},

		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},

		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			if_block.p(changed, ctx);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},

		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},

		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);

			if (detaching) {
				detach_dev(if_block_anchor);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$g.name, type: "component", source: "", ctx });
	return block;
}

const func = (raw) => `"${raw}"`;

const func_1 = (raw) => (raw ? 'true' : 'false');

const func_2 = (raw) => raw.toISOString();

const func_3 = () => 'null';

const func_4 = () => 'undefined';

const func_5 = (raw) => raw.toString();

function instance$g($$self, $$props, $$invalidate) {
	

  let { key, value, isParentExpanded, isParentArray } = $$props;
  const nodeType = objType(value);

	const writable_props = ['key', 'value', 'isParentExpanded', 'isParentArray'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<JSONNode> was created with unknown prop '${key}'`);
	});

	const func_6 = () => `<${nodeType}>`;

	$$self.$set = $$props => {
		if ('key' in $$props) $$invalidate('key', key = $$props.key);
		if ('value' in $$props) $$invalidate('value', value = $$props.value);
		if ('isParentExpanded' in $$props) $$invalidate('isParentExpanded', isParentExpanded = $$props.isParentExpanded);
		if ('isParentArray' in $$props) $$invalidate('isParentArray', isParentArray = $$props.isParentArray);
	};

	$$self.$capture_state = () => {
		return { key, value, isParentExpanded, isParentArray };
	};

	$$self.$inject_state = $$props => {
		if ('key' in $$props) $$invalidate('key', key = $$props.key);
		if ('value' in $$props) $$invalidate('value', value = $$props.value);
		if ('isParentExpanded' in $$props) $$invalidate('isParentExpanded', isParentExpanded = $$props.isParentExpanded);
		if ('isParentArray' in $$props) $$invalidate('isParentArray', isParentArray = $$props.isParentArray);
	};

	return {
		key,
		value,
		isParentExpanded,
		isParentArray,
		nodeType,
		func_6
	};
}

class JSONNode extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$g, create_fragment$g, safe_not_equal, ["key", "value", "isParentExpanded", "isParentArray"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "JSONNode", options, id: create_fragment$g.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.key === undefined && !('key' in props)) {
			console.warn("<JSONNode> was created without expected prop 'key'");
		}
		if (ctx.value === undefined && !('value' in props)) {
			console.warn("<JSONNode> was created without expected prop 'value'");
		}
		if (ctx.isParentExpanded === undefined && !('isParentExpanded' in props)) {
			console.warn("<JSONNode> was created without expected prop 'isParentExpanded'");
		}
		if (ctx.isParentArray === undefined && !('isParentArray' in props)) {
			console.warn("<JSONNode> was created without expected prop 'isParentArray'");
		}
	}

	get key() {
		throw new Error("<JSONNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set key(value) {
		throw new Error("<JSONNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<JSONNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<JSONNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isParentExpanded() {
		throw new Error("<JSONNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isParentExpanded(value) {
		throw new Error("<JSONNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isParentArray() {
		throw new Error("<JSONNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isParentArray(value) {
		throw new Error("<JSONNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\svelte-json-tree\src\index.svelte generated by Svelte v3.12.0 */

const file$b = "node_modules\\svelte-json-tree\\src\\index.svelte";

function create_fragment$h(ctx) {
	var ul, current;

	var jsonnode = new JSONNode({
		props: {
		key: ctx.key,
		value: ctx.value,
		isParentExpanded: true,
		isParentArray: false
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			ul = element("ul");
			jsonnode.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			jsonnode.$$.fragment.l(ul_nodes);
			ul_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(ul, "class", "svelte-fisoh6");
			add_location(ul, file$b, 36, 0, 867);
		},

		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);
			mount_component(jsonnode, ul, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var jsonnode_changes = {};
			if (changed.key) jsonnode_changes.key = ctx.key;
			if (changed.value) jsonnode_changes.value = ctx.value;
			jsonnode.$set(jsonnode_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(jsonnode.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(jsonnode.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(ul);
			}

			destroy_component(jsonnode);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$h.name, type: "component", source: "", ctx });
	return block;
}

function instance$h($$self, $$props, $$invalidate) {
	

  setContext(contextKey, {});

  let { key = '', value } = $$props;

	const writable_props = ['key', 'value'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<Index> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('key' in $$props) $$invalidate('key', key = $$props.key);
		if ('value' in $$props) $$invalidate('value', value = $$props.value);
	};

	$$self.$capture_state = () => {
		return { key, value };
	};

	$$self.$inject_state = $$props => {
		if ('key' in $$props) $$invalidate('key', key = $$props.key);
		if ('value' in $$props) $$invalidate('value', value = $$props.value);
	};

	return { key, value };
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$h, create_fragment$h, safe_not_equal, ["key", "value"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Index", options, id: create_fragment$h.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.value === undefined && !('value' in props)) {
			console.warn("<Index> was created without expected prop 'value'");
		}
	}

	get key() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set key(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\@sveltejs\svelte-repl\src\Output\Console.svelte generated by Svelte v3.12.0 */

const file$c = "node_modules\\@sveltejs\\svelte-repl\\src\\Output\\Console.svelte";

function get_each_context_1(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.arg = list[i];
	return child_ctx;
}

function get_each_context$4(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.log = list[i];
	return child_ctx;
}

// (10:3) {#if log.count > 1}
function create_if_block_2$5(ctx) {
	var span, t0_value = ctx.log.count + "", t0, t1;

	const block = {
		c: function create() {
			span = element("span");
			t0 = text(t0_value);
			t1 = text("x");
			this.h();
		},

		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true }, false);
			var span_nodes = children(span);

			t0 = claim_text(span_nodes, t0_value);
			t1 = claim_text(span_nodes, "x");
			span_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(span, "class", "count svelte-wfxu7a");
			add_location(span, file$c, 10, 4, 193);
		},

		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t0);
			append_dev(span, t1);
		},

		p: function update(changed, ctx) {
			if ((changed.logs) && t0_value !== (t0_value = ctx.log.count + "")) {
				set_data_dev(t0, t0_value);
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_2$5.name, type: "if", source: "(10:3) {#if log.count > 1}", ctx });
	return block;
}

// (18:3) {:else}
function create_else_block$4(ctx) {
	var each_1_anchor, current;

	let each_value_1 = ctx.log.args;

	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},

		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},

		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			if (changed.logs) {
				each_value_1 = ctx.log.args;

				let i;
				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();
				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}
				check_outros();
			}
		},

		i: function intro(local) {
			if (current) return;
			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},

		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},

		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);

			if (detaching) {
				detach_dev(each_1_anchor);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block$4.name, type: "else", source: "(18:3) {:else}", ctx });
	return block;
}

// (16:40) 
function create_if_block_1$6(ctx) {
	var span, t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Message could not be cloned. Open devtools to see it");
			this.h();
		},

		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true }, false);
			var span_nodes = children(span);

			t = claim_text(span_nodes, "Message could not be cloned. Open devtools to see it");
			span_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(span, "class", "info error svelte-wfxu7a");
			add_location(span, file$c, 16, 4, 369);
		},

		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},

		p: noop,
		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_1$6.name, type: "if", source: "(16:40) ", ctx });
	return block;
}

// (14:3) {#if log.level === 'clear'}
function create_if_block$9(ctx) {
	var span, t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Console was cleared");
			this.h();
		},

		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true }, false);
			var span_nodes = children(span);

			t = claim_text(span_nodes, "Console was cleared");
			span_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(span, "class", "info svelte-wfxu7a");
			add_location(span, file$c, 14, 4, 278);
		},

		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},

		p: noop,
		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(span);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$9.name, type: "if", source: "(14:3) {#if log.level === 'clear'}", ctx });
	return block;
}

// (19:4) {#each log.args as arg}
function create_each_block_1(ctx) {
	var current;

	var jsonnode = new Index({
		props: { value: ctx.arg },
		$$inline: true
	});

	const block = {
		c: function create() {
			jsonnode.$$.fragment.c();
		},

		l: function claim(nodes) {
			jsonnode.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(jsonnode, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var jsonnode_changes = {};
			if (changed.logs) jsonnode_changes.value = ctx.arg;
			jsonnode.$set(jsonnode_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(jsonnode.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(jsonnode.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(jsonnode, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block_1.name, type: "each", source: "(19:4) {#each log.args as arg}", ctx });
	return block;
}

// (8:1) {#each logs as log}
function create_each_block$4(ctx) {
	var div, t0, current_block_type_index, if_block1, t1, div_class_value, current;

	var if_block0 = (ctx.log.count > 1) && create_if_block_2$5(ctx);

	var if_block_creators = [
		create_if_block$9,
		create_if_block_1$6,
		create_else_block$4
	];

	var if_blocks = [];

	function select_block_type(changed, ctx) {
		if (ctx.log.level === 'clear') return 0;
		if (ctx.log.level === 'unclonable') return 1;
		return 2;
	}

	current_block_type_index = select_block_type(null, ctx);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if_block1.c();
			t1 = space();
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			if (if_block0) if_block0.l(div_nodes);
			t0 = claim_space(div_nodes);
			if_block1.l(div_nodes);
			t1 = claim_space(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(div, "class", div_class_value = "log console-" + ctx.log.level + " svelte-wfxu7a");
			add_location(div, file$c, 8, 2, 128);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append_dev(div, t0);
			if_blocks[current_block_type_index].m(div, null);
			append_dev(div, t1);
			current = true;
		},

		p: function update(changed, ctx) {
			if (ctx.log.count > 1) {
				if (if_block0) {
					if_block0.p(changed, ctx);
				} else {
					if_block0 = create_if_block_2$5(ctx);
					if_block0.c();
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			var previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(changed, ctx);
			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(changed, ctx);
			} else {
				group_outros();
				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});
				check_outros();

				if_block1 = if_blocks[current_block_type_index];
				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				}
				transition_in(if_block1, 1);
				if_block1.m(div, t1);
			}

			if ((!current || changed.logs) && div_class_value !== (div_class_value = "log console-" + ctx.log.level + " svelte-wfxu7a")) {
				attr_dev(div, "class", div_class_value);
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(if_block1);
			current = true;
		},

		o: function outro(local) {
			transition_out(if_block1);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			if (if_block0) if_block0.d();
			if_blocks[current_block_type_index].d();
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block$4.name, type: "each", source: "(8:1) {#each logs as log}", ctx });
	return block;
}

function create_fragment$i(ctx) {
	var div, current;

	let each_value = ctx.logs;

	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(div, "class", "container");
			add_location(div, file$c, 6, 0, 81);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},

		p: function update(changed, ctx) {
			if (changed.logs) {
				each_value = ctx.logs;

				let i;
				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$4(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$4(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();
				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}
				check_outros();
			}
		},

		i: function intro(local) {
			if (current) return;
			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},

		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_each(each_blocks, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$i.name, type: "component", source: "", ctx });
	return block;
}

function instance$i($$self, $$props, $$invalidate) {
	let { logs } = $$props;

	const writable_props = ['logs'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<Console> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('logs' in $$props) $$invalidate('logs', logs = $$props.logs);
	};

	$$self.$capture_state = () => {
		return { logs };
	};

	$$self.$inject_state = $$props => {
		if ('logs' in $$props) $$invalidate('logs', logs = $$props.logs);
	};

	return { logs };
}

class Console extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$i, create_fragment$i, safe_not_equal, ["logs"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Console", options, id: create_fragment$i.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.logs === undefined && !('logs' in props)) {
			console.warn("<Console> was created without expected prop 'logs'");
		}
	}

	get logs() {
		throw new Error("<Console>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set logs(value) {
		throw new Error("<Console>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var srcdoc = "<!doctype html>\n<html>\n\t<head>\n\t\t<style>\n\t\t\thtml, body {\n\tposition: relative;\n\twidth: 100%;\n\theight: 100%;\n}\n\nbody {\n\tcolor: #333;\n\tmargin: 0;\n\tpadding: 8px;\n\tbox-sizing: border-box;\n\tfont-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif;\n}\n\na {\n\tcolor: rgb(0,100,200);\n\ttext-decoration: none;\n}\n\na:hover {\n\ttext-decoration: underline;\n}\n\na:visited {\n\tcolor: rgb(0,80,160);\n}\n\nlabel {\n\tdisplay: block;\n}\n\ninput, button, select, textarea {\n\tfont-family: inherit;\n\tfont-size: inherit;\n\tpadding: 0.4em;\n\tmargin: 0 0 0.5em 0;\n\tbox-sizing: border-box;\n\tborder: 1px solid #ccc;\n\tborder-radius: 2px;\n}\n\ninput:disabled {\n\tcolor: #ccc;\n}\n\ninput[type=\"range\"] {\n\theight: 0;\n}\n\nbutton {\n\tcolor: #333;\n\tbackground-color: #f4f4f4;\n\toutline: none;\n}\n\nbutton:disabled {\n\tcolor: #999;\n}\n\nbutton:not(:disabled):active {\n\tbackground-color: #ddd;\n}\n\nbutton:focus {\n\tborder-color: #666;\n}\n\n\t\t</style>\n\n\t\t<script>\n\t\t\t(function(){\n\t\t\t\tfunction handle_message(ev) {\n\t\t\t\t\tlet { action, cmd_id } = ev.data;\n\t\t\t\t\tconst send_message = (payload) => parent.postMessage( { ...payload }, ev.origin);\n\t\t\t\t\tconst send_reply = (payload) => send_message({ ...payload, cmd_id });\n\t\t\t\t\tconst send_ok = () => send_reply({ action: 'cmd_ok' });\n\t\t\t\t\tconst send_error = (message, stack) => send_reply({ action: 'cmd_error', message, stack });\n\n\t\t\t\t\tif (action === 'eval') {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst { script } = ev.data.args;\n\t\t\t\t\t\t\teval(script);\n\t\t\t\t\t\t\tsend_ok();\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tsend_error(e.message, e.stack);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (action === 'catch_clicks') {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst top_origin = ev.origin;\n\t\t\t\t\t\t\tdocument.body.addEventListener('click', event => {\n\t\t\t\t\t\t\t\tif (event.which !== 1) return;\n\t\t\t\t\t\t\t\tif (event.metaKey || event.ctrlKey || event.shiftKey) return;\n\t\t\t\t\t\t\t\tif (event.defaultPrevented) return;\n\n\t\t\t\t\t\t\t\t// ensure target is a link\n\t\t\t\t\t\t\t\tlet el = event.target;\n\t\t\t\t\t\t\t\twhile (el && el.nodeName !== 'A') el = el.parentNode;\n\t\t\t\t\t\t\t\tif (!el || el.nodeName !== 'A') return;\n\n\t\t\t\t\t\t\t\tif (el.hasAttribute('download') || el.getAttribute('rel') === 'external' || el.target) return;\n\n\t\t\t\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t\t\t\tif (el.href.startsWith(top_origin)) {\n\t\t\t\t\t\t\t\t\tconst url = new URL(el.href);\n\t\t\t\t\t\t\t\t\tif (url.hash[0] === '#') {\n\t\t\t\t\t\t\t\t\t\twindow.location.hash = url.hash;\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\twindow.open(el.href, '_blank');\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tsend_ok();\n\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\tsend_error(e.message, e.stack);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\twindow.addEventListener('message', handle_message, false);\n\n\t\t\t\twindow.onerror = function (msg, url, lineNo, columnNo, error) {\n\t\t\t\t\tparent.postMessage({ action: 'error', value: error }, '*');\n\t\t\t\t}\n\n\t\t\t\twindow.addEventListener(\"unhandledrejection\", event => {\n\t\t\t\t\tparent.postMessage({ action: 'unhandledrejection', value: event.reason }, '*');\n\t\t\t\t});\n\t\t\t}).call(this);\n\n\t\t\t// TODO handle group/groupEnd, table, trace, etc\n\t\t\tlet previous = { level: null, args: null };\n\n\t\t\t['clear', 'log', 'info', 'dir', 'warn', 'error'].forEach((level) => {\n\t\t\t\tconst original = console[level];\n\t\t\t\tconsole[level] = (...args) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tprevious.level === level &&\n\t\t\t\t\t\tprevious.args.length === args.length &&\n\t\t\t\t\t\tprevious.args.every((a, i) => a === args[i])\n\t\t\t\t\t) {\n\t\t\t\t\t\tparent.postMessage({ action: 'console', level, duplicate: true }, '*');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprevious = { level, args };\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tparent.postMessage({ action: 'console', level, args }, '*');\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\tparent.postMessage({ action: 'console', level: 'unclonable' }, '*');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\toriginal(...args);\n\t\t\t\t}\n\t\t\t})\n\t\t</script>\n\t</head>\n\t<body></body>\n</html>";

/* node_modules\@sveltejs\svelte-repl\src\Output\Viewer.svelte generated by Svelte v3.12.0 */
const { console: console_1$1 } = globals;

const file$d = "node_modules\\@sveltejs\\svelte-repl\\src\\Output\\Viewer.svelte";

// (206:2) <div slot="main">
function create_main_slot(ctx) {
	var div, iframe_1, iframe_1_sandbox_value, iframe_1_class_value;

	const block = {
		c: function create() {
			div = element("div");
			iframe_1 = element("iframe");
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true }, false);
			var div_nodes = children(div);

			iframe_1 = claim_element(div_nodes, "IFRAME", { title: true, sandbox: true, class: true, srcdoc: true }, false);
			var iframe_1_nodes = children(iframe_1);

			iframe_1_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(iframe_1, "title", "Result");
			attr_dev(iframe_1, "sandbox", iframe_1_sandbox_value = "allow-popups-to-escape-sandbox allow-scripts allow-popups allow-forms allow-pointer-lock allow-top-navigation allow-modals " + (ctx.relaxed ? 'allow-same-origin' : ''));
			attr_dev(iframe_1, "class", iframe_1_class_value = "" + null_to_empty((ctx.error || pending || ctx.pending_imports ? 'greyed-out' : '')) + " svelte-ivx2cg");
			attr_dev(iframe_1, "srcdoc", srcdoc);
			toggle_class(iframe_1, "inited", ctx.inited);
			add_location(iframe_1, file$d, 206, 3, 3990);
			attr_dev(div, "slot", "main");
			add_location(div, file$d, 205, 2, 3969);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, iframe_1);
			ctx.iframe_1_binding(iframe_1);
		},

		p: function update(changed, ctx) {
			if ((changed.relaxed) && iframe_1_sandbox_value !== (iframe_1_sandbox_value = "allow-popups-to-escape-sandbox allow-scripts allow-popups allow-forms allow-pointer-lock allow-top-navigation allow-modals " + (ctx.relaxed ? 'allow-same-origin' : ''))) {
				attr_dev(iframe_1, "sandbox", iframe_1_sandbox_value);
			}

			if ((changed.error || changed.pending_imports) && iframe_1_class_value !== (iframe_1_class_value = "" + null_to_empty((ctx.error || pending || ctx.pending_imports ? 'greyed-out' : '')) + " svelte-ivx2cg")) {
				attr_dev(iframe_1, "class", iframe_1_class_value);
			}

			if ((changed.error || changed.pending_imports || changed.inited)) {
				toggle_class(iframe_1, "inited", ctx.inited);
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			ctx.iframe_1_binding(null);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_main_slot.name, type: "slot", source: "(206:2) <div slot=\"main\">", ctx });
	return block;
}

// (219:4) {#if (logs.length > 0)}
function create_if_block_2$6(ctx) {
	var t0, t1_value = ctx.logs.length + "", t1, t2;

	const block = {
		c: function create() {
			t0 = text("(");
			t1 = text(t1_value);
			t2 = text(")");
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "(");
			t1 = claim_text(nodes, t1_value);
			t2 = claim_text(nodes, ")");
		},

		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, t2, anchor);
		},

		p: function update(changed, ctx) {
			if ((changed.logs) && t1_value !== (t1_value = ctx.logs.length + "")) {
				set_data_dev(t1, t1_value);
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t0);
				detach_dev(t1);
				detach_dev(t2);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_2$6.name, type: "if", source: "(219:4) {#if (logs.length > 0)}", ctx });
	return block;
}

// (217:2) <div slot="panel-header">
function create_panel_header_slot(ctx) {
	var div, button, t, dispose;

	var if_block = ((ctx.logs.length > 0)) && create_if_block_2$6(ctx);

	const block = {
		c: function create() {
			div = element("div");
			button = element("button");
			if (if_block) if_block.c();
			t = text("\n\t\t\t\tClear");
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true }, false);
			var div_nodes = children(div);

			button = claim_element(div_nodes, "BUTTON", { class: true }, false);
			var button_nodes = children(button);

			if (if_block) if_block.l(button_nodes);
			t = claim_text(button_nodes, "\n\t\t\t\tClear");
			button_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(button, "class", "svelte-ivx2cg");
			add_location(button, file$d, 217, 3, 4369);
			attr_dev(div, "slot", "panel-header");
			add_location(div, file$d, 216, 2, 4340);
			dispose = listen_dev(button, "click", stop_propagation(ctx.clear_logs), false, false, true);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, button);
			if (if_block) if_block.m(button, null);
			append_dev(button, t);
		},

		p: function update(changed, ctx) {
			if ((ctx.logs.length > 0)) {
				if (if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block = create_if_block_2$6(ctx);
					if_block.c();
					if_block.m(button, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			if (if_block) if_block.d();
			dispose();
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_panel_header_slot.name, type: "slot", source: "(217:2) <div slot=\"panel-header\">", ctx });
	return block;
}

// (224:2) <section slot="panel-body">
function create_panel_body_slot(ctx) {
	var section, current;

	var console = new Console({
		props: { logs: ctx.logs },
		$$inline: true
	});
	console.$on("clear", ctx.clear_logs);

	const block = {
		c: function create() {
			section = element("section");
			console.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { slot: true }, false);
			var section_nodes = children(section);

			console.$$.fragment.l(section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(section, "slot", "panel-body");
			add_location(section, file$d, 223, 2, 4499);
		},

		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			mount_component(console, section, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var console_changes = {};
			if (changed.logs) console_changes.logs = ctx.logs;
			console.$set(console_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(console.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(console.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(section);
			}

			destroy_component(console);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_panel_body_slot.name, type: "slot", source: "(224:2) <section slot=\"panel-body\">", ctx });
	return block;
}

// (205:1) <PaneWithPanel pos={100} panel="Console">
function create_default_slot_1(ctx) {
	var t0, t1;

	const block = {
		c: function create() {
			t0 = space();
			t1 = space();
		},

		l: function claim(nodes) {
			t0 = claim_space(nodes);
			t1 = claim_space(nodes);
		},

		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
		},

		p: noop,
		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t0);
				detach_dev(t1);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_default_slot_1.name, type: "slot", source: "(205:1) <PaneWithPanel pos={100} panel=\"Console\">", ctx });
	return block;
}

// (232:31) 
function create_if_block_1$7(ctx) {
	var current;

	var message = new Message({
		props: {
		kind: "info",
		truncate: true,
		$$slots: { default: [create_default_slot$2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			message.$$.fragment.c();
		},

		l: function claim(nodes) {
			message.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(message, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var message_changes = {};
			if (changed.$$scope || changed.status) message_changes.$$scope = { changed, ctx };
			message.$set(message_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(message.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(message.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(message, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_1$7.name, type: "if", source: "(232:31) ", ctx });
	return block;
}

// (230:2) {#if error}
function create_if_block$a(ctx) {
	var current;

	var message = new Message({
		props: { kind: "error", details: ctx.error },
		$$inline: true
	});

	const block = {
		c: function create() {
			message.$$.fragment.c();
		},

		l: function claim(nodes) {
			message.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(message, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var message_changes = {};
			if (changed.error) message_changes.details = ctx.error;
			message.$set(message_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(message.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(message.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(message, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$a.name, type: "if", source: "(230:2) {#if error}", ctx });
	return block;
}

// (233:3) <Message kind="info" truncate>
function create_default_slot$2(ctx) {
	var t_value = ctx.status || 'loading Svelte compiler...' + "", t;

	const block = {
		c: function create() {
			t = text(t_value);
		},

		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},

		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},

		p: function update(changed, ctx) {
			if ((changed.status) && t_value !== (t_value = ctx.status || 'loading Svelte compiler...' + "")) {
				set_data_dev(t, t_value);
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_default_slot$2.name, type: "slot", source: "(233:3) <Message kind=\"info\" truncate>", ctx });
	return block;
}

function create_fragment$j(ctx) {
	var div1, t, div0, current_block_type_index, if_block, current;

	var panewithpanel = new PaneWithPanel({
		props: {
		pos: 100,
		panel: "Console",
		$$slots: {
		default: [create_default_slot_1],
		"panel-body": [create_panel_body_slot],
		"panel-header": [create_panel_header_slot],
		main: [create_main_slot]
	},
		$$scope: { ctx }
	},
		$$inline: true
	});

	var if_block_creators = [
		create_if_block$a,
		create_if_block_1$7
	];

	var if_blocks = [];

	function select_block_type(changed, ctx) {
		if (ctx.error) return 0;
		if (ctx.status || !ctx.$bundle) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(null, ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const block = {
		c: function create() {
			div1 = element("div");
			panewithpanel.$$.fragment.c();
			t = space();
			div0 = element("div");
			if (if_block) if_block.c();
			this.h();
		},

		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			panewithpanel.$$.fragment.l(div1_nodes);
			t = claim_space(div1_nodes);

			div0 = claim_element(div1_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			if (if_block) if_block.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(div0, "class", "overlay svelte-ivx2cg");
			add_location(div0, file$d, 228, 1, 4603);
			attr_dev(div1, "class", "iframe-container svelte-ivx2cg");
			add_location(div1, file$d, 203, 0, 3893);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			mount_component(panewithpanel, div1, null);
			append_dev(div1, t);
			append_dev(div1, div0);
			if (~current_block_type_index) if_blocks[current_block_type_index].m(div0, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var panewithpanel_changes = {};
			if (changed.$$scope || changed.logs || changed.relaxed || changed.error || changed.pending_imports || changed.iframe || changed.inited) panewithpanel_changes.$$scope = { changed, ctx };
			panewithpanel.$set(panewithpanel_changes);

			var previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(changed, ctx);
			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) if_blocks[current_block_type_index].p(changed, ctx);
			} else {
				if (if_block) {
					group_outros();
					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});
					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];
					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					}
					transition_in(if_block, 1);
					if_block.m(div0, null);
				} else {
					if_block = null;
				}
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(panewithpanel.$$.fragment, local);

			transition_in(if_block);
			current = true;
		},

		o: function outro(local) {
			transition_out(panewithpanel.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div1);
			}

			destroy_component(panewithpanel);

			if (~current_block_type_index) if_blocks[current_block_type_index].d();
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$j.name, type: "component", source: "", ctx });
	return block;
}

let pending = false;

function instance$j($$self, $$props, $$invalidate) {
	let $bundle;

	

	const { bundle } = getContext('REPL'); validate_store(bundle, 'bundle'); component_subscribe($$self, bundle, $$value => { $bundle = $$value; $$invalidate('$bundle', $bundle); });

	let { error } = $$props; // TODO should this be exposed as a prop?
	let logs = [];

	function setProp(prop, value) {
		if (!proxy) return;
		proxy.setProp(prop, value);
	}

	let { status, relaxed = false, injectedJS = '', injectedCSS = '' } = $$props;

	let iframe;
	let pending_imports = 0;

	let proxy = null;

	let ready = false;
	let inited = false;

	let log_height = 90;
	let prev_height;

	let last_console_event;

	onMount(() => {
		proxy = new ReplProxy(iframe, {
			on_fetch_progress: progress => {
				$$invalidate('pending_imports', pending_imports = progress);
			},
			on_error: event => {
				push_logs({ level: 'error', args: [event.value]});
			},
			on_unhandled_rejection: event => {
				let error = event.value;
				if (typeof error === 'string') error = { message: error };
				error.message = 'Uncaught (in promise): ' + error.message;
				push_logs({ level: 'error', args: [error]});
			},
			on_console: log => {
				if (log.level === 'clear') {
					$$invalidate('logs', logs = [log]);
				} else if (log.duplicate) {
					const last_log = logs[logs.length - 1];

					if (last_log) {
						last_log.count = (last_log.count || 1) + 1;
						$$invalidate('logs', logs);
					} else {
						last_console_event.count = 1;
						$$invalidate('logs', logs = [last_console_event]);
					}
				} else {
					push_logs(log);
					last_console_event = log;
				}
			}
		});

		iframe.addEventListener('load', () => {
			proxy.handle_links();
			$$invalidate('ready', ready = true);
		});


		return () => {
			proxy.destroy();
		}
	});

	async function apply_bundle($bundle) {
		if (!$bundle || $bundle.error) return;

		try {
			clear_logs();

			await proxy.eval(`
				${injectedJS}

				${styles}

				const styles = document.querySelectorAll('style[id^=svelte-]');

				${$bundle.dom.code}

				let i = styles.length;
				while (i--) styles[i].parentNode.removeChild(styles[i]);

				if (window.component) {
					try {
						window.component.$destroy();
					} catch (err) {
						console.error(err);
					}
				}

				document.body.innerHTML = '';
				window.location.hash = '';
				window._svelteTransitionManager = null;

				window.component = new SvelteComponent.default({
					target: document.body
				});
			`);

			$$invalidate('error', error = null);
		} catch (e) {
			show_error(e);
		}

		$$invalidate('inited', inited = true);
	}

	function show_error(e) {
		const loc = getLocationFromStack(e.stack, $bundle.dom.map);
		if (loc) {
			e.filename = loc.source;
			e.loc = { line: loc.line, column: loc.column };
		}

		$$invalidate('error', error = e);
	}

	function push_logs(log) {
		$$invalidate('logs', logs = [...logs, log]);
	}

	function clear_logs() {
		$$invalidate('logs', logs = []);
	}

	const writable_props = ['error', 'status', 'relaxed', 'injectedJS', 'injectedCSS'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console_1$1.warn(`<Viewer> was created with unknown prop '${key}'`);
	});

	function iframe_1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('iframe', iframe = $$value);
		});
	}

	$$self.$set = $$props => {
		if ('error' in $$props) $$invalidate('error', error = $$props.error);
		if ('status' in $$props) $$invalidate('status', status = $$props.status);
		if ('relaxed' in $$props) $$invalidate('relaxed', relaxed = $$props.relaxed);
		if ('injectedJS' in $$props) $$invalidate('injectedJS', injectedJS = $$props.injectedJS);
		if ('injectedCSS' in $$props) $$invalidate('injectedCSS', injectedCSS = $$props.injectedCSS);
	};

	$$self.$capture_state = () => {
		return { error, logs, status, relaxed, injectedJS, injectedCSS, iframe, pending_imports, pending, proxy, ready, inited, log_height, prev_height, last_console_event, styles, $bundle };
	};

	$$self.$inject_state = $$props => {
		if ('error' in $$props) $$invalidate('error', error = $$props.error);
		if ('logs' in $$props) $$invalidate('logs', logs = $$props.logs);
		if ('status' in $$props) $$invalidate('status', status = $$props.status);
		if ('relaxed' in $$props) $$invalidate('relaxed', relaxed = $$props.relaxed);
		if ('injectedJS' in $$props) $$invalidate('injectedJS', injectedJS = $$props.injectedJS);
		if ('injectedCSS' in $$props) $$invalidate('injectedCSS', injectedCSS = $$props.injectedCSS);
		if ('iframe' in $$props) $$invalidate('iframe', iframe = $$props.iframe);
		if ('pending_imports' in $$props) $$invalidate('pending_imports', pending_imports = $$props.pending_imports);
		if ('pending' in $$props) $$invalidate('pending', pending = $$props.pending);
		if ('proxy' in $$props) proxy = $$props.proxy;
		if ('ready' in $$props) $$invalidate('ready', ready = $$props.ready);
		if ('inited' in $$props) $$invalidate('inited', inited = $$props.inited);
		if ('log_height' in $$props) log_height = $$props.log_height;
		if ('prev_height' in $$props) prev_height = $$props.prev_height;
		if ('last_console_event' in $$props) last_console_event = $$props.last_console_event;
		if ('styles' in $$props) styles = $$props.styles;
		if ('$bundle' in $$props) bundle.set($bundle);
	};

	let styles;

	$$self.$$.update = ($$dirty = { ready: 1, $bundle: 1, injectedCSS: 1 }) => {
		if ($$dirty.ready || $$dirty.$bundle) { if (ready) apply_bundle($bundle); }
		if ($$dirty.injectedCSS) { styles = injectedCSS && `{
		const style = document.createElement('style');
		style.textContent = ${JSON.stringify(injectedCSS)};
		document.head.appendChild(style);
	}`; }
	};

	return {
		bundle,
		error,
		logs,
		setProp,
		status,
		relaxed,
		injectedJS,
		injectedCSS,
		iframe,
		pending_imports,
		inited,
		clear_logs,
		$bundle,
		iframe_1_binding
	};
}

class Viewer extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$j, create_fragment$j, safe_not_equal, ["error", "setProp", "status", "relaxed", "injectedJS", "injectedCSS"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Viewer", options, id: create_fragment$j.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.error === undefined && !('error' in props)) {
			console_1$1.warn("<Viewer> was created without expected prop 'error'");
		}
		if (ctx.setProp === undefined && !('setProp' in props)) {
			console_1$1.warn("<Viewer> was created without expected prop 'setProp'");
		}
		if (ctx.status === undefined && !('status' in props)) {
			console_1$1.warn("<Viewer> was created without expected prop 'status'");
		}
	}

	get error() {
		throw new Error("<Viewer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set error(value) {
		throw new Error("<Viewer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get setProp() {
		return this.$$.ctx.setProp;
	}

	set setProp(value) {
		throw new Error("<Viewer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get status() {
		throw new Error("<Viewer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set status(value) {
		throw new Error("<Viewer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get relaxed() {
		throw new Error("<Viewer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set relaxed(value) {
		throw new Error("<Viewer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get injectedJS() {
		throw new Error("<Viewer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set injectedJS(value) {
		throw new Error("<Viewer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get injectedCSS() {
		throw new Error("<Viewer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set injectedCSS(value) {
		throw new Error("<Viewer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\@sveltejs\svelte-repl\src\Output\CompilerOptions.svelte generated by Svelte v3.12.0 */

const file$e = "node_modules\\@sveltejs\\svelte-repl\\src\\Output\\CompilerOptions.svelte";

function create_fragment$k(ctx) {
	var div1, t0, div0, span0, t1, t2, input0, t3, label0, span1, t4, t5, input1, t6, label1, span2, t7, t8, t9, label2, span3, t10, t11, input2, t12, span4, t13_value = ctx.$compile_options.dev + "", t13, t14, t15, label3, span5, t16, t17, input3, t18, span6, t19_value = ctx.$compile_options.css + "", t19, t20, t21, label4, span7, t22, t23, input4, t24, span8, t25_value = ctx.$compile_options.hydratable + "", t25, t26, t27, label5, span9, t28, t29, input5, t30, span10, t31_value = ctx.$compile_options.customElement + "", t31, t32, t33, label6, span11, t34, t35, input6, t36, span12, t37_value = ctx.$compile_options.immutable + "", t37, t38, t39, label7, span13, t40, t41, input7, t42, span14, t43_value = ctx.$compile_options.legacy + "", t43, t44, dispose;

	const block = {
		c: function create() {
			div1 = element("div");
			t0 = text("result = svelte.compile(source, {\n\t");
			div0 = element("div");
			span0 = element("span");
			t1 = text("generate:");
			t2 = space();
			input0 = element("input");
			t3 = space();
			label0 = element("label");
			span1 = element("span");
			t4 = text("\"dom\"");
			t5 = space();
			input1 = element("input");
			t6 = space();
			label1 = element("label");
			span2 = element("span");
			t7 = text("\"ssr\"");
			t8 = text(",");
			t9 = space();
			label2 = element("label");
			span3 = element("span");
			t10 = text("dev:");
			t11 = space();
			input2 = element("input");
			t12 = space();
			span4 = element("span");
			t13 = text(t13_value);
			t14 = text(",");
			t15 = space();
			label3 = element("label");
			span5 = element("span");
			t16 = text("css:");
			t17 = space();
			input3 = element("input");
			t18 = space();
			span6 = element("span");
			t19 = text(t19_value);
			t20 = text(",");
			t21 = space();
			label4 = element("label");
			span7 = element("span");
			t22 = text("hydratable:");
			t23 = space();
			input4 = element("input");
			t24 = space();
			span8 = element("span");
			t25 = text(t25_value);
			t26 = text(",");
			t27 = space();
			label5 = element("label");
			span9 = element("span");
			t28 = text("customElement:");
			t29 = space();
			input5 = element("input");
			t30 = space();
			span10 = element("span");
			t31 = text(t31_value);
			t32 = text(",");
			t33 = space();
			label6 = element("label");
			span11 = element("span");
			t34 = text("immutable:");
			t35 = space();
			input6 = element("input");
			t36 = space();
			span12 = element("span");
			t37 = text(t37_value);
			t38 = text(",");
			t39 = space();
			label7 = element("label");
			span13 = element("span");
			t40 = text("legacy:");
			t41 = space();
			input7 = element("input");
			t42 = space();
			span14 = element("span");
			t43 = text(t43_value);
			t44 = text("\n\t});");
			this.h();
		},

		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			t0 = claim_text(div1_nodes, "result = svelte.compile(source, {\n\t");

			div0 = claim_element(div1_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			span0 = claim_element(div0_nodes, "SPAN", { class: true }, false);
			var span0_nodes = children(span0);

			t1 = claim_text(span0_nodes, "generate:");
			span0_nodes.forEach(detach_dev);
			t2 = claim_space(div0_nodes);

			input0 = claim_element(div0_nodes, "INPUT", { id: true, type: true, value: true, class: true }, false);
			var input0_nodes = children(input0);

			input0_nodes.forEach(detach_dev);
			t3 = claim_space(div0_nodes);

			label0 = claim_element(div0_nodes, "LABEL", { for: true, class: true }, false);
			var label0_nodes = children(label0);

			span1 = claim_element(label0_nodes, "SPAN", { class: true }, false);
			var span1_nodes = children(span1);

			t4 = claim_text(span1_nodes, "\"dom\"");
			span1_nodes.forEach(detach_dev);
			label0_nodes.forEach(detach_dev);
			t5 = claim_space(div0_nodes);

			input1 = claim_element(div0_nodes, "INPUT", { id: true, type: true, value: true, class: true }, false);
			var input1_nodes = children(input1);

			input1_nodes.forEach(detach_dev);
			t6 = claim_space(div0_nodes);

			label1 = claim_element(div0_nodes, "LABEL", { for: true, class: true }, false);
			var label1_nodes = children(label1);

			span2 = claim_element(label1_nodes, "SPAN", { class: true }, false);
			var span2_nodes = children(span2);

			t7 = claim_text(span2_nodes, "\"ssr\"");
			span2_nodes.forEach(detach_dev);
			t8 = claim_text(label1_nodes, ",");
			label1_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t9 = claim_space(div1_nodes);

			label2 = claim_element(div1_nodes, "LABEL", { class: true }, false);
			var label2_nodes = children(label2);

			span3 = claim_element(label2_nodes, "SPAN", { class: true }, false);
			var span3_nodes = children(span3);

			t10 = claim_text(span3_nodes, "dev:");
			span3_nodes.forEach(detach_dev);
			t11 = claim_space(label2_nodes);

			input2 = claim_element(label2_nodes, "INPUT", { type: true, class: true }, false);
			var input2_nodes = children(input2);

			input2_nodes.forEach(detach_dev);
			t12 = claim_space(label2_nodes);

			span4 = claim_element(label2_nodes, "SPAN", { class: true }, false);
			var span4_nodes = children(span4);

			t13 = claim_text(span4_nodes, t13_value);
			span4_nodes.forEach(detach_dev);
			t14 = claim_text(label2_nodes, ",");
			label2_nodes.forEach(detach_dev);
			t15 = claim_space(div1_nodes);

			label3 = claim_element(div1_nodes, "LABEL", { class: true }, false);
			var label3_nodes = children(label3);

			span5 = claim_element(label3_nodes, "SPAN", { class: true }, false);
			var span5_nodes = children(span5);

			t16 = claim_text(span5_nodes, "css:");
			span5_nodes.forEach(detach_dev);
			t17 = claim_space(label3_nodes);

			input3 = claim_element(label3_nodes, "INPUT", { type: true, class: true }, false);
			var input3_nodes = children(input3);

			input3_nodes.forEach(detach_dev);
			t18 = claim_space(label3_nodes);

			span6 = claim_element(label3_nodes, "SPAN", { class: true }, false);
			var span6_nodes = children(span6);

			t19 = claim_text(span6_nodes, t19_value);
			span6_nodes.forEach(detach_dev);
			t20 = claim_text(label3_nodes, ",");
			label3_nodes.forEach(detach_dev);
			t21 = claim_space(div1_nodes);

			label4 = claim_element(div1_nodes, "LABEL", { class: true }, false);
			var label4_nodes = children(label4);

			span7 = claim_element(label4_nodes, "SPAN", { class: true }, false);
			var span7_nodes = children(span7);

			t22 = claim_text(span7_nodes, "hydratable:");
			span7_nodes.forEach(detach_dev);
			t23 = claim_space(label4_nodes);

			input4 = claim_element(label4_nodes, "INPUT", { type: true, class: true }, false);
			var input4_nodes = children(input4);

			input4_nodes.forEach(detach_dev);
			t24 = claim_space(label4_nodes);

			span8 = claim_element(label4_nodes, "SPAN", { class: true }, false);
			var span8_nodes = children(span8);

			t25 = claim_text(span8_nodes, t25_value);
			span8_nodes.forEach(detach_dev);
			t26 = claim_text(label4_nodes, ",");
			label4_nodes.forEach(detach_dev);
			t27 = claim_space(div1_nodes);

			label5 = claim_element(div1_nodes, "LABEL", { class: true }, false);
			var label5_nodes = children(label5);

			span9 = claim_element(label5_nodes, "SPAN", { class: true }, false);
			var span9_nodes = children(span9);

			t28 = claim_text(span9_nodes, "customElement:");
			span9_nodes.forEach(detach_dev);
			t29 = claim_space(label5_nodes);

			input5 = claim_element(label5_nodes, "INPUT", { type: true, class: true }, false);
			var input5_nodes = children(input5);

			input5_nodes.forEach(detach_dev);
			t30 = claim_space(label5_nodes);

			span10 = claim_element(label5_nodes, "SPAN", { class: true }, false);
			var span10_nodes = children(span10);

			t31 = claim_text(span10_nodes, t31_value);
			span10_nodes.forEach(detach_dev);
			t32 = claim_text(label5_nodes, ",");
			label5_nodes.forEach(detach_dev);
			t33 = claim_space(div1_nodes);

			label6 = claim_element(div1_nodes, "LABEL", { class: true }, false);
			var label6_nodes = children(label6);

			span11 = claim_element(label6_nodes, "SPAN", { class: true }, false);
			var span11_nodes = children(span11);

			t34 = claim_text(span11_nodes, "immutable:");
			span11_nodes.forEach(detach_dev);
			t35 = claim_space(label6_nodes);

			input6 = claim_element(label6_nodes, "INPUT", { type: true, class: true }, false);
			var input6_nodes = children(input6);

			input6_nodes.forEach(detach_dev);
			t36 = claim_space(label6_nodes);

			span12 = claim_element(label6_nodes, "SPAN", { class: true }, false);
			var span12_nodes = children(span12);

			t37 = claim_text(span12_nodes, t37_value);
			span12_nodes.forEach(detach_dev);
			t38 = claim_text(label6_nodes, ",");
			label6_nodes.forEach(detach_dev);
			t39 = claim_space(div1_nodes);

			label7 = claim_element(div1_nodes, "LABEL", { class: true }, false);
			var label7_nodes = children(label7);

			span13 = claim_element(label7_nodes, "SPAN", { class: true }, false);
			var span13_nodes = children(span13);

			t40 = claim_text(span13_nodes, "legacy:");
			span13_nodes.forEach(detach_dev);
			t41 = claim_space(label7_nodes);

			input7 = claim_element(label7_nodes, "INPUT", { type: true, class: true }, false);
			var input7_nodes = children(input7);

			input7_nodes.forEach(detach_dev);
			t42 = claim_space(label7_nodes);

			span14 = claim_element(label7_nodes, "SPAN", { class: true }, false);
			var span14_nodes = children(span14);

			t43 = claim_text(span14_nodes, t43_value);
			span14_nodes.forEach(detach_dev);
			label7_nodes.forEach(detach_dev);
			t44 = claim_text(div1_nodes, "\n\t});");
			div1_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(span0, "class", "key svelte-159cly1");
			add_location(span0, file$e, 107, 2, 1829);
			ctx.$$binding_groups[0].push(input0);
			attr_dev(input0, "id", "dom-input");
			attr_dev(input0, "type", "radio");
			input0.__value = "dom";
			input0.value = input0.__value;
			attr_dev(input0, "class", "svelte-159cly1");
			add_location(input0, file$e, 109, 2, 1867);
			attr_dev(span1, "class", "string svelte-159cly1");
			add_location(span1, file$e, 110, 25, 1979);
			attr_dev(label0, "for", "dom-input");
			attr_dev(label0, "class", "svelte-159cly1");
			add_location(label0, file$e, 110, 2, 1956);
			ctx.$$binding_groups[0].push(input1);
			attr_dev(input1, "id", "ssr-input");
			attr_dev(input1, "type", "radio");
			input1.__value = "ssr";
			input1.value = input1.__value;
			attr_dev(input1, "class", "svelte-159cly1");
			add_location(input1, file$e, 112, 2, 2024);
			attr_dev(span2, "class", "string svelte-159cly1");
			add_location(span2, file$e, 113, 25, 2136);
			attr_dev(label1, "for", "ssr-input");
			attr_dev(label1, "class", "svelte-159cly1");
			add_location(label1, file$e, 113, 2, 2113);
			attr_dev(div0, "class", "option svelte-159cly1");
			add_location(div0, file$e, 106, 1, 1806);
			attr_dev(span3, "class", "key svelte-159cly1");
			add_location(span3, file$e, 117, 2, 2214);
			attr_dev(input2, "type", "checkbox");
			attr_dev(input2, "class", "svelte-159cly1");
			add_location(input2, file$e, 118, 2, 2246);
			attr_dev(span4, "class", "boolean svelte-159cly1");
			add_location(span4, file$e, 118, 62, 2306);
			attr_dev(label2, "class", "option svelte-159cly1");
			add_location(label2, file$e, 116, 1, 2189);
			attr_dev(span5, "class", "key svelte-159cly1");
			add_location(span5, file$e, 122, 2, 2396);
			attr_dev(input3, "type", "checkbox");
			attr_dev(input3, "class", "svelte-159cly1");
			add_location(input3, file$e, 123, 2, 2428);
			attr_dev(span6, "class", "boolean svelte-159cly1");
			add_location(span6, file$e, 123, 62, 2488);
			attr_dev(label3, "class", "option svelte-159cly1");
			add_location(label3, file$e, 121, 1, 2371);
			attr_dev(span7, "class", "key svelte-159cly1");
			add_location(span7, file$e, 127, 2, 2578);
			attr_dev(input4, "type", "checkbox");
			attr_dev(input4, "class", "svelte-159cly1");
			add_location(input4, file$e, 128, 2, 2617);
			attr_dev(span8, "class", "boolean svelte-159cly1");
			add_location(span8, file$e, 128, 69, 2684);
			attr_dev(label4, "class", "option svelte-159cly1");
			add_location(label4, file$e, 126, 1, 2553);
			attr_dev(span9, "class", "key svelte-159cly1");
			add_location(span9, file$e, 132, 2, 2781);
			attr_dev(input5, "type", "checkbox");
			attr_dev(input5, "class", "svelte-159cly1");
			add_location(input5, file$e, 133, 2, 2823);
			attr_dev(span10, "class", "boolean svelte-159cly1");
			add_location(span10, file$e, 133, 72, 2893);
			attr_dev(label5, "class", "option svelte-159cly1");
			add_location(label5, file$e, 131, 1, 2756);
			attr_dev(span11, "class", "key svelte-159cly1");
			add_location(span11, file$e, 137, 2, 2993);
			attr_dev(input6, "type", "checkbox");
			attr_dev(input6, "class", "svelte-159cly1");
			add_location(input6, file$e, 138, 2, 3031);
			attr_dev(span12, "class", "boolean svelte-159cly1");
			add_location(span12, file$e, 138, 68, 3097);
			attr_dev(label6, "class", "option svelte-159cly1");
			add_location(label6, file$e, 136, 1, 2968);
			attr_dev(span13, "class", "key svelte-159cly1");
			add_location(span13, file$e, 142, 2, 3193);
			attr_dev(input7, "type", "checkbox");
			attr_dev(input7, "class", "svelte-159cly1");
			add_location(input7, file$e, 143, 2, 3228);
			attr_dev(span14, "class", "boolean svelte-159cly1");
			add_location(span14, file$e, 143, 65, 3291);
			attr_dev(label7, "class", "option svelte-159cly1");
			add_location(label7, file$e, 141, 1, 3168);
			attr_dev(div1, "class", "options svelte-159cly1");
			add_location(div1, file$e, 104, 0, 1743);

			dispose = [
				listen_dev(input0, "change", ctx.input0_change_handler),
				listen_dev(input1, "change", ctx.input1_change_handler),
				listen_dev(input2, "change", ctx.input2_change_handler),
				listen_dev(input3, "change", ctx.input3_change_handler),
				listen_dev(input4, "change", ctx.input4_change_handler),
				listen_dev(input5, "change", ctx.input5_change_handler),
				listen_dev(input6, "change", ctx.input6_change_handler),
				listen_dev(input7, "change", ctx.input7_change_handler)
			];
		},

		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, t0);
			append_dev(div1, div0);
			append_dev(div0, span0);
			append_dev(span0, t1);
			append_dev(div0, t2);
			append_dev(div0, input0);

			input0.checked = input0.__value === ctx.$compile_options.generate;

			append_dev(div0, t3);
			append_dev(div0, label0);
			append_dev(label0, span1);
			append_dev(span1, t4);
			append_dev(div0, t5);
			append_dev(div0, input1);

			input1.checked = input1.__value === ctx.$compile_options.generate;

			append_dev(div0, t6);
			append_dev(div0, label1);
			append_dev(label1, span2);
			append_dev(span2, t7);
			append_dev(label1, t8);
			append_dev(div1, t9);
			append_dev(div1, label2);
			append_dev(label2, span3);
			append_dev(span3, t10);
			append_dev(label2, t11);
			append_dev(label2, input2);

			input2.checked = ctx.$compile_options.dev;

			append_dev(label2, t12);
			append_dev(label2, span4);
			append_dev(span4, t13);
			append_dev(label2, t14);
			append_dev(div1, t15);
			append_dev(div1, label3);
			append_dev(label3, span5);
			append_dev(span5, t16);
			append_dev(label3, t17);
			append_dev(label3, input3);

			input3.checked = ctx.$compile_options.css;

			append_dev(label3, t18);
			append_dev(label3, span6);
			append_dev(span6, t19);
			append_dev(label3, t20);
			append_dev(div1, t21);
			append_dev(div1, label4);
			append_dev(label4, span7);
			append_dev(span7, t22);
			append_dev(label4, t23);
			append_dev(label4, input4);

			input4.checked = ctx.$compile_options.hydratable;

			append_dev(label4, t24);
			append_dev(label4, span8);
			append_dev(span8, t25);
			append_dev(label4, t26);
			append_dev(div1, t27);
			append_dev(div1, label5);
			append_dev(label5, span9);
			append_dev(span9, t28);
			append_dev(label5, t29);
			append_dev(label5, input5);

			input5.checked = ctx.$compile_options.customElement;

			append_dev(label5, t30);
			append_dev(label5, span10);
			append_dev(span10, t31);
			append_dev(label5, t32);
			append_dev(div1, t33);
			append_dev(div1, label6);
			append_dev(label6, span11);
			append_dev(span11, t34);
			append_dev(label6, t35);
			append_dev(label6, input6);

			input6.checked = ctx.$compile_options.immutable;

			append_dev(label6, t36);
			append_dev(label6, span12);
			append_dev(span12, t37);
			append_dev(label6, t38);
			append_dev(div1, t39);
			append_dev(div1, label7);
			append_dev(label7, span13);
			append_dev(span13, t40);
			append_dev(label7, t41);
			append_dev(label7, input7);

			input7.checked = ctx.$compile_options.legacy;

			append_dev(label7, t42);
			append_dev(label7, span14);
			append_dev(span14, t43);
			append_dev(div1, t44);
		},

		p: function update(changed, ctx) {
			if (changed.$compile_options) input0.checked = input0.__value === ctx.$compile_options.generate;
			if (changed.$compile_options) input1.checked = input1.__value === ctx.$compile_options.generate;
			if (changed.$compile_options) input2.checked = ctx.$compile_options.dev;

			if ((changed.$compile_options) && t13_value !== (t13_value = ctx.$compile_options.dev + "")) {
				set_data_dev(t13, t13_value);
			}

			if (changed.$compile_options) input3.checked = ctx.$compile_options.css;

			if ((changed.$compile_options) && t19_value !== (t19_value = ctx.$compile_options.css + "")) {
				set_data_dev(t19, t19_value);
			}

			if (changed.$compile_options) input4.checked = ctx.$compile_options.hydratable;

			if ((changed.$compile_options) && t25_value !== (t25_value = ctx.$compile_options.hydratable + "")) {
				set_data_dev(t25, t25_value);
			}

			if (changed.$compile_options) input5.checked = ctx.$compile_options.customElement;

			if ((changed.$compile_options) && t31_value !== (t31_value = ctx.$compile_options.customElement + "")) {
				set_data_dev(t31, t31_value);
			}

			if (changed.$compile_options) input6.checked = ctx.$compile_options.immutable;

			if ((changed.$compile_options) && t37_value !== (t37_value = ctx.$compile_options.immutable + "")) {
				set_data_dev(t37, t37_value);
			}

			if (changed.$compile_options) input7.checked = ctx.$compile_options.legacy;

			if ((changed.$compile_options) && t43_value !== (t43_value = ctx.$compile_options.legacy + "")) {
				set_data_dev(t43, t43_value);
			}
		},

		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div1);
			}

			ctx.$$binding_groups[0].splice(ctx.$$binding_groups[0].indexOf(input0), 1);
			ctx.$$binding_groups[0].splice(ctx.$$binding_groups[0].indexOf(input1), 1);
			run_all(dispose);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$k.name, type: "component", source: "", ctx });
	return block;
}

function instance$k($$self, $$props, $$invalidate) {
	let $compile_options;

	const { compile_options } = getContext('REPL'); validate_store(compile_options, 'compile_options'); component_subscribe($$self, compile_options, $$value => { $compile_options = $$value; $$invalidate('$compile_options', $compile_options); });

	const $$binding_groups = [[]];

	function input0_change_handler() {
		compile_options.update($$value => ($$value.generate = this.__value, $$value));
	}

	function input1_change_handler() {
		compile_options.update($$value => ($$value.generate = this.__value, $$value));
	}

	function input2_change_handler() {
		compile_options.update($$value => ($$value.dev = this.checked, $$value));
	}

	function input3_change_handler() {
		compile_options.update($$value => ($$value.css = this.checked, $$value));
	}

	function input4_change_handler() {
		compile_options.update($$value => ($$value.hydratable = this.checked, $$value));
	}

	function input5_change_handler() {
		compile_options.update($$value => ($$value.customElement = this.checked, $$value));
	}

	function input6_change_handler() {
		compile_options.update($$value => ($$value.immutable = this.checked, $$value));
	}

	function input7_change_handler() {
		compile_options.update($$value => ($$value.legacy = this.checked, $$value));
	}

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ('$compile_options' in $$props) compile_options.set($compile_options);
	};

	return {
		compile_options,
		$compile_options,
		input0_change_handler,
		input1_change_handler,
		input2_change_handler,
		input3_change_handler,
		input4_change_handler,
		input5_change_handler,
		input6_change_handler,
		input7_change_handler,
		$$binding_groups
	};
}

class CompilerOptions extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$k, create_fragment$k, safe_not_equal, []);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "CompilerOptions", options, id: create_fragment$k.name });
	}
}

const workers = new Map();

let uid$1 = 1;

class Compiler {
	constructor(workersUrl, svelteUrl) {
		if (!workers.has(svelteUrl)) {
			const worker = new Worker(`${workersUrl}/compiler.js`);
			worker.postMessage({ type: 'init', svelteUrl });
			workers.set(svelteUrl, worker);
		}

		this.worker = workers.get(svelteUrl);

		this.handlers = new Map();

		this.worker.addEventListener('message', event => {
			const handler = this.handlers.get(event.data.id);

			if (handler) { // if no handler, was meant for a different REPL
				handler(event.data.result);
				this.handlers.delete(event.data.id);
			}
		});
	}

	compile(component, options) {
		return new Promise(fulfil => {
			const id = uid$1++;

			this.handlers.set(id, fulfil);

			this.worker.postMessage({
				id,
				type: 'compile',
				source: component.source,
				options: Object.assign({
					name: component.name,
					filename: `${component.name}.svelte`
				}, options),
				entry: component.name === 'App'
			});
		});
	}

	destroy() {
		this.worker.terminate();
	}
}

/* node_modules\@sveltejs\svelte-repl\src\Output\index.svelte generated by Svelte v3.12.0 */

const file$f = "node_modules\\@sveltejs\\svelte-repl\\src\\Output\\index.svelte";

// (146:1) {:else}
function create_else_block$5(ctx) {
	var current;

	var panewithpanel = new PaneWithPanel({
		props: {
		pos: 67,
		panel: "Compiler options",
		$$slots: {
		default: [create_default_slot$3],
		"panel-body": [create_panel_body_slot$1],
		main: [create_main_slot$1]
	},
		$$scope: { ctx }
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			panewithpanel.$$.fragment.c();
		},

		l: function claim(nodes) {
			panewithpanel.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(panewithpanel, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var panewithpanel_changes = {};
			if (changed.$$scope || changed.sourceErrorLoc || changed.js_editor) panewithpanel_changes.$$scope = { changed, ctx };
			panewithpanel.$set(panewithpanel_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(panewithpanel.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(panewithpanel.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(panewithpanel, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block$5.name, type: "else", source: "(146:1) {:else}", ctx });
	return block;
}

// (139:1) {#if embedded}
function create_if_block$b(ctx) {
	var current;

	let codemirror_props = {
		mode: "js",
		errorLoc: ctx.sourceErrorLoc,
		readonly: true
	};
	var codemirror = new CodeMirror_1({ props: codemirror_props, $$inline: true });

	ctx.codemirror_binding(codemirror);

	const block = {
		c: function create() {
			codemirror.$$.fragment.c();
		},

		l: function claim(nodes) {
			codemirror.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(codemirror, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var codemirror_changes = {};
			if (changed.sourceErrorLoc) codemirror_changes.errorLoc = ctx.sourceErrorLoc;
			codemirror.$set(codemirror_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(codemirror.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(codemirror.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			ctx.codemirror_binding(null);

			destroy_component(codemirror, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$b.name, type: "if", source: "(139:1) {#if embedded}", ctx });
	return block;
}

// (148:3) <div slot="main">
function create_main_slot$1(ctx) {
	var div, current;

	let codemirror_props = {
		mode: "js",
		errorLoc: ctx.sourceErrorLoc,
		readonly: true
	};
	var codemirror = new CodeMirror_1({ props: codemirror_props, $$inline: true });

	ctx.codemirror_binding_1(codemirror);

	const block = {
		c: function create() {
			div = element("div");
			codemirror.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true, class: true }, false);
			var div_nodes = children(div);

			codemirror.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(div, "slot", "main");
			attr_dev(div, "class", "svelte-1jj4wee");
			add_location(div, file$f, 147, 3, 3238);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(codemirror, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var codemirror_changes = {};
			if (changed.sourceErrorLoc) codemirror_changes.errorLoc = ctx.sourceErrorLoc;
			codemirror.$set(codemirror_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(codemirror.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(codemirror.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			ctx.codemirror_binding_1(null);

			destroy_component(codemirror);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_main_slot$1.name, type: "slot", source: "(148:3) <div slot=\"main\">", ctx });
	return block;
}

// (157:3) <div slot="panel-body">
function create_panel_body_slot$1(ctx) {
	var div, current;

	var compileroptions = new CompilerOptions({ $$inline: true });

	const block = {
		c: function create() {
			div = element("div");
			compileroptions.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true, class: true }, false);
			var div_nodes = children(div);

			compileroptions.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(div, "slot", "panel-body");
			attr_dev(div, "class", "svelte-1jj4wee");
			add_location(div, file$f, 156, 3, 3380);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(compileroptions, div, null);
			current = true;
		},

		i: function intro(local) {
			if (current) return;
			transition_in(compileroptions.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(compileroptions.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_component(compileroptions);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_panel_body_slot$1.name, type: "slot", source: "(157:3) <div slot=\"panel-body\">", ctx });
	return block;
}

// (147:2) <PaneWithPanel pos={67} panel="Compiler options">
function create_default_slot$3(ctx) {
	var t;

	const block = {
		c: function create() {
			t = space();
		},

		l: function claim(nodes) {
			t = claim_space(nodes);
		},

		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},

		p: noop,
		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_default_slot$3.name, type: "slot", source: "(147:2) <PaneWithPanel pos={67} panel=\"Compiler options\">", ctx });
	return block;
}

function create_fragment$l(ctx) {
	var div0, button0, t0, t1, button1, t2, t3, button2, t4, t5, div1, updating_error, t6, div2, current_block_type_index, if_block, t7, div3, current, dispose;

	function viewer_1_error_binding(value) {
		ctx.viewer_1_error_binding.call(null, value);
		updating_error = true;
		add_flush_callback(() => updating_error = false);
	}

	let viewer_1_props = {
		status: ctx.status,
		relaxed: ctx.relaxed,
		injectedJS: ctx.injectedJS,
		injectedCSS: ctx.injectedCSS
	};
	if (ctx.runtimeError !== void 0) {
		viewer_1_props.error = ctx.runtimeError;
	}
	var viewer_1 = new Viewer({ props: viewer_1_props, $$inline: true });

	ctx.viewer_1_binding(viewer_1);
	binding_callbacks.push(() => bind(viewer_1, 'error', viewer_1_error_binding));

	var if_block_creators = [
		create_if_block$b,
		create_else_block$5
	];

	var if_blocks = [];

	function select_block_type(changed, ctx) {
		if (ctx.embedded) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(null, ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	let codemirror_props = {
		mode: "css",
		errorLoc: ctx.sourceErrorLoc,
		readonly: true
	};
	var codemirror = new CodeMirror_1({ props: codemirror_props, $$inline: true });

	ctx.codemirror_binding_2(codemirror);

	const block = {
		c: function create() {
			div0 = element("div");
			button0 = element("button");
			t0 = text("Result");
			t1 = space();
			button1 = element("button");
			t2 = text("JS output");
			t3 = space();
			button2 = element("button");
			t4 = text("CSS output");
			t5 = space();
			div1 = element("div");
			viewer_1.$$.fragment.c();
			t6 = space();
			div2 = element("div");
			if_block.c();
			t7 = space();
			div3 = element("div");
			codemirror.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			button0 = claim_element(div0_nodes, "BUTTON", { class: true }, false);
			var button0_nodes = children(button0);

			t0 = claim_text(button0_nodes, "Result");
			button0_nodes.forEach(detach_dev);
			t1 = claim_space(div0_nodes);

			button1 = claim_element(div0_nodes, "BUTTON", { class: true }, false);
			var button1_nodes = children(button1);

			t2 = claim_text(button1_nodes, "JS output");
			button1_nodes.forEach(detach_dev);
			t3 = claim_space(div0_nodes);

			button2 = claim_element(div0_nodes, "BUTTON", { class: true }, false);
			var button2_nodes = children(button2);

			t4 = claim_text(button2_nodes, "CSS output");
			button2_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);

			div1 = claim_element(nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			viewer_1.$$.fragment.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			t6 = claim_space(nodes);

			div2 = claim_element(nodes, "DIV", { class: true }, false);
			var div2_nodes = children(div2);

			if_block.l(div2_nodes);
			div2_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);

			div3 = claim_element(nodes, "DIV", { class: true }, false);
			var div3_nodes = children(div3);

			codemirror.$$.fragment.l(div3_nodes);
			div3_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(button0, "class", "svelte-1jj4wee");
			toggle_class(button0, "active", ctx.view === 'result');
			add_location(button0, file$f, 108, 1, 2466);
			attr_dev(button1, "class", "svelte-1jj4wee");
			toggle_class(button1, "active", ctx.view === 'js');
			add_location(button1, file$f, 113, 1, 2568);
			attr_dev(button2, "class", "svelte-1jj4wee");
			toggle_class(button2, "active", ctx.view === 'css');
			add_location(button2, file$f, 118, 1, 2665);
			attr_dev(div0, "class", "view-toggle svelte-1jj4wee");
			add_location(div0, file$f, 107, 0, 2439);
			attr_dev(div1, "class", "tab-content svelte-1jj4wee");
			toggle_class(div1, "visible", ctx.view === 'result');
			add_location(div1, file$f, 125, 0, 2797);
			attr_dev(div2, "class", "tab-content svelte-1jj4wee");
			toggle_class(div2, "visible", ctx.view === 'js');
			add_location(div2, file$f, 137, 0, 3002);
			attr_dev(div3, "class", "tab-content svelte-1jj4wee");
			toggle_class(div3, "visible", ctx.view === 'css');
			add_location(div3, file$f, 164, 0, 3491);

			dispose = [
				listen_dev(button0, "click", ctx.click_handler),
				listen_dev(button1, "click", ctx.click_handler_1),
				listen_dev(button2, "click", ctx.click_handler_2)
			];
		},

		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, button0);
			append_dev(button0, t0);
			append_dev(div0, t1);
			append_dev(div0, button1);
			append_dev(button1, t2);
			append_dev(div0, t3);
			append_dev(div0, button2);
			append_dev(button2, t4);
			insert_dev(target, t5, anchor);
			insert_dev(target, div1, anchor);
			mount_component(viewer_1, div1, null);
			insert_dev(target, t6, anchor);
			insert_dev(target, div2, anchor);
			if_blocks[current_block_type_index].m(div2, null);
			insert_dev(target, t7, anchor);
			insert_dev(target, div3, anchor);
			mount_component(codemirror, div3, null);
			current = true;
		},

		p: function update(changed, ctx) {
			if (changed.view) {
				toggle_class(button0, "active", ctx.view === 'result');
				toggle_class(button1, "active", ctx.view === 'js');
				toggle_class(button2, "active", ctx.view === 'css');
			}

			var viewer_1_changes = {};
			if (changed.status) viewer_1_changes.status = ctx.status;
			if (changed.relaxed) viewer_1_changes.relaxed = ctx.relaxed;
			if (changed.injectedJS) viewer_1_changes.injectedJS = ctx.injectedJS;
			if (changed.injectedCSS) viewer_1_changes.injectedCSS = ctx.injectedCSS;
			if (!updating_error && changed.runtimeError) {
				viewer_1_changes.error = ctx.runtimeError;
			}
			viewer_1.$set(viewer_1_changes);

			if (changed.view) {
				toggle_class(div1, "visible", ctx.view === 'result');
			}

			var previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(changed, ctx);
			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(changed, ctx);
			} else {
				group_outros();
				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});
				check_outros();

				if_block = if_blocks[current_block_type_index];
				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}
				transition_in(if_block, 1);
				if_block.m(div2, null);
			}

			if (changed.view) {
				toggle_class(div2, "visible", ctx.view === 'js');
			}

			var codemirror_changes = {};
			if (changed.sourceErrorLoc) codemirror_changes.errorLoc = ctx.sourceErrorLoc;
			codemirror.$set(codemirror_changes);

			if (changed.view) {
				toggle_class(div3, "visible", ctx.view === 'css');
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(viewer_1.$$.fragment, local);

			transition_in(if_block);

			transition_in(codemirror.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(viewer_1.$$.fragment, local);
			transition_out(if_block);
			transition_out(codemirror.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div0);
				detach_dev(t5);
				detach_dev(div1);
			}

			ctx.viewer_1_binding(null);

			destroy_component(viewer_1);

			if (detaching) {
				detach_dev(t6);
				detach_dev(div2);
			}

			if_blocks[current_block_type_index].d();

			if (detaching) {
				detach_dev(t7);
				detach_dev(div3);
			}

			ctx.codemirror_binding_2(null);

			destroy_component(codemirror);

			run_all(dispose);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$l.name, type: "component", source: "", ctx });
	return block;
}

function instance$l($$self, $$props, $$invalidate) {
	

	const { register_output } = getContext('REPL');

	let { svelteUrl, workersUrl, status, sourceErrorLoc = null, runtimeError = null, embedded = false, relaxed = false, injectedJS, injectedCSS } = $$props;

	let foo; // TODO workaround for https://github.com/sveltejs/svelte/issues/2122

	register_output({
		set: async (selected, options) => {
			if (selected.type === 'js') {
				js_editor.set(`/* Select a component to see its compiled code */`);
				css_editor.set(`/* Select a component to see its compiled code */`);
				return;
			}

			const compiled = await compiler.compile(selected, options);
			if (!js_editor) return; // unmounted

			js_editor.set(compiled.js, 'js');
			css_editor.set(compiled.css, 'css');
		},

		update: async (selected, options) => {
			if (selected.type === 'js') return;

			const compiled = await compiler.compile(selected, options);
			if (!js_editor) return; // unmounted

			js_editor.update(compiled.js);
			css_editor.update(compiled.css);
		}
	});

	const compiler = is_browser && new Compiler(workersUrl, svelteUrl);

	// refs
	let viewer;
	let js_editor;
	let css_editor;

	let view = 'result';

	const writable_props = ['svelteUrl', 'workersUrl', 'status', 'sourceErrorLoc', 'runtimeError', 'embedded', 'relaxed', 'injectedJS', 'injectedCSS'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<Index> was created with unknown prop '${key}'`);
	});

	const click_handler = () => $$invalidate('view', view = 'result');

	const click_handler_1 = () => $$invalidate('view', view = 'js');

	const click_handler_2 = () => $$invalidate('view', view = 'css');

	function viewer_1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('viewer', viewer = $$value);
		});
	}

	function viewer_1_error_binding(value) {
		runtimeError = value;
		$$invalidate('runtimeError', runtimeError);
	}

	function codemirror_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('js_editor', js_editor = $$value);
		});
	}

	function codemirror_binding_1($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('js_editor', js_editor = $$value);
		});
	}

	function codemirror_binding_2($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('css_editor', css_editor = $$value);
		});
	}

	$$self.$set = $$props => {
		if ('svelteUrl' in $$props) $$invalidate('svelteUrl', svelteUrl = $$props.svelteUrl);
		if ('workersUrl' in $$props) $$invalidate('workersUrl', workersUrl = $$props.workersUrl);
		if ('status' in $$props) $$invalidate('status', status = $$props.status);
		if ('sourceErrorLoc' in $$props) $$invalidate('sourceErrorLoc', sourceErrorLoc = $$props.sourceErrorLoc);
		if ('runtimeError' in $$props) $$invalidate('runtimeError', runtimeError = $$props.runtimeError);
		if ('embedded' in $$props) $$invalidate('embedded', embedded = $$props.embedded);
		if ('relaxed' in $$props) $$invalidate('relaxed', relaxed = $$props.relaxed);
		if ('injectedJS' in $$props) $$invalidate('injectedJS', injectedJS = $$props.injectedJS);
		if ('injectedCSS' in $$props) $$invalidate('injectedCSS', injectedCSS = $$props.injectedCSS);
	};

	$$self.$capture_state = () => {
		return { svelteUrl, workersUrl, status, sourceErrorLoc, runtimeError, embedded, relaxed, injectedJS, injectedCSS, foo, viewer, js_editor, css_editor, view };
	};

	$$self.$inject_state = $$props => {
		if ('svelteUrl' in $$props) $$invalidate('svelteUrl', svelteUrl = $$props.svelteUrl);
		if ('workersUrl' in $$props) $$invalidate('workersUrl', workersUrl = $$props.workersUrl);
		if ('status' in $$props) $$invalidate('status', status = $$props.status);
		if ('sourceErrorLoc' in $$props) $$invalidate('sourceErrorLoc', sourceErrorLoc = $$props.sourceErrorLoc);
		if ('runtimeError' in $$props) $$invalidate('runtimeError', runtimeError = $$props.runtimeError);
		if ('embedded' in $$props) $$invalidate('embedded', embedded = $$props.embedded);
		if ('relaxed' in $$props) $$invalidate('relaxed', relaxed = $$props.relaxed);
		if ('injectedJS' in $$props) $$invalidate('injectedJS', injectedJS = $$props.injectedJS);
		if ('injectedCSS' in $$props) $$invalidate('injectedCSS', injectedCSS = $$props.injectedCSS);
		if ('foo' in $$props) foo = $$props.foo;
		if ('viewer' in $$props) $$invalidate('viewer', viewer = $$props.viewer);
		if ('js_editor' in $$props) $$invalidate('js_editor', js_editor = $$props.js_editor);
		if ('css_editor' in $$props) $$invalidate('css_editor', css_editor = $$props.css_editor);
		if ('view' in $$props) $$invalidate('view', view = $$props.view);
	};

	return {
		svelteUrl,
		workersUrl,
		status,
		sourceErrorLoc,
		runtimeError,
		embedded,
		relaxed,
		injectedJS,
		injectedCSS,
		viewer,
		js_editor,
		css_editor,
		view,
		click_handler,
		click_handler_1,
		click_handler_2,
		viewer_1_binding,
		viewer_1_error_binding,
		codemirror_binding,
		codemirror_binding_1,
		codemirror_binding_2
	};
}

class Index$1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$l, create_fragment$l, safe_not_equal, ["svelteUrl", "workersUrl", "status", "sourceErrorLoc", "runtimeError", "embedded", "relaxed", "injectedJS", "injectedCSS"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Index", options, id: create_fragment$l.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.svelteUrl === undefined && !('svelteUrl' in props)) {
			console.warn("<Index> was created without expected prop 'svelteUrl'");
		}
		if (ctx.workersUrl === undefined && !('workersUrl' in props)) {
			console.warn("<Index> was created without expected prop 'workersUrl'");
		}
		if (ctx.status === undefined && !('status' in props)) {
			console.warn("<Index> was created without expected prop 'status'");
		}
		if (ctx.injectedJS === undefined && !('injectedJS' in props)) {
			console.warn("<Index> was created without expected prop 'injectedJS'");
		}
		if (ctx.injectedCSS === undefined && !('injectedCSS' in props)) {
			console.warn("<Index> was created without expected prop 'injectedCSS'");
		}
	}

	get svelteUrl() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set svelteUrl(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get workersUrl() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set workersUrl(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get status() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set status(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get sourceErrorLoc() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set sourceErrorLoc(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get runtimeError() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set runtimeError(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get embedded() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set embedded(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get relaxed() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set relaxed(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get injectedJS() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set injectedJS(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get injectedCSS() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set injectedCSS(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const workers$1 = new Map();

let uid$2 = 1;

class Bundler {
	constructor({ workersUrl, packagesUrl, svelteUrl, onstatus }) {
		const hash = `${packagesUrl}:${svelteUrl}`;

		if (!workers$1.has(hash)) {
			const worker = new Worker(`${workersUrl}/bundler.js`);
			worker.postMessage({ type: 'init', packagesUrl, svelteUrl });
			workers$1.set(hash, worker);
		}

		this.worker = workers$1.get(hash);

		this.handlers = new Map();

		this.worker.addEventListener('message', event => {
			const handler = this.handlers.get(event.data.uid);

			if (handler) { // if no handler, was meant for a different REPL
				if (event.data.type === 'status') {
					onstatus(event.data.message);
					return;
				}

				onstatus(null);
				handler(event.data);
				this.handlers.delete(event.data.uid);
			}
		});
	}

	bundle(components) {
		return new Promise(fulfil => {
			this.handlers.set(uid$2, fulfil);

			this.worker.postMessage({
				uid: uid$2,
				type: 'bundle',
				components
			});

			uid$2 += 1;
		});
	}

	destroy() {
		this.worker.terminate();
	}
}

/* node_modules\@sveltejs\svelte-repl\src\Repl.svelte generated by Svelte v3.12.0 */
const { Error: Error_1 } = globals;

const file$g = "node_modules\\@sveltejs\\svelte-repl\\src\\Repl.svelte";

// (217:2) <section slot=a>
function create_a_slot$1(ctx) {
	var section, t, current;

	var componentselector = new ComponentSelector({
		props: { handle_select: ctx.handle_select },
		$$inline: true
	});

	let moduleeditor_props = { errorLoc: ctx.sourceErrorLoc || ctx.runtimeErrorLoc };
	var moduleeditor = new ModuleEditor({
		props: moduleeditor_props,
		$$inline: true
	});

	ctx.moduleeditor_binding(moduleeditor);

	const block = {
		c: function create() {
			section = element("section");
			componentselector.$$.fragment.c();
			t = space();
			moduleeditor.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { slot: true }, false);
			var section_nodes = children(section);

			componentselector.$$.fragment.l(section_nodes);
			t = claim_space(section_nodes);
			moduleeditor.$$.fragment.l(section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(section, "slot", "a");
			add_location(section, file$g, 216, 2, 5067);
		},

		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			mount_component(componentselector, section, null);
			append_dev(section, t);
			mount_component(moduleeditor, section, null);
			current = true;
		},

		p: function update_1(changed, ctx) {
			var moduleeditor_changes = {};
			moduleeditor.$set(moduleeditor_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(componentselector.$$.fragment, local);

			transition_in(moduleeditor.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(componentselector.$$.fragment, local);
			transition_out(moduleeditor.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(section);
			}

			destroy_component(componentselector);

			ctx.moduleeditor_binding(null);

			destroy_component(moduleeditor);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_a_slot$1.name, type: "slot", source: "(217:2) <section slot=a>", ctx });
	return block;
}

// (222:2) <section slot=b style='height: 100%;'>
function create_b_slot$1(ctx) {
	var section, current;

	var output_1 = new Index$1({
		props: {
		svelteUrl: ctx.svelteUrl,
		workersUrl: ctx.workersUrl,
		status: ctx.status,
		embedded: ctx.embedded,
		relaxed: ctx.relaxed,
		injectedJS: ctx.injectedJS,
		injectedCSS: ctx.injectedCSS
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			section = element("section");
			output_1.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { slot: true, style: true }, false);
			var section_nodes = children(section);

			output_1.$$.fragment.l(section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(section, "slot", "b");
			set_style(section, "height", "100%");
			add_location(section, file$g, 221, 2, 5224);
		},

		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			mount_component(output_1, section, null);
			current = true;
		},

		p: function update_1(changed, ctx) {
			var output_1_changes = {};
			if (changed.svelteUrl) output_1_changes.svelteUrl = ctx.svelteUrl;
			if (changed.workersUrl) output_1_changes.workersUrl = ctx.workersUrl;
			if (changed.status) output_1_changes.status = ctx.status;
			if (changed.embedded) output_1_changes.embedded = ctx.embedded;
			if (changed.relaxed) output_1_changes.relaxed = ctx.relaxed;
			if (changed.injectedJS) output_1_changes.injectedJS = ctx.injectedJS;
			if (changed.injectedCSS) output_1_changes.injectedCSS = ctx.injectedCSS;
			output_1.$set(output_1_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(output_1.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(output_1.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(section);
			}

			destroy_component(output_1);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_b_slot$1.name, type: "slot", source: "(222:2) <section slot=b style='height: 100%;'>", ctx });
	return block;
}

// (212:1) <SplitPane   type="{orientation === 'rows' ? 'vertical' : 'horizontal'}"   pos="{fixed ? fixedPos : orientation === 'rows' ? 50 : 60}"   {fixed}  >
function create_default_slot$4(ctx) {
	var t;

	const block = {
		c: function create() {
			t = space();
		},

		l: function claim(nodes) {
			t = claim_space(nodes);
		},

		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},

		p: noop,
		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_default_slot$4.name, type: "slot", source: "(212:1) <SplitPane   type=\"{orientation === 'rows' ? 'vertical' : 'horizontal'}\"   pos=\"{fixed ? fixedPos : orientation === 'rows' ? 50 : 60}\"   {fixed}  >", ctx });
	return block;
}

function create_fragment$m(ctx) {
	var div, current;

	var splitpane = new SplitPane({
		props: {
		type: ctx.orientation === 'rows' ? 'vertical' : 'horizontal',
		pos: ctx.fixed ? ctx.fixedPos : ctx.orientation === 'rows' ? 50 : 60,
		fixed: ctx.fixed,
		$$slots: {
		default: [create_default_slot$4],
		b: [create_b_slot$1],
		a: [create_a_slot$1]
	},
		$$scope: { ctx }
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			div = element("div");
			splitpane.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			splitpane.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(div, "class", "container svelte-177xqak");
			toggle_class(div, "orientation", ctx.orientation);
			add_location(div, file$g, 210, 0, 4874);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(splitpane, div, null);
			current = true;
		},

		p: function update_1(changed, ctx) {
			var splitpane_changes = {};
			if (changed.orientation) splitpane_changes.type = ctx.orientation === 'rows' ? 'vertical' : 'horizontal';
			if (changed.fixed || changed.fixedPos || changed.orientation) splitpane_changes.pos = ctx.fixed ? ctx.fixedPos : ctx.orientation === 'rows' ? 50 : 60;
			if (changed.fixed) splitpane_changes.fixed = ctx.fixed;
			if (changed.$$scope || changed.svelteUrl || changed.workersUrl || changed.status || changed.embedded || changed.relaxed || changed.injectedJS || changed.injectedCSS || changed.input) splitpane_changes.$$scope = { changed, ctx };
			splitpane.$set(splitpane_changes);

			if (changed.orientation) {
				toggle_class(div, "orientation", ctx.orientation);
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(splitpane.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(splitpane.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			destroy_component(splitpane);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$m.name, type: "component", source: "", ctx });
	return block;
}

function instance$m($$self, $$props, $$invalidate) {
	let $bundle, $components, $selected, $compile_options;

	

	let { workersUrl, packagesUrl = 'https://unpkg.com', svelteUrl = `${packagesUrl}/svelte`, embedded = false, orientation = 'columns', relaxed = false, fixed = false, fixedPos = 50, injectedJS = '', injectedCSS = '' } = $$props;

	function toJSON() {
		return {
			imports: $bundle.imports,
			components: $components
		};
	}

	async function set(data) {
		components.set(data.components);
		selected.set(data.components[0]);

		rebundle();

		await module_editor_ready;
		await output_ready;

		$$invalidate('injectedCSS', injectedCSS = data.css || '');
		module_editor.set($selected.source, $selected.type);
		output.set($selected, $compile_options);
	}

	function update(data) {
		const { name, type } = $selected || {};

		components.set(data.components);

		const matched_component = data.components.find(file => file.name === name && file.type === type);
		selected.set(matched_component || data.components[0]);

		$$invalidate('injectedCSS', injectedCSS = data.css || '');

		if (matched_component) {
			module_editor.update(matched_component.source);
			output.update(matched_component, $compile_options);
		} else {
			module_editor.set(matched_component.source, matched_component.type);
			output.set(matched_component, $compile_options);
		}
	}

	if (!workersUrl) {
		throw new Error(`You must supply workersUrl prop to <Repl>`);
	}

	const dispatch = createEventDispatcher();

	const components = writable([]); validate_store(components, 'components'); component_subscribe($$self, components, $$value => { $components = $$value; $$invalidate('$components', $components); });
	const selected = writable(null); validate_store(selected, 'selected'); component_subscribe($$self, selected, $$value => { $selected = $$value; $$invalidate('$selected', $selected); });
	const bundle = writable(null); validate_store(bundle, 'bundle'); component_subscribe($$self, bundle, $$value => { $bundle = $$value; $$invalidate('$bundle', $bundle); });

	const compile_options = writable({
		generate: 'dom',
		dev: false,
		css: false,
		hydratable: false,
		customElement: false,
		immutable: false,
		legacy: false
	}); validate_store(compile_options, 'compile_options'); component_subscribe($$self, compile_options, $$value => { $compile_options = $$value; $$invalidate('$compile_options', $compile_options); });

	let module_editor;
	let output;

	let current_token;
	async function rebundle() {
		const token = current_token = {};
		const result = await bundler.bundle($components);
		if (result && token === current_token) bundle.set(result);
	}

	// TODO this is a horrible kludge, written in a panic. fix it
	let fulfil_module_editor_ready;
	let module_editor_ready = new Promise(f => fulfil_module_editor_ready = f);

	let fulfil_output_ready;
	let output_ready = new Promise(f => fulfil_output_ready = f);


	setContext('REPL', {
		components,
		selected,
		bundle,
		compile_options,

		rebundle,

		navigate: item => {
			const match = /^(.+)\.(\w+)$/.exec(item.filename);
			if (!match) return; // ???

			const [, name, type] = match;
			const component = $components.find(c => c.name === name && c.type === type);
			handle_select(component);

			// TODO select the line/column in question
		},

		handle_change: event => {
			selected.update(component => {
				// TODO this is a bit hacky — we're relying on mutability
				// so that updating components works... might be better
				// if a) components had unique IDs, b) we tracked selected
				// *index* rather than component, and c) `selected` was
				// derived from `components` and `index`
				component.source = event.detail.value;
				return component;
			});

			components.update(c => c);

			// recompile selected component
			output.update($selected, $compile_options);

			rebundle();

			dispatch('change', {
				components: $components
			});
		},

		register_module_editor(editor) {
			module_editor = editor;
			fulfil_module_editor_ready();
		},

		register_output(handlers) {
			$$invalidate('output', output = handlers);
			fulfil_output_ready();
		},

		request_focus() {
			module_editor.focus();
		}
	});

	function handle_select(component) {
		selected.set(component);
		module_editor.set(component.source, component.type);
		output.set($selected, $compile_options);
	}

	let input;
	let sourceErrorLoc;
	let runtimeErrorLoc; // TODO refactor this stuff — runtimeErrorLoc is unused
	let status = null;

	const bundler = is_browser && new Bundler({
		workersUrl,
		packagesUrl,
		svelteUrl,
		onstatus: message => {
			$$invalidate('status', status = message);
		}
	});

	const writable_props = ['workersUrl', 'packagesUrl', 'svelteUrl', 'embedded', 'orientation', 'relaxed', 'fixed', 'fixedPos', 'injectedJS', 'injectedCSS'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<Repl> was created with unknown prop '${key}'`);
	});

	function moduleeditor_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('input', input = $$value);
		});
	}

	$$self.$set = $$props => {
		if ('workersUrl' in $$props) $$invalidate('workersUrl', workersUrl = $$props.workersUrl);
		if ('packagesUrl' in $$props) $$invalidate('packagesUrl', packagesUrl = $$props.packagesUrl);
		if ('svelteUrl' in $$props) $$invalidate('svelteUrl', svelteUrl = $$props.svelteUrl);
		if ('embedded' in $$props) $$invalidate('embedded', embedded = $$props.embedded);
		if ('orientation' in $$props) $$invalidate('orientation', orientation = $$props.orientation);
		if ('relaxed' in $$props) $$invalidate('relaxed', relaxed = $$props.relaxed);
		if ('fixed' in $$props) $$invalidate('fixed', fixed = $$props.fixed);
		if ('fixedPos' in $$props) $$invalidate('fixedPos', fixedPos = $$props.fixedPos);
		if ('injectedJS' in $$props) $$invalidate('injectedJS', injectedJS = $$props.injectedJS);
		if ('injectedCSS' in $$props) $$invalidate('injectedCSS', injectedCSS = $$props.injectedCSS);
	};

	$$self.$capture_state = () => {
		return { workersUrl, packagesUrl, svelteUrl, embedded, orientation, relaxed, fixed, fixedPos, injectedJS, injectedCSS, module_editor, output, current_token, fulfil_module_editor_ready, module_editor_ready, fulfil_output_ready, output_ready, input, sourceErrorLoc, runtimeErrorLoc, status, $bundle, $components, $selected, $compile_options };
	};

	$$self.$inject_state = $$props => {
		if ('workersUrl' in $$props) $$invalidate('workersUrl', workersUrl = $$props.workersUrl);
		if ('packagesUrl' in $$props) $$invalidate('packagesUrl', packagesUrl = $$props.packagesUrl);
		if ('svelteUrl' in $$props) $$invalidate('svelteUrl', svelteUrl = $$props.svelteUrl);
		if ('embedded' in $$props) $$invalidate('embedded', embedded = $$props.embedded);
		if ('orientation' in $$props) $$invalidate('orientation', orientation = $$props.orientation);
		if ('relaxed' in $$props) $$invalidate('relaxed', relaxed = $$props.relaxed);
		if ('fixed' in $$props) $$invalidate('fixed', fixed = $$props.fixed);
		if ('fixedPos' in $$props) $$invalidate('fixedPos', fixedPos = $$props.fixedPos);
		if ('injectedJS' in $$props) $$invalidate('injectedJS', injectedJS = $$props.injectedJS);
		if ('injectedCSS' in $$props) $$invalidate('injectedCSS', injectedCSS = $$props.injectedCSS);
		if ('module_editor' in $$props) module_editor = $$props.module_editor;
		if ('output' in $$props) $$invalidate('output', output = $$props.output);
		if ('current_token' in $$props) current_token = $$props.current_token;
		if ('fulfil_module_editor_ready' in $$props) fulfil_module_editor_ready = $$props.fulfil_module_editor_ready;
		if ('module_editor_ready' in $$props) module_editor_ready = $$props.module_editor_ready;
		if ('fulfil_output_ready' in $$props) fulfil_output_ready = $$props.fulfil_output_ready;
		if ('output_ready' in $$props) output_ready = $$props.output_ready;
		if ('input' in $$props) $$invalidate('input', input = $$props.input);
		if ('sourceErrorLoc' in $$props) $$invalidate('sourceErrorLoc', sourceErrorLoc = $$props.sourceErrorLoc);
		if ('runtimeErrorLoc' in $$props) $$invalidate('runtimeErrorLoc', runtimeErrorLoc = $$props.runtimeErrorLoc);
		if ('status' in $$props) $$invalidate('status', status = $$props.status);
		if ('$bundle' in $$props) bundle.set($bundle);
		if ('$components' in $$props) components.set($components);
		if ('$selected' in $$props) selected.set($selected);
		if ('$compile_options' in $$props) compile_options.set($compile_options);
	};

	$$self.$$.update = ($$dirty = { output: 1, $selected: 1, $compile_options: 1 }) => {
		if ($$dirty.output || $$dirty.$selected || $$dirty.$compile_options) { if (output && $selected) {
				output.update($selected, $compile_options);
			} }
	};

	return {
		workersUrl,
		packagesUrl,
		svelteUrl,
		embedded,
		orientation,
		relaxed,
		fixed,
		fixedPos,
		injectedJS,
		injectedCSS,
		toJSON,
		set,
		update,
		components,
		selected,
		bundle,
		compile_options,
		handle_select,
		input,
		sourceErrorLoc,
		runtimeErrorLoc,
		status,
		moduleeditor_binding
	};
}

class Repl extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$m, create_fragment$m, safe_not_equal, ["workersUrl", "packagesUrl", "svelteUrl", "embedded", "orientation", "relaxed", "fixed", "fixedPos", "injectedJS", "injectedCSS", "toJSON", "set", "update"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Repl", options, id: create_fragment$m.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.workersUrl === undefined && !('workersUrl' in props)) {
			console.warn("<Repl> was created without expected prop 'workersUrl'");
		}
		if (ctx.toJSON === undefined && !('toJSON' in props)) {
			console.warn("<Repl> was created without expected prop 'toJSON'");
		}
		if (ctx.set === undefined && !('set' in props)) {
			console.warn("<Repl> was created without expected prop 'set'");
		}
		if (ctx.update === undefined && !('update' in props)) {
			console.warn("<Repl> was created without expected prop 'update'");
		}
	}

	get workersUrl() {
		throw new Error_1("<Repl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set workersUrl(value) {
		throw new Error_1("<Repl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get packagesUrl() {
		throw new Error_1("<Repl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set packagesUrl(value) {
		throw new Error_1("<Repl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get svelteUrl() {
		throw new Error_1("<Repl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set svelteUrl(value) {
		throw new Error_1("<Repl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get embedded() {
		throw new Error_1("<Repl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set embedded(value) {
		throw new Error_1("<Repl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get orientation() {
		throw new Error_1("<Repl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set orientation(value) {
		throw new Error_1("<Repl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get relaxed() {
		throw new Error_1("<Repl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set relaxed(value) {
		throw new Error_1("<Repl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get fixed() {
		throw new Error_1("<Repl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set fixed(value) {
		throw new Error_1("<Repl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get fixedPos() {
		throw new Error_1("<Repl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set fixedPos(value) {
		throw new Error_1("<Repl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get injectedJS() {
		throw new Error_1("<Repl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set injectedJS(value) {
		throw new Error_1("<Repl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get injectedCSS() {
		throw new Error_1("<Repl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set injectedCSS(value) {
		throw new Error_1("<Repl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get toJSON() {
		return this.$$.ctx.toJSON;
	}

	set toJSON(value) {
		throw new Error_1("<Repl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get set() {
		return this.$$.ctx.set;
	}

	set set(value) {
		throw new Error_1("<Repl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get update() {
		return this.$$.ctx.update;
	}

	set update(value) {
		throw new Error_1("<Repl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Repl as R };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
