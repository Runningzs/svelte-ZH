import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, w as mount_component, x as transition_in, y as transition_out, z as destroy_component, e as element, l as space, c as claim_element, a as children, b as detach_dev, p as claim_space, f as attr_dev, h as add_location, k as append_dev, j as insert_dev } from './index.4e52d202.js';
import './index.ad9ca859.js';
import './Repl.f1ddc62a.js';
import './examples.cd1fcc82.js';
import './InputOutputToggle.cf9a1ce1.js';
import { R as ReplWidget } from './ReplWidget.9e27fb73.js';

/* src\routes\repl\embed.svelte generated by Svelte v3.12.0 */

const file = "src\\routes\\repl\\embed.svelte";

// (42:1) {#if true}
function create_if_block(ctx) {
	var current;

	var replwidget = new ReplWidget({
		props: {
		version: ctx.version,
		gist: ctx.gist,
		example: ctx.example,
		embedded: true
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			replwidget.$$.fragment.c();
		},

		l: function claim(nodes) {
			replwidget.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(replwidget, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var replwidget_changes = {};
			if (changed.version) replwidget_changes.version = ctx.version;
			if (changed.gist) replwidget_changes.gist = ctx.gist;
			if (changed.example) replwidget_changes.example = ctx.example;
			replwidget.$set(replwidget_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(replwidget.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(replwidget.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(replwidget, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block.name, type: "if", source: "(42:1) {#if true}", ctx });
	return block;
}

function create_fragment(ctx) {
	var meta0, meta1, meta2, t, div, current;

	var if_block =  create_if_block(ctx);

	const block = {
		c: function create() {
			meta0 = element("meta");
			meta1 = element("meta");
			meta2 = element("meta");
			t = space();
			div = element("div");
			if (if_block) if_block.c();
			this.h();
		},

		l: function claim(nodes) {
			meta0 = claim_element(nodes, "META", { name: true, content: true }, false);
			var meta0_nodes = children(meta0);

			meta0_nodes.forEach(detach_dev);

			meta1 = claim_element(nodes, "META", { name: true, content: true }, false);
			var meta1_nodes = children(meta1);

			meta1_nodes.forEach(detach_dev);

			meta2 = claim_element(nodes, "META", { name: true, content: true }, false);
			var meta2_nodes = children(meta2);

			meta2_nodes.forEach(detach_dev);
			t = claim_space(nodes);

			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			document.title = "REPL â€¢ Svelte";
			attr_dev(meta0, "name", "twitter:title");
			attr_dev(meta0, "content", "Svelte REPL");
			add_location(meta0, file, 35, 1, 618);
			attr_dev(meta1, "name", "twitter:description");
			attr_dev(meta1, "content", "Cybernetically enhanced web apps");
			add_location(meta1, file, 36, 1, 670);
			attr_dev(meta2, "name", "Description");
			attr_dev(meta2, "content", "Interactive Svelte playground");
			add_location(meta2, file, 37, 1, 749);
			attr_dev(div, "class", "repl-outer svelte-b43nxq");
			add_location(div, file, 40, 0, 834);
		},

		m: function mount(target, anchor) {
			append_dev(document.head, meta0);
			append_dev(document.head, meta1);
			append_dev(document.head, meta2);
			insert_dev(target, t, anchor);
			insert_dev(target, div, anchor);
			if (if_block) if_block.m(div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			if_block.p(changed, ctx);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},

		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},

		d: function destroy(detaching) {
			detach_dev(meta0);
			detach_dev(meta1);
			detach_dev(meta2);

			if (detaching) {
				detach_dev(t);
				detach_dev(div);
			}

			if (if_block) if_block.d();
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment.name, type: "component", source: "", ctx });
	return block;
}

function preload({ query }) {
	return {
		version: query.version,
		gist: query.gist,
		example: query.example
	};
}

function instance($$self, $$props, $$invalidate) {
	let { version = '3', gist, example } = $$props;

	const writable_props = ['version', 'gist', 'example'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<Embed> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('version' in $$props) $$invalidate('version', version = $$props.version);
		if ('gist' in $$props) $$invalidate('gist', gist = $$props.gist);
		if ('example' in $$props) $$invalidate('example', example = $$props.example);
	};

	$$self.$capture_state = () => {
		return { version, gist, example };
	};

	$$self.$inject_state = $$props => {
		if ('version' in $$props) $$invalidate('version', version = $$props.version);
		if ('gist' in $$props) $$invalidate('gist', gist = $$props.gist);
		if ('example' in $$props) $$invalidate('example', example = $$props.example);
	};

	return { version, gist, example };
}

class Embed extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["version", "gist", "example"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Embed", options, id: create_fragment.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.gist === undefined && !('gist' in props)) {
			console.warn("<Embed> was created without expected prop 'gist'");
		}
		if (ctx.example === undefined && !('example' in props)) {
			console.warn("<Embed> was created without expected prop 'example'");
		}
	}

	get version() {
		throw new Error("<Embed>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set version(value) {
		throw new Error("<Embed>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get gist() {
		throw new Error("<Embed>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set gist(value) {
		throw new Error("<Embed>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get example() {
		throw new Error("<Embed>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set example(value) {
		throw new Error("<Embed>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Embed;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1iZWQuZTgzZDQ2YmYuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvcmVwbC9lbWJlZC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdCBjb250ZXh0PVwibW9kdWxlXCI+XHJcblx0ZXhwb3J0IGZ1bmN0aW9uIHByZWxvYWQoeyBxdWVyeSB9KSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR2ZXJzaW9uOiBxdWVyeS52ZXJzaW9uLFxyXG5cdFx0XHRnaXN0OiBxdWVyeS5naXN0LFxyXG5cdFx0XHRleGFtcGxlOiBxdWVyeS5leGFtcGxlXHJcblx0XHR9O1xyXG5cdH1cclxuPC9zY3JpcHQ+XHJcblxyXG48c2NyaXB0PlxyXG5cdGltcG9ydCBSZXBsV2lkZ2V0IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvUmVwbC9SZXBsV2lkZ2V0LnN2ZWx0ZSc7XHJcblxyXG5cdGV4cG9ydCBsZXQgdmVyc2lvbiA9ICczJztcclxuXHRleHBvcnQgbGV0IGdpc3Q7XHJcblx0ZXhwb3J0IGxldCBleGFtcGxlO1xyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZT5cclxuXHQucmVwbC1vdXRlciB7XHJcblx0XHRwb3NpdGlvbjogZml4ZWQ7XHJcblx0XHR0b3A6IDA7XHJcblx0XHRsZWZ0OiAwO1xyXG5cdFx0d2lkdGg6IDEwMCU7XHJcblx0XHRoZWlnaHQ6IDEwMCU7XHJcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iYWNrKTtcclxuXHRcdG92ZXJmbG93OiBoaWRkZW47XHJcblx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG5cdFx0LS1wYW5lLWNvbnRyb2xzLWg6IDQuMnJlbTtcclxuXHR9XHJcbjwvc3R5bGU+XHJcblxyXG48c3ZlbHRlOmhlYWQ+XHJcblx0PHRpdGxlPlJFUEwg4oCiIFN2ZWx0ZTwvdGl0bGU+XHJcblxyXG5cdDxtZXRhIG5hbWU9XCJ0d2l0dGVyOnRpdGxlXCIgY29udGVudD1cIlN2ZWx0ZSBSRVBMXCI+XHJcblx0PG1ldGEgbmFtZT1cInR3aXR0ZXI6ZGVzY3JpcHRpb25cIiBjb250ZW50PVwiQ3liZXJuZXRpY2FsbHkgZW5oYW5jZWQgd2ViIGFwcHNcIj5cclxuXHQ8bWV0YSBuYW1lPVwiRGVzY3JpcHRpb25cIiBjb250ZW50PVwiSW50ZXJhY3RpdmUgU3ZlbHRlIHBsYXlncm91bmRcIj5cclxuPC9zdmVsdGU6aGVhZD5cclxuXHJcbjxkaXYgY2xhc3M9XCJyZXBsLW91dGVyXCI+XHJcblx0eyNpZiBwcm9jZXNzLmJyb3dzZXJ9XHJcblx0XHQ8UmVwbFdpZGdldCB7dmVyc2lvbn0ge2dpc3R9IHtleGFtcGxlfSBlbWJlZGRlZD17dHJ1ZX0vPlxyXG5cdHsvaWZ9XHJcbjwvZGl2PlxyXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7ZUEwQ2UsT0FBTztZQUFHLElBQUk7ZUFBRyxPQUFPO1lBQVksSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lEQUF4QyxPQUFPO21EQUFHLElBQUk7eURBQUcsT0FBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF6Qy9CLFNBQVMsT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUU7Q0FDbEMsT0FBTztFQUNOLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztFQUN0QixJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7RUFDaEIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO0VBQ3RCLENBQUM7Q0FDRjs7O0NBTU0sTUFBSSxPQUFPLEdBQUcsR0FBRyxFQUNiLElBQUksRUFDSixtQkFBTyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
