import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, e as element, E as text, l as space, c as claim_element, a as children, F as claim_text, b as detach_dev, p as claim_space, f as attr_dev, h as add_location, j as insert_dev, k as append_dev, H as set_data_dev, n as noop, R as destroy_each } from './index.4e52d202.js';

/* src\routes\blog\index.svelte generated by Svelte v3.12.0 */

const file = "src\\routes\\blog\\index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.post = list[i];
	return child_ctx;
}

// (22:1) {#each posts as post}
function create_each_block(ctx) {
	var article, a, h2, t0_value = ctx.post.metadata.title + "", t0, t1, p, t2_value = ctx.post.metadata.description + "", t2, a_href_value, t3, article_data_pubdate_value;

	const block = {
		c: function create() {
			article = element("article");
			a = element("a");
			h2 = element("h2");
			t0 = text(t0_value);
			t1 = space();
			p = element("p");
			t2 = text(t2_value);
			t3 = space();
			this.h();
		},

		l: function claim(nodes) {
			article = claim_element(nodes, "ARTICLE", { class: true, "data-pubdate": true }, false);
			var article_nodes = children(article);

			a = claim_element(article_nodes, "A", { class: true, rel: true, href: true, title: true }, false);
			var a_nodes = children(a);

			h2 = claim_element(a_nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t0 = claim_text(h2_nodes, t0_value);
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(a_nodes);

			p = claim_element(a_nodes, "P", { class: true }, false);
			var p_nodes = children(p);

			t2 = claim_text(p_nodes, t2_value);
			p_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			t3 = claim_space(article_nodes);
			article_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(h2, "class", "svelte-1nm9kyd");
			add_location(h2, file, 24, 4, 806);
			attr_dev(p, "class", "svelte-1nm9kyd");
			add_location(p, file, 25, 4, 842);
			attr_dev(a, "class", "no-underline svelte-1nm9kyd");
			attr_dev(a, "rel", "prefetch");
			attr_dev(a, "href", a_href_value = "blog/" + ctx.post.slug);
			attr_dev(a, "title", "Read the article »");
			add_location(a, file, 23, 3, 710);
			attr_dev(article, "class", "post svelte-1nm9kyd");
			attr_dev(article, "data-pubdate", article_data_pubdate_value = ctx.post.metadata.dateString);
			add_location(article, file, 22, 2, 643);
		},

		m: function mount(target, anchor) {
			insert_dev(target, article, anchor);
			append_dev(article, a);
			append_dev(a, h2);
			append_dev(h2, t0);
			append_dev(a, t1);
			append_dev(a, p);
			append_dev(p, t2);
			append_dev(article, t3);
		},

		p: function update(changed, ctx) {
			if ((changed.posts) && t0_value !== (t0_value = ctx.post.metadata.title + "")) {
				set_data_dev(t0, t0_value);
			}

			if ((changed.posts) && t2_value !== (t2_value = ctx.post.metadata.description + "")) {
				set_data_dev(t2, t2_value);
			}

			if ((changed.posts) && a_href_value !== (a_href_value = "blog/" + ctx.post.slug)) {
				attr_dev(a, "href", a_href_value);
			}

			if ((changed.posts) && article_data_pubdate_value !== (article_data_pubdate_value = ctx.post.metadata.dateString)) {
				attr_dev(article, "data-pubdate", article_data_pubdate_value);
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(article);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block.name, type: "each", source: "(22:1) {#each posts as post}", ctx });
	return block;
}

function create_fragment(ctx) {
	var link, meta0, meta1, meta2, t, div;

	let each_value = ctx.posts;

	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			link = element("link");
			meta0 = element("meta");
			meta1 = element("meta");
			meta2 = element("meta");
			t = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
			this.h();
		},

		l: function claim(nodes) {
			link = claim_element(nodes, "LINK", { rel: true, type: true, title: true, href: true }, false);
			var link_nodes = children(link);

			link_nodes.forEach(detach_dev);

			meta0 = claim_element(nodes, "META", { name: true, content: true }, false);
			var meta0_nodes = children(meta0);

			meta0_nodes.forEach(detach_dev);

			meta1 = claim_element(nodes, "META", { name: true, content: true }, false);
			var meta1_nodes = children(meta1);

			meta1_nodes.forEach(detach_dev);

			meta2 = claim_element(nodes, "META", { name: true, content: true }, false);
			var meta2_nodes = children(meta2);

			meta2_nodes.forEach(detach_dev);
			t = claim_space(nodes);

			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			document.title = "Blog • Svelte";
			attr_dev(link, "rel", "alternate");
			attr_dev(link, "type", "application/rss+xml");
			attr_dev(link, "title", "Svelte blog");
			attr_dev(link, "href", "blog/rss.xml");
			add_location(link, file, 13, 1, 259);
			attr_dev(meta0, "name", "twitter:title");
			attr_dev(meta0, "content", "Svelte blog");
			add_location(meta0, file, 15, 1, 353);
			attr_dev(meta1, "name", "twitter:description");
			attr_dev(meta1, "content", "Articles about Svelte and UI development");
			add_location(meta1, file, 16, 1, 405);
			attr_dev(meta2, "name", "Description");
			attr_dev(meta2, "content", "Articles about Svelte and UI development");
			add_location(meta2, file, 17, 1, 492);
			attr_dev(div, "class", "posts stretch svelte-1nm9kyd");
			add_location(div, file, 20, 0, 588);
		},

		m: function mount(target, anchor) {
			append_dev(document.head, link);
			append_dev(document.head, meta0);
			append_dev(document.head, meta1);
			append_dev(document.head, meta2);
			insert_dev(target, t, anchor);
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},

		p: function update(changed, ctx) {
			if (changed.posts) {
				each_value = ctx.posts;

				let i;
				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value.length;
			}
		},

		i: noop,
		o: noop,

		d: function destroy(detaching) {
			detach_dev(link);
			detach_dev(meta0);
			detach_dev(meta1);
			detach_dev(meta2);

			if (detaching) {
				detach_dev(t);
				detach_dev(div);
			}

			destroy_each(each_blocks, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment.name, type: "component", source: "", ctx });
	return block;
}

async function preload() {
	const posts = await this.fetch(`blog.json`).then(r => r.json());
	return { posts };
}

function instance($$self, $$props, $$invalidate) {
	let { posts } = $$props;

	const writable_props = ['posts'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<Index> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('posts' in $$props) $$invalidate('posts', posts = $$props.posts);
	};

	$$self.$capture_state = () => {
		return { posts };
	};

	$$self.$inject_state = $$props => {
		if ('posts' in $$props) $$invalidate('posts', posts = $$props.posts);
	};

	return { posts };
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["posts"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Index", options, id: create_fragment.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.posts === undefined && !('posts' in props)) {
			console.warn("<Index> was created without expected prop 'posts'");
		}
	}

	get posts() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set posts(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Index;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYzMxMWJmNDIuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvYmxvZy9pbmRleC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdCBjb250ZXh0PVwibW9kdWxlXCI+XHJcblx0ZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZWxvYWQoKSB7XHJcblx0XHRjb25zdCBwb3N0cyA9IGF3YWl0IHRoaXMuZmV0Y2goYGJsb2cuanNvbmApLnRoZW4ociA9PiByLmpzb24oKSk7XHJcblx0XHRyZXR1cm4geyBwb3N0cyB9O1xyXG5cdH1cclxuPC9zY3JpcHQ+XHJcblxyXG48c2NyaXB0PlxyXG5cdGV4cG9ydCBsZXQgcG9zdHM7XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN2ZWx0ZTpoZWFkPlxyXG5cdDx0aXRsZT5CbG9nIOKAosKgU3ZlbHRlPC90aXRsZT5cclxuXHQ8bGluayByZWw9XCJhbHRlcm5hdGVcIiB0eXBlPVwiYXBwbGljYXRpb24vcnNzK3htbFwiIHRpdGxlPVwiU3ZlbHRlIGJsb2dcIiBocmVmPVwiYmxvZy9yc3MueG1sXCI+XHJcblxyXG5cdDxtZXRhIG5hbWU9XCJ0d2l0dGVyOnRpdGxlXCIgY29udGVudD1cIlN2ZWx0ZSBibG9nXCI+XHJcblx0PG1ldGEgbmFtZT1cInR3aXR0ZXI6ZGVzY3JpcHRpb25cIiBjb250ZW50PVwiQXJ0aWNsZXMgYWJvdXQgU3ZlbHRlIGFuZCBVSSBkZXZlbG9wbWVudFwiPlxyXG5cdDxtZXRhIG5hbWU9XCJEZXNjcmlwdGlvblwiIGNvbnRlbnQ9XCJBcnRpY2xlcyBhYm91dCBTdmVsdGUgYW5kIFVJIGRldmVsb3BtZW50XCI+XHJcbjwvc3ZlbHRlOmhlYWQ+XHJcblxyXG48ZGl2IGNsYXNzPSdwb3N0cyBzdHJldGNoJz5cclxuXHR7I2VhY2ggcG9zdHMgYXMgcG9zdH1cclxuXHRcdDxhcnRpY2xlIGNsYXNzPSdwb3N0JyBkYXRhLXB1YmRhdGU9e3Bvc3QubWV0YWRhdGEuZGF0ZVN0cmluZ30+XHJcblx0XHRcdDxhIGNsYXNzPVwibm8tdW5kZXJsaW5lXCIgcmVsPSdwcmVmZXRjaCcgaHJlZj0nYmxvZy97cG9zdC5zbHVnfScgdGl0bGU9J1JlYWQgdGhlIGFydGljbGUgwrsnPlxyXG5cdFx0XHRcdDxoMj57cG9zdC5tZXRhZGF0YS50aXRsZX08L2gyPlxyXG5cdFx0XHRcdDxwPntwb3N0Lm1ldGFkYXRhLmRlc2NyaXB0aW9ufTwvcD5cclxuXHRcdFx0PC9hPlxyXG5cdFx0PC9hcnRpY2xlPlxyXG5cdHsvZWFjaH1cclxuPC9kaXY+XHJcblxyXG48c3R5bGU+XHJcblx0LnBvc3RzIHtcclxuXHRcdGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjtcclxuXHRcdGdyaWQtZ2FwOiAxZW07XHJcblx0XHRtaW4taGVpZ2h0OiBjYWxjKDEwMHZoIC0gdmFyKC0tbmF2LWgpKTtcclxuXHRcdHBhZGRpbmc6IHZhcigtLXRvcC1vZmZzZXQpIHZhcigtLXNpZGUtbmF2KSA2cmVtIHZhcigtLXNpZGUtbmF2KTtcclxuXHRcdG1heC13aWR0aDogdmFyKC0tbWFpbi13aWR0aCk7XHJcblx0XHRtYXJnaW46IDAgYXV0bztcclxuXHR9XHJcblxyXG5cdGgyIHtcclxuXHRcdGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuXHRcdG1hcmdpbjogMy4ycmVtIDAgMC40cmVtIDA7XHJcblx0XHRjb2xvcjogdmFyKC0tdGV4dCk7XHJcblx0XHRtYXgtd2lkdGg6IDE4ZW07XHJcblx0XHRmb250LXNpemU6IHZhcigtLWgzKTtcclxuXHRcdGZvbnQtd2VpZ2h0OiA0MDA7XHJcblx0fVxyXG5cclxuXHQucG9zdDpmaXJzdC1jaGlsZCB7XHJcblx0XHRtYXJnaW46IDAgMCAycmVtIDA7XHJcblx0XHRwYWRkaW5nOiAwIDAgNHJlbSAwO1xyXG5cdFx0Ym9yZGVyLWJvdHRvbTogdmFyKC0tYm9yZGVyLXcpIHNvbGlkICM2NzY3Nzg1YjsgLyogYmFzZWQgb24gLS1zZWNvbmQgKi9cclxuXHR9XHJcblxyXG5cdC5wb3N0OmZpcnN0LWNoaWxkIGgyIHtcclxuXHRcdGZvbnQtc2l6ZTogNHJlbTtcclxuXHRcdGZvbnQtd2VpZ2h0OiA0MDA7XHJcblx0XHRjb2xvcjogdmFyKC0tc2Vjb25kKTtcclxuXHR9XHJcblxyXG5cdC5wb3N0OmZpcnN0LWNoaWxkOjpiZWZvcmUsXHJcblx0LnBvc3Q6bnRoLWNoaWxkKDIpOjpiZWZvcmUge1xyXG5cdFx0Y29udGVudDogJ0xhdGVzdCBwb3N0IOKAoiAnIGF0dHIoZGF0YS1wdWJkYXRlKTtcclxuXHRcdGNvbG9yOiB2YXIoLS1mbGFzaCk7XHJcblx0XHRmb250LXNpemU6IHZhcigtLWg2KTtcclxuXHRcdGZvbnQtd2VpZ2h0OiA0MDA7XHJcblx0XHRsZXR0ZXItc3BhY2luZzogLjA1ZW07XHJcblx0XHR0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG5cdH1cclxuXHJcblx0LnBvc3Q6bnRoLWNoaWxkKDIpOjpiZWZvcmUge1xyXG5cdFx0Y29udGVudDogJ09sZGVyIHBvc3RzJztcclxuXHR9XHJcblxyXG5cdC5wb3N0IHAge1xyXG5cdFx0Zm9udC1zaXplOiB2YXIoLS1oNSk7XHJcblx0XHRtYXgtd2lkdGg6IDMwZW07XHJcblx0XHRjb2xvcjogdmFyKC0tc2Vjb25kKTtcclxuXHR9XHJcblxyXG5cdC5wb3N0ID4gYSB7IGRpc3BsYXk6IGJsb2NrIH1cclxuXHJcblx0LnBvc3RzIGE6aG92ZXIsXHJcblx0LnBvc3RzIGE6aG92ZXIgPiBoMiB7XHJcblx0XHRjb2xvcjogdmFyKC0tZmxhc2gpXHJcblx0fVxyXG48L3N0eWxlPlxyXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7b0NBd0JTLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxpQ0FDcEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvREFGcUIsSUFBSSxDQUFDLElBQUk7Ozs7c0VBRHpCLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVTs7Ozs7Ozs7Ozs7Ozs7Ozt1REFFckQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLOzs7O3VEQUNwQixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVc7Ozs7eUVBRnFCLElBQUksQ0FBQyxJQUFJOzs7OzJGQUR6QixJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVU7Ozs7Ozs7Ozs7Ozs7Ozs7OztzQkFEdEQsS0FBSzs7OztnQ0FBVjs7Ozs7Ozs7Ozs7OzttQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O21DQUFBOzs7Ozs7O3FCQUFLLEtBQUs7OzsrQkFBVjs7Ozs7Ozs7Ozs7OzJCQUFBOzs7Z0JBQUEsb0JBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFwQkssZUFBZSxPQUFPLEdBQUc7Q0FDL0IsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0NBQ2hFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQztDQUNqQjs7O0NBSU0sTUFBSSxpQkFBSyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
