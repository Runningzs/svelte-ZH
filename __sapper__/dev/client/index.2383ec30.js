import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_store, r as component_subscribe, L as getContext, e as element, E as text, l as space, c as claim_element, a as children, F as claim_text, b as detach_dev, p as claim_space, f as attr_dev, h as add_location, T as listen_dev, j as insert_dev, k as append_dev, H as set_data_dev, n as noop, U as run_all, G as globals, g as set_style, _ as set_input_value, w as mount_component, A as group_outros, y as transition_out, B as check_outros, x as transition_in, a1 as prop_dev, z as destroy_component, Y as createEventDispatcher, a8 as prevent_default, W as add_render_callback, o as onMount, m as empty, Q as toggle_class, V as binding_callbacks, a4 as bind, a5 as add_flush_callback } from './index.b2dd6920.js';
import './index.ea650d67.js';
import { a as stores$1, g as goto } from './app.ddcf5d08.js';
import { b as Icon } from './index.7b3daa08.js';
import { R as Repl } from './Repl.8a307c73.js';
import { I as InputOutputToggle } from './InputOutputToggle.15f43494.js';

/* src\routes\repl\[id]\_components\AppControls\UserMenu.svelte generated by Svelte v3.12.0 */

const file = "src\\routes\\repl\\[id]\\_components\\AppControls\\UserMenu.svelte";

// (18:1) {#if showMenu}
function create_if_block(ctx) {
	var div, a, t0, t1, button, t2, dispose;

	const block = {
		c: function create() {
			div = element("div");
			a = element("a");
			t0 = text("Your saved apps");
			t1 = space();
			button = element("button");
			t2 = text("Log out");
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			a = claim_element(div_nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t0 = claim_text(a_nodes, "Your saved apps");
			a_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);

			button = claim_element(div_nodes, "BUTTON", { class: true }, false);
			var button_nodes = children(button);

			t2 = claim_text(button_nodes, "Log out");
			button_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(a, "href", "apps");
			attr_dev(a, "class", "svelte-1jk26jo");
			add_location(a, file, 19, 3, 479);
			attr_dev(button, "class", "svelte-1jk26jo");
			add_location(button, file, 20, 3, 517);
			attr_dev(div, "class", "menu svelte-1jk26jo");
			add_location(div, file, 18, 2, 457);
			dispose = listen_dev(button, "click", ctx.logout);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, a);
			append_dev(a, t0);
			append_dev(div, t1);
			append_dev(div, button);
			append_dev(button, t2);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			dispose();
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block.name, type: "if", source: "(18:1) {#if showMenu}", ctx });
	return block;
}

function create_fragment(ctx) {
	var div, span, t0, t1, img, img_alt_value, img_src_value, t2, dispose;

	var if_block = (ctx.showMenu) && create_if_block(ctx);

	const block = {
		c: function create() {
			div = element("div");
			span = element("span");
			t0 = text(ctx.name);
			t1 = space();
			img = element("img");
			t2 = space();
			if (if_block) if_block.c();
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			span = claim_element(div_nodes, "SPAN", { class: true }, false);
			var span_nodes = children(span);

			t0 = claim_text(span_nodes, ctx.name);
			span_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);

			img = claim_element(div_nodes, "IMG", { alt: true, src: true, class: true }, false);
			var img_nodes = children(img);

			img_nodes.forEach(detach_dev);
			t2 = claim_space(div_nodes);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(span, "class", "svelte-1jk26jo");
			add_location(span, file, 14, 1, 362);
			attr_dev(img, "alt", img_alt_value = "" + ctx.name + " avatar");
			attr_dev(img, "src", img_src_value = ctx.$session.user.avatar);
			attr_dev(img, "class", "svelte-1jk26jo");
			add_location(img, file, 15, 1, 383);
			attr_dev(div, "class", "user svelte-1jk26jo");
			add_location(div, file, 13, 0, 261);

			dispose = [
				listen_dev(div, "mouseenter", ctx.mouseenter_handler),
				listen_dev(div, "mouseleave", ctx.mouseleave_handler)
			];
		},

		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, span);
			append_dev(span, t0);
			append_dev(div, t1);
			append_dev(div, img);
			append_dev(div, t2);
			if (if_block) if_block.m(div, null);
		},

		p: function update(changed, ctx) {
			if (changed.name) {
				set_data_dev(t0, ctx.name);
			}

			if ((changed.name) && img_alt_value !== (img_alt_value = "" + ctx.name + " avatar")) {
				attr_dev(img, "alt", img_alt_value);
			}

			if ((changed.$session) && img_src_value !== (img_src_value = ctx.$session.user.avatar)) {
				attr_dev(img, "src", img_src_value);
			}

			if (ctx.showMenu) {
				if (!if_block) {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},

		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			if (if_block) if_block.d();
			run_all(dispose);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment.name, type: "component", source: "", ctx });
	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $session;

	
	const { session } = stores$1(); validate_store(session, 'session'); component_subscribe($$self, session, $$value => { $session = $$value; $$invalidate('$session', $session); });

	const { logout } = getContext('app');

	let showMenu = false;
	let name;

	const mouseenter_handler = () => $$invalidate('showMenu', showMenu = true);

	const mouseleave_handler = () => $$invalidate('showMenu', showMenu = false);

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ('showMenu' in $$props) $$invalidate('showMenu', showMenu = $$props.showMenu);
		if ('name' in $$props) $$invalidate('name', name = $$props.name);
		if ('$session' in $$props) session.set($session);
	};

	$$self.$$.update = ($$dirty = { $session: 1 }) => {
		if ($$dirty.$session) { $$invalidate('name', name = $session.user.name || $session.user.username); }
	};

	return {
		session,
		logout,
		showMenu,
		name,
		$session,
		mouseenter_handler,
		mouseleave_handler
	};
}

class UserMenu extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "UserMenu", options, id: create_fragment.name });
	}
}

const table = [];
for (let n = 0; n < 256; n++) {
	let c = n;
	for (let k = 0; k < 8; k++) {
		c = c & 1 ? 0xEDB88320 ^ (c >>> 1) : c >>> 1;
	}
	table[n] = c;
}

var crc32 = bytes => {
	let sum = -1;
	for (const byte of bytes) {
		sum = (sum >>> 8) ^ table[(sum ^ byte) & 0xFF];
	}
	return sum ^ -1;
};

const int = (n, length) => {
	const out = [];
	while (length--) {
		out.push(n & 0xFF);
		n >>>= 8;
	}
	return out;
};

const toBytes = data => typeof data === 'string' ? [...data].map(char => char.charCodeAt(0)) : data;

var toArray = files => {
	let fileData = [];
	const centralDirectory = [];
	for (const { path, data } of files) {
		const dataBytes = toBytes(data);
		const pathBytes = toBytes(path);
		const commonHeader = [0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ...int(crc32(dataBytes), 4), ...int(dataBytes.length, 4), ...int(dataBytes.length, 4), ...int(pathBytes.length, 2), 0x00, 0x00];
		centralDirectory.push(0x50, 0x4B, 0x01, 0x02, 0x14, 0x00, ...commonHeader, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ...int(fileData.length, 4), ...pathBytes);
		fileData = [...fileData, 0x50, 0x4B, 0x03, 0x04, ...commonHeader, ...pathBytes, ...dataBytes];
	}
	return [...fileData, ...centralDirectory, 0x50, 0x4B, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, ...int(files.length, 2), ...int(files.length, 2), ...int(centralDirectory.length, 4), ...int(fileData.length, 4), 0x00, 0x00];
};

var toBlob = files => new Blob([Uint8Array.from(toArray(files))], { type: 'application/zip' });

var downloadBlob = (blob, filename) => {
	const url = URL.createObjectURL(blob);
	const link = document.createElement('a');
	link.href = url;
	link.download = filename;
	link.style.display = 'none';
	document.body.appendChild(link);
	link.click();
	URL.revokeObjectURL(url);
	link.remove();
};

function keyEvent(code) {
	return function (node, callback) {
		node.addEventListener('keydown', handleKeydown);

		function handleKeydown(event) {
			if (event.keyCode === code) {
				callback.call(this, event);
			}
		}

		return {
			destroy() {
				node.removeEventListener('keydown', handleKeydown);
			}
		};
	};
}

const enter = keyEvent(13);

const isMac = typeof navigator !== 'undefined' && navigator.platform === 'MacIntel';

/* src\routes\repl\[id]\_components\AppControls\index.svelte generated by Svelte v3.12.0 */
const { Error: Error_1 } = globals;

const file$1 = "src\\routes\\repl\\[id]\\_components\\AppControls\\index.svelte";

// (181:3) {:else}
function create_else_block_3(ctx) {
	var current;

	var icon = new Icon({
		props: { name: "maximize" },
		$$inline: true
	});

	const block = {
		c: function create() {
			icon.$$.fragment.c();
		},

		l: function claim(nodes) {
			icon.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},

		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_3.name, type: "else", source: "(181:3) {:else}", ctx });
	return block;
}

// (179:3) {#if zen_mode}
function create_if_block_3(ctx) {
	var current;

	var icon = new Icon({ props: { name: "close" }, $$inline: true });

	const block = {
		c: function create() {
			icon.$$.fragment.c();
		},

		l: function claim(nodes) {
			icon.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},

		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_3.name, type: "if", source: "(179:3) {#if zen_mode}", ctx });
	return block;
}

// (193:3) {:else}
function create_else_block_2(ctx) {
	var current;

	var icon = new Icon({
		props: { name: "git-branch" },
		$$inline: true
	});

	const block = {
		c: function create() {
			icon.$$.fragment.c();
		},

		l: function claim(nodes) {
			icon.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},

		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_2.name, type: "else", source: "(193:3) {:else}", ctx });
	return block;
}

// (191:3) {#if justForked}
function create_if_block_2(ctx) {
	var current;

	var icon = new Icon({ props: { name: "check" }, $$inline: true });

	const block = {
		c: function create() {
			icon.$$.fragment.c();
		},

		l: function claim(nodes) {
			icon.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},

		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_2.name, type: "if", source: "(191:3) {#if justForked}", ctx });
	return block;
}

// (201:3) {:else}
function create_else_block_1(ctx) {
	var current;

	var icon = new Icon({ props: { name: "save" }, $$inline: true });

	const block = {
		c: function create() {
			icon.$$.fragment.c();
		},

		l: function claim(nodes) {
			icon.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},

		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block_1.name, type: "else", source: "(201:3) {:else}", ctx });
	return block;
}

// (199:3) {#if justSaved}
function create_if_block_1(ctx) {
	var current;

	var icon = new Icon({ props: { name: "check" }, $$inline: true });

	const block = {
		c: function create() {
			icon.$$.fragment.c();
		},

		l: function claim(nodes) {
			icon.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},

		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_1.name, type: "if", source: "(199:3) {#if justSaved}", ctx });
	return block;
}

// (208:2) {:else}
function create_else_block(ctx) {
	var button, t0, span, t1, current, dispose;

	var icon = new Icon({
		props: { name: "log-in" },
		$$inline: true
	});

	const block = {
		c: function create() {
			button = element("button");
			icon.$$.fragment.c();
			t0 = space();
			span = element("span");
			t1 = text(" Log in to save");
			this.h();
		},

		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true }, false);
			var button_nodes = children(button);

			icon.$$.fragment.l(button_nodes);
			t0 = claim_space(button_nodes);

			span = claim_element(button_nodes, "SPAN", { class: true }, false);
			var span_nodes = children(span);

			t1 = claim_text(span_nodes, " Log in to save");
			span_nodes.forEach(detach_dev);
			button_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(span, "class", "svelte-8qtwr5");
			add_location(span, file$1, 210, 4, 5015);
			attr_dev(button, "class", "icon svelte-8qtwr5");
			add_location(button, file$1, 208, 3, 4930);
			dispose = listen_dev(button, "click", prevent_default(ctx.login), false, true);
		},

		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			mount_component(icon, button, null);
			append_dev(button, t0);
			append_dev(button, span);
			append_dev(span, t1);
			current = true;
		},

		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(button);
			}

			destroy_component(icon);

			dispose();
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_else_block.name, type: "else", source: "(208:2) {:else}", ctx });
	return block;
}

// (206:2) {#if $session.user}
function create_if_block$1(ctx) {
	var current;

	var usermenu = new UserMenu({ $$inline: true });

	const block = {
		c: function create() {
			usermenu.$$.fragment.c();
		},

		l: function claim(nodes) {
			usermenu.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(usermenu, target, anchor);
			current = true;
		},

		i: function intro(local) {
			if (current) return;
			transition_in(usermenu.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(usermenu.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(usermenu, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$1.name, type: "if", source: "(206:2) {#if $session.user}", ctx });
	return block;
}

function create_fragment$1(ctx) {
	var div1, input, enter_action, t0, div0, button0, current_block_type_index, if_block0, t1, button1, t2, button2, current_block_type_index_1, if_block1, button2_disabled_value, t3, button3, current_block_type_index_2, if_block2, button3_disabled_value, t4, current_block_type_index_3, if_block3, current, dispose;

	var if_block_creators = [
		create_if_block_3,
		create_else_block_3
	];

	var if_blocks = [];

	function select_block_type(changed, ctx) {
		if (ctx.zen_mode) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(null, ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	var icon = new Icon({
		props: { name: "download" },
		$$inline: true
	});

	var if_block_creators_1 = [
		create_if_block_2,
		create_else_block_2
	];

	var if_blocks_1 = [];

	function select_block_type_1(changed, ctx) {
		if (ctx.justForked) return 0;
		return 1;
	}

	current_block_type_index_1 = select_block_type_1(null, ctx);
	if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);

	var if_block_creators_2 = [
		create_if_block_1,
		create_else_block_1
	];

	var if_blocks_2 = [];

	function select_block_type_2(changed, ctx) {
		if (ctx.justSaved) return 0;
		return 1;
	}

	current_block_type_index_2 = select_block_type_2(null, ctx);
	if_block2 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);

	var if_block_creators_3 = [
		create_if_block$1,
		create_else_block
	];

	var if_blocks_3 = [];

	function select_block_type_3(changed, ctx) {
		if (ctx.$session.user) return 0;
		return 1;
	}

	current_block_type_index_3 = select_block_type_3(null, ctx);
	if_block3 = if_blocks_3[current_block_type_index_3] = if_block_creators_3[current_block_type_index_3](ctx);

	const block = {
		c: function create() {
			div1 = element("div");
			input = element("input");
			t0 = space();
			div0 = element("div");
			button0 = element("button");
			if_block0.c();
			t1 = space();
			button1 = element("button");
			icon.$$.fragment.c();
			t2 = space();
			button2 = element("button");
			if_block1.c();
			t3 = space();
			button3 = element("button");
			if_block2.c();
			t4 = space();
			if_block3.c();
			this.h();
		},

		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			input = claim_element(div1_nodes, "INPUT", { class: true }, false);
			var input_nodes = children(input);

			input_nodes.forEach(detach_dev);
			t0 = claim_space(div1_nodes);

			div0 = claim_element(div1_nodes, "DIV", { style: true }, false);
			var div0_nodes = children(div0);

			button0 = claim_element(div0_nodes, "BUTTON", { class: true, title: true }, false);
			var button0_nodes = children(button0);

			if_block0.l(button0_nodes);
			button0_nodes.forEach(detach_dev);
			t1 = claim_space(div0_nodes);

			button1 = claim_element(div0_nodes, "BUTTON", { class: true, disabled: true, title: true }, false);
			var button1_nodes = children(button1);

			icon.$$.fragment.l(button1_nodes);
			button1_nodes.forEach(detach_dev);
			t2 = claim_space(div0_nodes);

			button2 = claim_element(div0_nodes, "BUTTON", { class: true, disabled: true, title: true }, false);
			var button2_nodes = children(button2);

			if_block1.l(button2_nodes);
			button2_nodes.forEach(detach_dev);
			t3 = claim_space(div0_nodes);

			button3 = claim_element(div0_nodes, "BUTTON", { class: true, disabled: true, title: true }, false);
			var button3_nodes = children(button3);

			if_block2.l(button3_nodes);
			button3_nodes.forEach(detach_dev);
			t4 = claim_space(div0_nodes);
			if_block3.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(input, "class", "svelte-8qtwr5");
			add_location(input, file$1, 170, 1, 3983);
			attr_dev(button0, "class", "icon svelte-8qtwr5");
			attr_dev(button0, "title", "fullscreen editor");
			add_location(button0, file$1, 177, 2, 4144);
			attr_dev(button1, "class", "icon svelte-8qtwr5");
			button1.disabled = ctx.downloading;
			attr_dev(button1, "title", "download zip file");
			add_location(button1, file$1, 185, 2, 4340);
			attr_dev(button2, "class", "icon svelte-8qtwr5");
			button2.disabled = button2_disabled_value = ctx.saving || !ctx.$session.user;
			attr_dev(button2, "title", "fork");
			add_location(button2, file$1, 189, 2, 4474);
			attr_dev(button3, "class", "icon svelte-8qtwr5");
			button3.disabled = button3_disabled_value = ctx.saving || !ctx.$session.user;
			attr_dev(button3, "title", "save");
			add_location(button3, file$1, 197, 2, 4688);
			set_style(div0, "text-align", "right");
			set_style(div0, "margin-right", ".4rem");
			add_location(div0, file$1, 176, 1, 4090);
			attr_dev(div1, "class", "app-controls svelte-8qtwr5");
			add_location(div1, file$1, 169, 0, 3955);

			dispose = [
				listen_dev(window, "keydown", ctx.handleKeydown),
				listen_dev(input, "input", ctx.input_input_handler),
				listen_dev(input, "focus", focus_handler),
				listen_dev(button0, "click", ctx.click_handler),
				listen_dev(button1, "click", ctx.download),
				listen_dev(button2, "click", ctx.click_handler_1),
				listen_dev(button3, "click", ctx.save)
			];
		},

		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, input);

			set_input_value(input, ctx.name);

			enter_action = enter.call(null, input, enter_function) || {};
			append_dev(div1, t0);
			append_dev(div1, div0);
			append_dev(div0, button0);
			if_blocks[current_block_type_index].m(button0, null);
			append_dev(div0, t1);
			append_dev(div0, button1);
			mount_component(icon, button1, null);
			append_dev(div0, t2);
			append_dev(div0, button2);
			if_blocks_1[current_block_type_index_1].m(button2, null);
			append_dev(div0, t3);
			append_dev(div0, button3);
			if_blocks_2[current_block_type_index_2].m(button3, null);
			append_dev(div0, t4);
			if_blocks_3[current_block_type_index_3].m(div0, null);
			current = true;
		},

		p: function update(changed, ctx) {
			if (changed.name && (input.value !== ctx.name)) set_input_value(input, ctx.name);

			var previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(changed, ctx);
			if (current_block_type_index !== previous_block_index) {
				group_outros();
				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});
				check_outros();

				if_block0 = if_blocks[current_block_type_index];
				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				}
				transition_in(if_block0, 1);
				if_block0.m(button0, null);
			}

			if (!current || changed.downloading) {
				prop_dev(button1, "disabled", ctx.downloading);
			}

			var previous_block_index_1 = current_block_type_index_1;
			current_block_type_index_1 = select_block_type_1(changed, ctx);
			if (current_block_type_index_1 !== previous_block_index_1) {
				group_outros();
				transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
					if_blocks_1[previous_block_index_1] = null;
				});
				check_outros();

				if_block1 = if_blocks_1[current_block_type_index_1];
				if (!if_block1) {
					if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
					if_block1.c();
				}
				transition_in(if_block1, 1);
				if_block1.m(button2, null);
			}

			if ((!current || changed.saving || changed.$session) && button2_disabled_value !== (button2_disabled_value = ctx.saving || !ctx.$session.user)) {
				prop_dev(button2, "disabled", button2_disabled_value);
			}

			var previous_block_index_2 = current_block_type_index_2;
			current_block_type_index_2 = select_block_type_2(changed, ctx);
			if (current_block_type_index_2 !== previous_block_index_2) {
				group_outros();
				transition_out(if_blocks_2[previous_block_index_2], 1, 1, () => {
					if_blocks_2[previous_block_index_2] = null;
				});
				check_outros();

				if_block2 = if_blocks_2[current_block_type_index_2];
				if (!if_block2) {
					if_block2 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);
					if_block2.c();
				}
				transition_in(if_block2, 1);
				if_block2.m(button3, null);
			}

			if ((!current || changed.saving || changed.$session) && button3_disabled_value !== (button3_disabled_value = ctx.saving || !ctx.$session.user)) {
				prop_dev(button3, "disabled", button3_disabled_value);
			}

			var previous_block_index_3 = current_block_type_index_3;
			current_block_type_index_3 = select_block_type_3(changed, ctx);
			if (current_block_type_index_3 !== previous_block_index_3) {
				group_outros();
				transition_out(if_blocks_3[previous_block_index_3], 1, 1, () => {
					if_blocks_3[previous_block_index_3] = null;
				});
				check_outros();

				if_block3 = if_blocks_3[current_block_type_index_3];
				if (!if_block3) {
					if_block3 = if_blocks_3[current_block_type_index_3] = if_block_creators_3[current_block_type_index_3](ctx);
					if_block3.c();
				}
				transition_in(if_block3, 1);
				if_block3.m(div0, null);
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);

			transition_in(icon.$$.fragment, local);

			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(if_block3);
			current = true;
		},

		o: function outro(local) {
			transition_out(if_block0);
			transition_out(icon.$$.fragment, local);
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(if_block3);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div1);
			}

			if (enter_action && typeof enter_action.destroy === 'function') enter_action.destroy();
			if_blocks[current_block_type_index].d();

			destroy_component(icon);

			if_blocks_1[current_block_type_index_1].d();
			if_blocks_2[current_block_type_index_2].d();
			if_blocks_3[current_block_type_index_3].d();
			run_all(dispose);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$1.name, type: "component", source: "", ctx });
	return block;
}

function wait(ms) {
	return new Promise(f => setTimeout(f, ms));
}

const focus_handler = (e) => e.target.select();

const enter_function = (e) => e.target.blur();

function instance$1($$self, $$props, $$invalidate) {
	let $session;

	

	const dispatch = createEventDispatcher();
	const { session } = stores$1(); validate_store(session, 'session'); component_subscribe($$self, session, $$value => { $session = $$value; $$invalidate('$session', $session); });
	const { login } = getContext('app');

	let { repl, gist, name, zen_mode, bundle } = $$props;

	let saving = false;
	let downloading = false;
	let justSaved = false;
	let justForked = false;

	function handleKeydown(event) {
		if (event.which === 83 && (isMac ? event.metaKey : event.ctrlKey)) {
			event.preventDefault();
			save();
		}
	}

	async function fork(intentWasSave) {
		$$invalidate('saving', saving = true);

		const { components } = repl.toJSON();

		try {
			const r = await fetch(`repl/create.json`, {
				method: 'POST',
				credentials: 'include',
				body: JSON.stringify({
					name,
					files: components.map(component => ({
						name: `${component.name}.${component.type}`,
						source: component.source
					}))
				})
			});

			if (r.status < 200 || r.status >= 300) {
				const { error } = await r.json();
				throw new Error(`Received an HTTP ${r.status} response: ${error}`);
			}

			const gist = await r.json();
			dispatch('forked', { gist });

			if (intentWasSave) {
				$$invalidate('justSaved', justSaved = true);
				await wait(600);
				$$invalidate('justSaved', justSaved = false);
			} else {
				$$invalidate('justForked', justForked = true);
				await wait(600);
				$$invalidate('justForked', justForked = false);
			}
		} catch (err) {
			if (navigator.onLine) {
				alert(err.message);
			} else {
				alert(`It looks like you're offline! Find the internet and try again`);
			}
		}

		$$invalidate('saving', saving = false);
	}

	async function save() {
		if (saving) return;

		if (!canSave) {
			fork(true);
			return;
		}

		$$invalidate('saving', saving = true);

		try {
			// Send all files back to API
			// ~> Any missing files are considered deleted!
			const { components } = repl.toJSON();

			const r = await fetch(`repl/${gist.uid}.json`, {
				method: 'PATCH',
				credentials: 'include',
				body: JSON.stringify({
					name,
					files: components.map(component => ({
						name: `${component.name}.${component.type}`,
						source: component.source
					}))
				})
			});

			if (r.status < 200 || r.status >= 300) {
				const { error } = await r.json();
				throw new Error(`Received an HTTP ${r.status} response: ${error}`);
			}

			await r.json();

			$$invalidate('justSaved', justSaved = true);
			await wait(600);
			$$invalidate('justSaved', justSaved = false);
		} catch (err) {
			if (navigator.onLine) {
				alert(err.message);
			} else {
				alert(`It looks like you're offline! Find the internet and try again`);
			}
		}

		$$invalidate('saving', saving = false);
	}

	async function download() {
		$$invalidate('downloading', downloading = true);

		const { components, imports } = repl.toJSON();

		const files = await (await fetch('/svelte-app.json')).json();

		if (imports.length > 0) {
			const idx = files.findIndex(({ path }) => path === 'package.json');
			const pkg = JSON.parse(files[idx].data);
			const { devDependencies } = pkg;
			imports.forEach(mod => {
				const match = /^(@[^/]+\/)?[^@/]+/.exec(mod);
				devDependencies[match[0]] = 'latest';
			});
			pkg.devDependencies = devDependencies;
			files[idx].data = JSON.stringify(pkg, null, '  ');
		}

		files.push(...components.map(component => ({ path: `src/${component.name}.${component.type}`, data: component.source })));
		files.push({
			path: `src/main.js`, data: `import App from './App.svelte';

var app = new App({
	target: document.body
});

export default app;` });

		downloadBlob(toBlob(files), 'svelte-app.zip');

		$$invalidate('downloading', downloading = false);
	}

	const writable_props = ['repl', 'gist', 'name', 'zen_mode', 'bundle'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<Index> was created with unknown prop '${key}'`);
	});

	function input_input_handler() {
		name = this.value;
		$$invalidate('name', name);
	}

	const click_handler = () => $$invalidate('zen_mode', zen_mode = !zen_mode);

	const click_handler_1 = () => fork(false);

	$$self.$set = $$props => {
		if ('repl' in $$props) $$invalidate('repl', repl = $$props.repl);
		if ('gist' in $$props) $$invalidate('gist', gist = $$props.gist);
		if ('name' in $$props) $$invalidate('name', name = $$props.name);
		if ('zen_mode' in $$props) $$invalidate('zen_mode', zen_mode = $$props.zen_mode);
		if ('bundle' in $$props) $$invalidate('bundle', bundle = $$props.bundle);
	};

	$$self.$capture_state = () => {
		return { repl, gist, name, zen_mode, bundle, saving, downloading, justSaved, justForked, canSave, $session };
	};

	$$self.$inject_state = $$props => {
		if ('repl' in $$props) $$invalidate('repl', repl = $$props.repl);
		if ('gist' in $$props) $$invalidate('gist', gist = $$props.gist);
		if ('name' in $$props) $$invalidate('name', name = $$props.name);
		if ('zen_mode' in $$props) $$invalidate('zen_mode', zen_mode = $$props.zen_mode);
		if ('bundle' in $$props) $$invalidate('bundle', bundle = $$props.bundle);
		if ('saving' in $$props) $$invalidate('saving', saving = $$props.saving);
		if ('downloading' in $$props) $$invalidate('downloading', downloading = $$props.downloading);
		if ('justSaved' in $$props) $$invalidate('justSaved', justSaved = $$props.justSaved);
		if ('justForked' in $$props) $$invalidate('justForked', justForked = $$props.justForked);
		if ('canSave' in $$props) canSave = $$props.canSave;
		if ('$session' in $$props) session.set($session);
	};

	let canSave;

	$$self.$$.update = ($$dirty = { $session: 1, gist: 1 }) => {
		if ($$dirty.$session || $$dirty.gist) { canSave = $session.user && gist && gist.owner === $session.user.uid; }
	};

	return {
		session,
		login,
		repl,
		gist,
		name,
		zen_mode,
		bundle,
		saving,
		downloading,
		justSaved,
		justForked,
		handleKeydown,
		fork,
		save,
		download,
		$session,
		input_input_handler,
		click_handler,
		click_handler_1
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, ["repl", "gist", "name", "zen_mode", "bundle"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Index", options, id: create_fragment$1.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.repl === undefined && !('repl' in props)) {
			console.warn("<Index> was created without expected prop 'repl'");
		}
		if (ctx.gist === undefined && !('gist' in props)) {
			console.warn("<Index> was created without expected prop 'gist'");
		}
		if (ctx.name === undefined && !('name' in props)) {
			console.warn("<Index> was created without expected prop 'name'");
		}
		if (ctx.zen_mode === undefined && !('zen_mode' in props)) {
			console.warn("<Index> was created without expected prop 'zen_mode'");
		}
		if (ctx.bundle === undefined && !('bundle' in props)) {
			console.warn("<Index> was created without expected prop 'bundle'");
		}
	}

	get repl() {
		throw new Error_1("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set repl(value) {
		throw new Error_1("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get gist() {
		throw new Error_1("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set gist(value) {
		throw new Error_1("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get name() {
		throw new Error_1("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error_1("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get zen_mode() {
		throw new Error_1("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set zen_mode(value) {
		throw new Error_1("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get bundle() {
		throw new Error_1("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set bundle(value) {
		throw new Error_1("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\routes\repl\[id]\index.svelte generated by Svelte v3.12.0 */
const { console: console_1, window: window_1 } = globals;

const file$2 = "src\\routes\\repl\\[id]\\index.svelte";

// (206:1) {#if true}
function create_if_block$2(ctx) {
	var div, t, if_block_anchor, current;

	let repl_1_props = {
		workersUrl: "workers",
		svelteUrl: ctx.svelteUrl,
		rollupUrl: ctx.rollupUrl,
		relaxed: ctx.relaxed,
		fixed: ctx.mobile,
		injectedJS: ctx.mapbox_setup
	};
	var repl_1 = new Repl({ props: repl_1_props, $$inline: true });

	ctx.repl_1_binding(repl_1);

	var if_block = (ctx.mobile) && create_if_block_1$1(ctx);

	const block = {
		c: function create() {
			div = element("div");
			repl_1.$$.fragment.c();
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			repl_1.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},

		h: function hydrate() {
			attr_dev(div, "class", "viewport svelte-95x48y");
			toggle_class(div, "offset", ctx.checked);
			add_location(div, file$2, 206, 2, 4557);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(repl_1, div, null);
			insert_dev(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var repl_1_changes = {};
			if (changed.svelteUrl) repl_1_changes.svelteUrl = ctx.svelteUrl;
			if (changed.relaxed) repl_1_changes.relaxed = ctx.relaxed;
			if (changed.mobile) repl_1_changes.fixed = ctx.mobile;
			repl_1.$set(repl_1_changes);

			if (changed.checked) {
				toggle_class(div, "offset", ctx.checked);
			}

			if (ctx.mobile) {
				if (if_block) {
					if_block.p(changed, ctx);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block_1$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();
				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});
				check_outros();
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(repl_1.$$.fragment, local);

			transition_in(if_block);
			current = true;
		},

		o: function outro(local) {
			transition_out(repl_1.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			ctx.repl_1_binding(null);

			destroy_component(repl_1);

			if (detaching) {
				detach_dev(t);
			}

			if (if_block) if_block.d(detaching);

			if (detaching) {
				detach_dev(if_block_anchor);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block$2.name, type: "if", source: "(206:1) {#if true}", ctx });
	return block;
}

// (219:2) {#if mobile}
function create_if_block_1$1(ctx) {
	var updating_checked, current;

	function inputoutputtoggle_checked_binding(value) {
		ctx.inputoutputtoggle_checked_binding.call(null, value);
		updating_checked = true;
		add_flush_callback(() => updating_checked = false);
	}

	let inputoutputtoggle_props = {};
	if (ctx.checked !== void 0) {
		inputoutputtoggle_props.checked = ctx.checked;
	}
	var inputoutputtoggle = new InputOutputToggle({
		props: inputoutputtoggle_props,
		$$inline: true
	});

	binding_callbacks.push(() => bind(inputoutputtoggle, 'checked', inputoutputtoggle_checked_binding));

	const block = {
		c: function create() {
			inputoutputtoggle.$$.fragment.c();
		},

		l: function claim(nodes) {
			inputoutputtoggle.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(inputoutputtoggle, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var inputoutputtoggle_changes = {};
			if (!updating_checked && changed.checked) {
				inputoutputtoggle_changes.checked = ctx.checked;
			}
			inputoutputtoggle.$set(inputoutputtoggle_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(inputoutputtoggle.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(inputoutputtoggle.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(inputoutputtoggle, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block_1$1.name, type: "if", source: "(219:2) {#if mobile}", ctx });
	return block;
}

function create_fragment$2(ctx) {
	var title_value, meta0, meta1, meta2, t0, div, updating_name, updating_zen_mode, t1, div_class_value, current, dispose;

	add_render_callback(ctx.onwindowresize);

	document.title = title_value = "" + ctx.name + " • REPL • Svelte";

	function appcontrols_name_binding(value) {
		ctx.appcontrols_name_binding.call(null, value);
		updating_name = true;
		add_flush_callback(() => updating_name = false);
	}

	function appcontrols_zen_mode_binding(value_1) {
		ctx.appcontrols_zen_mode_binding.call(null, value_1);
		updating_zen_mode = true;
		add_flush_callback(() => updating_zen_mode = false);
	}

	let appcontrols_props = { gist: ctx.gist, repl: ctx.repl };
	if (ctx.name !== void 0) {
		appcontrols_props.name = ctx.name;
	}
	if (ctx.zen_mode !== void 0) {
		appcontrols_props.zen_mode = ctx.zen_mode;
	}
	var appcontrols = new Index({ props: appcontrols_props, $$inline: true });

	binding_callbacks.push(() => bind(appcontrols, 'name', appcontrols_name_binding));
	binding_callbacks.push(() => bind(appcontrols, 'zen_mode', appcontrols_zen_mode_binding));
	appcontrols.$on("forked", ctx.handle_fork);

	var if_block =  create_if_block$2(ctx);

	const block = {
		c: function create() {
			meta0 = element("meta");
			meta1 = element("meta");
			meta2 = element("meta");
			t0 = space();
			div = element("div");
			appcontrols.$$.fragment.c();
			t1 = space();
			if (if_block) if_block.c();
			this.h();
		},

		l: function claim(nodes) {
			meta0 = claim_element(nodes, "META", { name: true, content: true }, false);
			var meta0_nodes = children(meta0);

			meta0_nodes.forEach(detach_dev);

			meta1 = claim_element(nodes, "META", { name: true, content: true }, false);
			var meta1_nodes = children(meta1);

			meta1_nodes.forEach(detach_dev);

			meta2 = claim_element(nodes, "META", { name: true, content: true }, false);
			var meta2_nodes = children(meta2);

			meta2_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);

			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			appcontrols.$$.fragment.l(div_nodes);
			t1 = claim_space(div_nodes);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(meta0, "name", "twitter:title");
			attr_dev(meta0, "content", "Svelte REPL");
			add_location(meta0, file$2, 189, 1, 4132);
			attr_dev(meta1, "name", "twitter:description");
			attr_dev(meta1, "content", "Cybernetically enhanced web apps");
			add_location(meta1, file$2, 190, 1, 4183);
			attr_dev(meta2, "name", "Description");
			attr_dev(meta2, "content", "Interactive Svelte playground");
			add_location(meta2, file$2, 191, 1, 4261);
			attr_dev(div, "class", div_class_value = "repl-outer " + (ctx.zen_mode ? 'zen-mode' : '') + " svelte-95x48y");
			toggle_class(div, "mobile", ctx.mobile);
			add_location(div, file$2, 196, 0, 4385);
			dispose = listen_dev(window_1, "resize", ctx.onwindowresize);
		},

		m: function mount(target, anchor) {
			append_dev(document.head, meta0);
			append_dev(document.head, meta1);
			append_dev(document.head, meta2);
			insert_dev(target, t0, anchor);
			insert_dev(target, div, anchor);
			mount_component(appcontrols, div, null);
			append_dev(div, t1);
			if (if_block) if_block.m(div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			if ((!current || changed.name) && title_value !== (title_value = "" + ctx.name + " • REPL • Svelte")) {
				document.title = title_value;
			}

			var appcontrols_changes = {};
			if (changed.gist) appcontrols_changes.gist = ctx.gist;
			if (changed.repl) appcontrols_changes.repl = ctx.repl;
			if (!updating_name && changed.name) {
				appcontrols_changes.name = ctx.name;
			}
			if (!updating_zen_mode && changed.zen_mode) {
				appcontrols_changes.zen_mode = ctx.zen_mode;
			}
			appcontrols.$set(appcontrols_changes);

			if_block.p(changed, ctx);

			if ((!current || changed.zen_mode) && div_class_value !== (div_class_value = "repl-outer " + (ctx.zen_mode ? 'zen-mode' : '') + " svelte-95x48y")) {
				attr_dev(div, "class", div_class_value);
			}

			if ((changed.zen_mode || changed.mobile)) {
				toggle_class(div, "mobile", ctx.mobile);
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(appcontrols.$$.fragment, local);

			transition_in(if_block);
			current = true;
		},

		o: function outro(local) {
			transition_out(appcontrols.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},

		d: function destroy(detaching) {
			detach_dev(meta0);
			detach_dev(meta1);
			detach_dev(meta2);

			if (detaching) {
				detach_dev(t0);
				detach_dev(div);
			}

			destroy_component(appcontrols);

			if (if_block) if_block.d();
			dispose();
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$2.name, type: "component", source: "", ctx });
	return block;
}

function preload({ params, query }) {
	return {
		version: query.version || '3',
		id: params.id
	};
}

function instance$2($$self, $$props, $$invalidate) {
	let $session;

	

	let { version, id } = $$props;

	const { session } = stores$1(); validate_store(session, 'session'); component_subscribe($$self, session, $$value => { $session = $$value; $$invalidate('$session', $session); });

	let repl;
	let gist;
	let name = 'Loading...';
	let zen_mode = false;
	let is_relaxed_gist = false;
	let width =  window.innerWidth ;
	let checked = false;

	function update_query_string(version) {
		const params = [];

		if (version !== 'latest') params.push(`version=${version}`);

		const url = params.length > 0
			? `repl/${id}?${params.join('&')}`
			: `repl/${id}`;

		history.replaceState({}, 'x', url);
	}

	function fetch_gist(id) {
		if (gist && gist.uid === id) {
			// if the id changed because we just forked, don't refetch
			return;
		}

		// TODO handle `relaxed` logic
		fetch(`repl/${id}.json`).then(r => {
			if (r.ok) {
				r.json().then(data => {
					$$invalidate('gist', gist = data);
					$$invalidate('name', name = data.name);

					$$invalidate('is_relaxed_gist', is_relaxed_gist = data.relaxed);

					const components = data.files.map(file => {
						let [name, type] = file.name.split('.');
						if (type === 'html') type = 'svelte'; // TODO do this on the server
						return { name, type, source: file.source };
					});

					components.sort((a, b) => {
						if (a.name === 'App' && a.type === 'svelte') return -1;
						if (b.name === 'App' && b.type === 'svelte') return 1;

						if (a.type !== b.type) return a.type === 'svelte' ? -1 : 1;

						return a.name < b.name ? -1 : 1;
					});

					repl.set({ components });
				});
			} else {
				console.warn('TODO: 404 Gist');
			}
		});
	}

	onMount(() => {
		if (version !== 'local') {
			fetch(`https://unpkg.com/svelte@${version || '3'}/package.json`)
				.then(r => r.json())
				.then(pkg => {
					$$invalidate('version', version = pkg.version);
				});
		}
	});

	function handle_fork(event) {
		console.log('> handle_fork', event);
		$$invalidate('gist', gist = event.detail.gist);
		goto(`/repl/${gist.uid}?version=${version}`);
	}

	const rollupUrl = `https://unpkg.com/rollup@1/dist/rollup.browser.js`;

	// needed for context API example
	const mapbox_setup = `window.MAPBOX_ACCESS_TOKEN = undefined;`;

	const writable_props = ['version', 'id'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console_1.warn(`<Index> was created with unknown prop '${key}'`);
	});

	function onwindowresize() {
		width = window_1.innerWidth; $$invalidate('width', width);
	}

	function appcontrols_name_binding(value) {
		name = value;
		$$invalidate('name', name);
	}

	function appcontrols_zen_mode_binding(value_1) {
		zen_mode = value_1;
		$$invalidate('zen_mode', zen_mode);
	}

	function repl_1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('repl', repl = $$value);
		});
	}

	function inputoutputtoggle_checked_binding(value) {
		checked = value;
		$$invalidate('checked', checked);
	}

	$$self.$set = $$props => {
		if ('version' in $$props) $$invalidate('version', version = $$props.version);
		if ('id' in $$props) $$invalidate('id', id = $$props.id);
	};

	$$self.$capture_state = () => {
		return { version, id, repl, gist, name, zen_mode, is_relaxed_gist, width, checked, svelteUrl, mobile, relaxed, $session };
	};

	$$self.$inject_state = $$props => {
		if ('version' in $$props) $$invalidate('version', version = $$props.version);
		if ('id' in $$props) $$invalidate('id', id = $$props.id);
		if ('repl' in $$props) $$invalidate('repl', repl = $$props.repl);
		if ('gist' in $$props) $$invalidate('gist', gist = $$props.gist);
		if ('name' in $$props) $$invalidate('name', name = $$props.name);
		if ('zen_mode' in $$props) $$invalidate('zen_mode', zen_mode = $$props.zen_mode);
		if ('is_relaxed_gist' in $$props) $$invalidate('is_relaxed_gist', is_relaxed_gist = $$props.is_relaxed_gist);
		if ('width' in $$props) $$invalidate('width', width = $$props.width);
		if ('checked' in $$props) $$invalidate('checked', checked = $$props.checked);
		if ('svelteUrl' in $$props) $$invalidate('svelteUrl', svelteUrl = $$props.svelteUrl);
		if ('mobile' in $$props) $$invalidate('mobile', mobile = $$props.mobile);
		if ('relaxed' in $$props) $$invalidate('relaxed', relaxed = $$props.relaxed);
		if ('$session' in $$props) session.set($session);
	};

	let svelteUrl, mobile, relaxed;

	$$self.$$.update = ($$dirty = { version: 1, id: 1, width: 1, is_relaxed_gist: 1, $session: 1, gist: 1 }) => {
		if ($$dirty.version) { if (typeof history !== 'undefined') update_query_string(version); }
		if ($$dirty.id) { fetch_gist(id); }
		if ($$dirty.version) { $$invalidate('svelteUrl', svelteUrl =  version === 'local' ?
				`${location.origin}/repl/local` :
				`https://unpkg.com/svelte@${version}`); }
		if ($$dirty.width) { $$invalidate('mobile', mobile = width < 540); }
		if ($$dirty.is_relaxed_gist || $$dirty.$session || $$dirty.gist) { $$invalidate('relaxed', relaxed = is_relaxed_gist || ($session.user && gist && $session.user.uid === gist.owner)); }
	};

	return {
		version,
		id,
		session,
		repl,
		gist,
		name,
		zen_mode,
		width,
		checked,
		handle_fork,
		rollupUrl,
		mapbox_setup,
		svelteUrl,
		mobile,
		relaxed,
		onwindowresize,
		appcontrols_name_binding,
		appcontrols_zen_mode_binding,
		repl_1_binding,
		inputoutputtoggle_checked_binding
	};
}

class Index$1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, ["version", "id"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Index", options, id: create_fragment$2.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.version === undefined && !('version' in props)) {
			console_1.warn("<Index> was created without expected prop 'version'");
		}
		if (ctx.id === undefined && !('id' in props)) {
			console_1.warn("<Index> was created without expected prop 'id'");
		}
	}

	get version() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set version(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Index$1;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
