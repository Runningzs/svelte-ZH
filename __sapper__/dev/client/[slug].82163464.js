import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, e as element, l as space, E as text, c as claim_element, a as children, b as detach_dev, p as claim_space, F as claim_text, f as attr_dev, h as add_location, P as HtmlTag, k as append_dev, j as insert_dev, H as set_data_dev, n as noop } from './index.4e52d202.js';

/* src\routes\blog\[slug].svelte generated by Svelte v3.12.0 */

const file = "src\\routes\\blog\\[slug].svelte";

function create_fragment(ctx) {
	var title_value, meta0, meta0_content_value, meta1, meta1_content_value, meta2, meta2_content_value, t0, article, h1, t1_value = ctx.post.metadata.title + "", t1, t2, p0, t3_value = ctx.post.metadata.description + "", t3, t4, p1, a, t5_value = ctx.post.metadata.author + "", t5, a_href_value, t6, time, t7_value = ctx.post.metadata.dateString + "", t7, time_datetime_value, t8, html_tag, raw_value = ctx.post.html + "";

	document.title = title_value = ctx.post.metadata.title;

	const block = {
		c: function create() {
			meta0 = element("meta");
			meta1 = element("meta");
			meta2 = element("meta");
			t0 = space();
			article = element("article");
			h1 = element("h1");
			t1 = text(t1_value);
			t2 = space();
			p0 = element("p");
			t3 = text(t3_value);
			t4 = space();
			p1 = element("p");
			a = element("a");
			t5 = text(t5_value);
			t6 = space();
			time = element("time");
			t7 = text(t7_value);
			t8 = space();
			this.h();
		},

		l: function claim(nodes) {
			meta0 = claim_element(nodes, "META", { name: true, content: true }, false);
			var meta0_nodes = children(meta0);

			meta0_nodes.forEach(detach_dev);

			meta1 = claim_element(nodes, "META", { name: true, content: true }, false);
			var meta1_nodes = children(meta1);

			meta1_nodes.forEach(detach_dev);

			meta2 = claim_element(nodes, "META", { name: true, content: true }, false);
			var meta2_nodes = children(meta2);

			meta2_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);

			article = claim_element(nodes, "ARTICLE", { class: true }, false);
			var article_nodes = children(article);

			h1 = claim_element(article_nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t1 = claim_text(h1_nodes, t1_value);
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(article_nodes);

			p0 = claim_element(article_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t3 = claim_text(p0_nodes, t3_value);
			p0_nodes.forEach(detach_dev);
			t4 = claim_space(article_nodes);

			p1 = claim_element(article_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			a = claim_element(p1_nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t5 = claim_text(a_nodes, t5_value);
			a_nodes.forEach(detach_dev);
			t6 = claim_space(p1_nodes);

			time = claim_element(p1_nodes, "TIME", { datetime: true }, false);
			var time_nodes = children(time);

			t7 = claim_text(time_nodes, t7_value);
			time_nodes.forEach(detach_dev);
			p1_nodes.forEach(detach_dev);
			t8 = claim_space(article_nodes);
			article_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(meta0, "name", "twitter:title");
			attr_dev(meta0, "content", meta0_content_value = ctx.post.metadata.title);
			add_location(meta0, file, 14, 1, 328);
			attr_dev(meta1, "name", "twitter:description");
			attr_dev(meta1, "content", meta1_content_value = ctx.post.metadata.description);
			add_location(meta1, file, 15, 1, 388);
			attr_dev(meta2, "name", "Description");
			attr_dev(meta2, "content", meta2_content_value = ctx.post.metadata.description);
			add_location(meta2, file, 16, 1, 460);
			attr_dev(h1, "class", "svelte-ih1crn");
			add_location(h1, file, 20, 1, 574);
			attr_dev(p0, "class", "standfirst svelte-ih1crn");
			add_location(p0, file, 21, 1, 607);
			attr_dev(a, "href", a_href_value = ctx.post.metadata.authorURL);
			attr_dev(a, "class", "svelte-ih1crn");
			add_location(a, file, 23, 19, 683);
			attr_dev(time, "datetime", time_datetime_value = ctx.post.metadata.pubdate);
			add_location(time, file, 23, 82, 746);
			attr_dev(p1, "class", "byline svelte-ih1crn");
			add_location(p1, file, 23, 1, 665);
			html_tag = new HtmlTag(raw_value, null);
			attr_dev(article, "class", "post listify svelte-ih1crn");
			add_location(article, file, 19, 0, 541);
		},

		m: function mount(target, anchor) {
			append_dev(document.head, meta0);
			append_dev(document.head, meta1);
			append_dev(document.head, meta2);
			insert_dev(target, t0, anchor);
			insert_dev(target, article, anchor);
			append_dev(article, h1);
			append_dev(h1, t1);
			append_dev(article, t2);
			append_dev(article, p0);
			append_dev(p0, t3);
			append_dev(article, t4);
			append_dev(article, p1);
			append_dev(p1, a);
			append_dev(a, t5);
			append_dev(p1, t6);
			append_dev(p1, time);
			append_dev(time, t7);
			append_dev(article, t8);
			html_tag.m(article);
		},

		p: function update(changed, ctx) {
			if ((changed.post) && title_value !== (title_value = ctx.post.metadata.title)) {
				document.title = title_value;
			}

			if ((changed.post) && meta0_content_value !== (meta0_content_value = ctx.post.metadata.title)) {
				attr_dev(meta0, "content", meta0_content_value);
			}

			if ((changed.post) && meta1_content_value !== (meta1_content_value = ctx.post.metadata.description)) {
				attr_dev(meta1, "content", meta1_content_value);
			}

			if ((changed.post) && meta2_content_value !== (meta2_content_value = ctx.post.metadata.description)) {
				attr_dev(meta2, "content", meta2_content_value);
			}

			if ((changed.post) && t1_value !== (t1_value = ctx.post.metadata.title + "")) {
				set_data_dev(t1, t1_value);
			}

			if ((changed.post) && t3_value !== (t3_value = ctx.post.metadata.description + "")) {
				set_data_dev(t3, t3_value);
			}

			if ((changed.post) && t5_value !== (t5_value = ctx.post.metadata.author + "")) {
				set_data_dev(t5, t5_value);
			}

			if ((changed.post) && a_href_value !== (a_href_value = ctx.post.metadata.authorURL)) {
				attr_dev(a, "href", a_href_value);
			}

			if ((changed.post) && t7_value !== (t7_value = ctx.post.metadata.dateString + "")) {
				set_data_dev(t7, t7_value);
			}

			if ((changed.post) && time_datetime_value !== (time_datetime_value = ctx.post.metadata.pubdate)) {
				attr_dev(time, "datetime", time_datetime_value);
			}

			if ((changed.post) && raw_value !== (raw_value = ctx.post.html + "")) {
				html_tag.p(raw_value);
			}
		},

		i: noop,
		o: noop,

		d: function destroy(detaching) {
			detach_dev(meta0);
			detach_dev(meta1);
			detach_dev(meta2);

			if (detaching) {
				detach_dev(t0);
				detach_dev(article);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment.name, type: "component", source: "", ctx });
	return block;
}

async function preload({ params }) {
	const res = await this.fetch(`blog/${params.slug}.json`);
	return res.ok ? { post: await res.json() } : this.error(404, 'Not found');
}

function instance($$self, $$props, $$invalidate) {
	let { post } = $$props;

	const writable_props = ['post'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<Slug> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('post' in $$props) $$invalidate('post', post = $$props.post);
	};

	$$self.$capture_state = () => {
		return { post };
	};

	$$self.$inject_state = $$props => {
		if ('post' in $$props) $$invalidate('post', post = $$props.post);
	};

	return { post };
}

class Slug extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["post"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Slug", options, id: create_fragment.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.post === undefined && !('post' in props)) {
			console.warn("<Slug> was created without expected prop 'post'");
		}
	}

	get post() {
		throw new Error("<Slug>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set post(value) {
		throw new Error("<Slug>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Slug;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
